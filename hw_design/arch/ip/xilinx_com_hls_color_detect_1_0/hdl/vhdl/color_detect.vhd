-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_detect is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    strm_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    strm_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_TVALID : IN STD_LOGIC;
    strm_in_TREADY : OUT STD_LOGIC );
end;


architecture behav of color_detect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_detect,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.679000,HLS_SYN_LAT=1875041,HLS_SYN_TPT=1850486,HLS_SYN_MEM=3,HLS_SYN_DSP=2,HLS_SYN_FF=8371,HLS_SYN_LUT=12972,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal H_thres : STD_LOGIC_VECTOR (15 downto 0);
    signal S_thres : STD_LOGIC_VECTOR (15 downto 0);
    signal V_thres : STD_LOGIC_VECTOR (15 downto 0);
    signal color_detect_entry3_U0_ap_start : STD_LOGIC;
    signal color_detect_entry3_U0_ap_done : STD_LOGIC;
    signal color_detect_entry3_U0_ap_continue : STD_LOGIC;
    signal color_detect_entry3_U0_ap_idle : STD_LOGIC;
    signal color_detect_entry3_U0_ap_ready : STD_LOGIC;
    signal color_detect_entry3_U0_H_thres_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal color_detect_entry3_U0_H_thres_out_write : STD_LOGIC;
    signal color_detect_entry3_U0_S_thres_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal color_detect_entry3_U0_S_thres_out_write : STD_LOGIC;
    signal color_detect_entry3_U0_V_thres_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal color_detect_entry3_U0_V_thres_out_write : STD_LOGIC;
    signal color_detect_entry13_U0_ap_start : STD_LOGIC;
    signal color_detect_entry13_U0_ap_done : STD_LOGIC;
    signal color_detect_entry13_U0_ap_continue : STD_LOGIC;
    signal color_detect_entry13_U0_ap_idle : STD_LOGIC;
    signal color_detect_entry13_U0_ap_ready : STD_LOGIC;
    signal color_detect_entry13_U0_H_thres_read : STD_LOGIC;
    signal color_detect_entry13_U0_S_thres_read : STD_LOGIC;
    signal color_detect_entry13_U0_V_thres_read : STD_LOGIC;
    signal color_detect_entry13_U0_H_thres_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal color_detect_entry13_U0_H_thres_out_write : STD_LOGIC;
    signal color_detect_entry13_U0_S_thres_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal color_detect_entry13_U0_S_thres_out_write : STD_LOGIC;
    signal color_detect_entry13_U0_V_thres_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal color_detect_entry13_U0_V_thres_out_write : STD_LOGIC;
    signal ap_sync_reg_color_detect_entry13_U0_ap_start : STD_LOGIC := '0';
    signal Block_codeRepl1_proc_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_V_thres_read : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_S_thres_read : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_H_thres_read : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_V_thres_byval_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl1_proc_U0_V_thres_byval_out_write : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_S_thres_byval_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl1_proc_U0_S_thres_byval_out_write : STD_LOGIC;
    signal Block_codeRepl1_proc_U0_H_thres_byval_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_codeRepl1_proc_U0_H_thres_byval_out_write : STD_LOGIC;
    signal ap_sync_reg_Block_codeRepl1_proc_U0_ap_start : STD_LOGIC := '0';
    signal strm2mat_U0_ap_start : STD_LOGIC;
    signal strm2mat_U0_ap_done : STD_LOGIC;
    signal strm2mat_U0_ap_continue : STD_LOGIC;
    signal strm2mat_U0_ap_idle : STD_LOGIC;
    signal strm2mat_U0_ap_ready : STD_LOGIC;
    signal strm2mat_U0_strm_in_TREADY : STD_LOGIC;
    signal strm2mat_U0_img_src_data_stream_2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal strm2mat_U0_img_src_data_stream_2_write : STD_LOGIC;
    signal strm2mat_U0_img_src_data_stream_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal strm2mat_U0_img_src_data_stream_1_write : STD_LOGIC;
    signal strm2mat_U0_img_src_data_stream_s_din : STD_LOGIC_VECTOR (7 downto 0);
    signal strm2mat_U0_img_src_data_stream_s_write : STD_LOGIC;
    signal CvtColor_U0_ap_start : STD_LOGIC;
    signal CvtColor_U0_ap_done : STD_LOGIC;
    signal CvtColor_U0_ap_continue : STD_LOGIC;
    signal CvtColor_U0_ap_idle : STD_LOGIC;
    signal CvtColor_U0_ap_ready : STD_LOGIC;
    signal CvtColor_U0_img_src_data_stream_2_read : STD_LOGIC;
    signal CvtColor_U0_img_src_data_stream_1_read : STD_LOGIC;
    signal CvtColor_U0_img_src_data_stream_s_read : STD_LOGIC;
    signal CvtColor_U0_img_hsv_data_stream_2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_img_hsv_data_stream_2_write : STD_LOGIC;
    signal CvtColor_U0_img_hsv_data_stream_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_img_hsv_data_stream_1_write : STD_LOGIC;
    signal CvtColor_U0_img_hsv_data_stream_s_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_img_hsv_data_stream_s_write : STD_LOGIC;
    signal ap_sync_reg_CvtColor_U0_ap_start : STD_LOGIC := '0';
    signal doublethres_U0_ap_start : STD_LOGIC;
    signal doublethres_U0_ap_done : STD_LOGIC;
    signal doublethres_U0_ap_continue : STD_LOGIC;
    signal doublethres_U0_ap_idle : STD_LOGIC;
    signal doublethres_U0_ap_ready : STD_LOGIC;
    signal doublethres_U0_H_thres_read : STD_LOGIC;
    signal doublethres_U0_S_thres_read : STD_LOGIC;
    signal doublethres_U0_V_thres_read : STD_LOGIC;
    signal doublethres_U0_img_doublethres_data_din : STD_LOGIC_VECTOR (7 downto 0);
    signal doublethres_U0_img_doublethres_data_write : STD_LOGIC;
    signal doublethres_U0_img_hsv_data_stream_2_read : STD_LOGIC;
    signal doublethres_U0_img_hsv_data_stream_1_read : STD_LOGIC;
    signal doublethres_U0_img_hsv_data_stream_s_read : STD_LOGIC;
    signal ap_sync_reg_doublethres_U0_ap_start : STD_LOGIC := '0';
    signal count_720u_1280u_U0_ap_start : STD_LOGIC;
    signal count_720u_1280u_U0_ap_done : STD_LOGIC;
    signal count_720u_1280u_U0_ap_continue : STD_LOGIC;
    signal count_720u_1280u_U0_ap_idle : STD_LOGIC;
    signal count_720u_1280u_U0_ap_ready : STD_LOGIC;
    signal count_720u_1280u_U0_img_doublethres_data_read : STD_LOGIC;
    signal count_720u_1280u_U0_count_strm_V_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal count_720u_1280u_U0_count_strm_V_V_write : STD_LOGIC;
    signal ap_sync_reg_count_720u_1280u_U0_ap_start : STD_LOGIC := '0';
    signal findMaxRegion_U0_ap_start : STD_LOGIC;
    signal findMaxRegion_U0_ap_done : STD_LOGIC;
    signal findMaxRegion_U0_ap_continue : STD_LOGIC;
    signal findMaxRegion_U0_ap_idle : STD_LOGIC;
    signal findMaxRegion_U0_ap_ready : STD_LOGIC;
    signal findMaxRegion_U0_count_strm_V_V_read : STD_LOGIC;
    signal findMaxRegion_U0_res_strm_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal findMaxRegion_U0_res_strm_V_write : STD_LOGIC;
    signal ap_sync_reg_findMaxRegion_U0_ap_start : STD_LOGIC := '0';
    signal Block_codeRepl17_pro_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl17_pro_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl17_pro_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl17_pro_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl17_pro_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl17_pro_U0_res : STD_LOGIC_VECTOR (127 downto 0);
    signal Block_codeRepl17_pro_U0_res_ap_vld : STD_LOGIC;
    signal Block_codeRepl17_pro_U0_res_strm_V_read : STD_LOGIC;
    signal ap_sync_reg_Block_codeRepl17_pro_U0_ap_start : STD_LOGIC := '0';
    signal ap_sync_continue : STD_LOGIC;
    signal H_thres_c1_full_n : STD_LOGIC;
    signal H_thres_c1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_thres_c1_empty_n : STD_LOGIC;
    signal S_thres_c2_full_n : STD_LOGIC;
    signal S_thres_c2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal S_thres_c2_empty_n : STD_LOGIC;
    signal V_thres_c3_full_n : STD_LOGIC;
    signal V_thres_c3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal V_thres_c3_empty_n : STD_LOGIC;
    signal H_thres_c_full_n : STD_LOGIC;
    signal H_thres_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_thres_c_empty_n : STD_LOGIC;
    signal S_thres_c_full_n : STD_LOGIC;
    signal S_thres_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal S_thres_c_empty_n : STD_LOGIC;
    signal V_thres_c_full_n : STD_LOGIC;
    signal V_thres_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal V_thres_c_empty_n : STD_LOGIC;
    signal V_thres_byval_c_full_n : STD_LOGIC;
    signal V_thres_byval_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal V_thres_byval_c_empty_n : STD_LOGIC;
    signal S_thres_byval_c_full_n : STD_LOGIC;
    signal S_thres_byval_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal S_thres_byval_c_empty_n : STD_LOGIC;
    signal H_thres_byval_c_full_n : STD_LOGIC;
    signal H_thres_byval_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_thres_byval_c_empty_n : STD_LOGIC;
    signal img_src_data_stream_2_full_n : STD_LOGIC;
    signal img_src_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_src_data_stream_2_empty_n : STD_LOGIC;
    signal img_src_data_stream_1_full_n : STD_LOGIC;
    signal img_src_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_src_data_stream_1_empty_n : STD_LOGIC;
    signal img_src_data_stream_s_full_n : STD_LOGIC;
    signal img_src_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_src_data_stream_s_empty_n : STD_LOGIC;
    signal img_hsv_data_stream_2_full_n : STD_LOGIC;
    signal img_hsv_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_hsv_data_stream_2_empty_n : STD_LOGIC;
    signal img_hsv_data_stream_1_full_n : STD_LOGIC;
    signal img_hsv_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_hsv_data_stream_1_empty_n : STD_LOGIC;
    signal img_hsv_data_stream_s_full_n : STD_LOGIC;
    signal img_hsv_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_hsv_data_stream_s_empty_n : STD_LOGIC;
    signal img_doublethres_data_full_n : STD_LOGIC;
    signal img_doublethres_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_doublethres_data_empty_n : STD_LOGIC;
    signal count_strm_V_V_full_n : STD_LOGIC;
    signal count_strm_V_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal count_strm_V_V_empty_n : STD_LOGIC;
    signal res_strm_V_full_n : STD_LOGIC;
    signal res_strm_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal res_strm_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_color_detect_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_color_detect_entry3_U0_ap_ready : STD_LOGIC;
    signal color_detect_entry3_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_strm2mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_strm2mat_U0_ap_ready : STD_LOGIC;
    signal strm2mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";

    component color_detect_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H_thres : IN STD_LOGIC_VECTOR (15 downto 0);
        S_thres : IN STD_LOGIC_VECTOR (15 downto 0);
        V_thres : IN STD_LOGIC_VECTOR (15 downto 0);
        H_thres_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_thres_out_full_n : IN STD_LOGIC;
        H_thres_out_write : OUT STD_LOGIC;
        S_thres_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_thres_out_full_n : IN STD_LOGIC;
        S_thres_out_write : OUT STD_LOGIC;
        V_thres_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        V_thres_out_full_n : IN STD_LOGIC;
        V_thres_out_write : OUT STD_LOGIC );
    end component;


    component color_detect_entry13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_thres_empty_n : IN STD_LOGIC;
        H_thres_read : OUT STD_LOGIC;
        S_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        S_thres_empty_n : IN STD_LOGIC;
        S_thres_read : OUT STD_LOGIC;
        V_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        V_thres_empty_n : IN STD_LOGIC;
        V_thres_read : OUT STD_LOGIC;
        H_thres_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_thres_out_full_n : IN STD_LOGIC;
        H_thres_out_write : OUT STD_LOGIC;
        S_thres_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_thres_out_full_n : IN STD_LOGIC;
        S_thres_out_write : OUT STD_LOGIC;
        V_thres_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        V_thres_out_full_n : IN STD_LOGIC;
        V_thres_out_write : OUT STD_LOGIC );
    end component;


    component Block_codeRepl1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        V_thres_empty_n : IN STD_LOGIC;
        V_thres_read : OUT STD_LOGIC;
        S_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        S_thres_empty_n : IN STD_LOGIC;
        S_thres_read : OUT STD_LOGIC;
        H_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_thres_empty_n : IN STD_LOGIC;
        H_thres_read : OUT STD_LOGIC;
        V_thres_byval_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        V_thres_byval_out_full_n : IN STD_LOGIC;
        V_thres_byval_out_write : OUT STD_LOGIC;
        S_thres_byval_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_thres_byval_out_full_n : IN STD_LOGIC;
        S_thres_byval_out_write : OUT STD_LOGIC;
        H_thres_byval_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_thres_byval_out_full_n : IN STD_LOGIC;
        H_thres_byval_out_write : OUT STD_LOGIC );
    end component;


    component strm2mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        strm_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        strm_in_TVALID : IN STD_LOGIC;
        strm_in_TREADY : OUT STD_LOGIC;
        strm_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        strm_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        strm_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        strm_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        strm_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_src_data_stream_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_src_data_stream_2_full_n : IN STD_LOGIC;
        img_src_data_stream_2_write : OUT STD_LOGIC;
        img_src_data_stream_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_src_data_stream_1_full_n : IN STD_LOGIC;
        img_src_data_stream_1_write : OUT STD_LOGIC;
        img_src_data_stream_s_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_src_data_stream_s_full_n : IN STD_LOGIC;
        img_src_data_stream_s_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_src_data_stream_2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_src_data_stream_2_empty_n : IN STD_LOGIC;
        img_src_data_stream_2_read : OUT STD_LOGIC;
        img_src_data_stream_1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_src_data_stream_1_empty_n : IN STD_LOGIC;
        img_src_data_stream_1_read : OUT STD_LOGIC;
        img_src_data_stream_s_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_src_data_stream_s_empty_n : IN STD_LOGIC;
        img_src_data_stream_s_read : OUT STD_LOGIC;
        img_hsv_data_stream_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_hsv_data_stream_2_full_n : IN STD_LOGIC;
        img_hsv_data_stream_2_write : OUT STD_LOGIC;
        img_hsv_data_stream_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_hsv_data_stream_1_full_n : IN STD_LOGIC;
        img_hsv_data_stream_1_write : OUT STD_LOGIC;
        img_hsv_data_stream_s_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_hsv_data_stream_s_full_n : IN STD_LOGIC;
        img_hsv_data_stream_s_write : OUT STD_LOGIC );
    end component;


    component doublethres IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_thres_empty_n : IN STD_LOGIC;
        H_thres_read : OUT STD_LOGIC;
        S_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        S_thres_empty_n : IN STD_LOGIC;
        S_thres_read : OUT STD_LOGIC;
        V_thres_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        V_thres_empty_n : IN STD_LOGIC;
        V_thres_read : OUT STD_LOGIC;
        img_doublethres_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_doublethres_data_full_n : IN STD_LOGIC;
        img_doublethres_data_write : OUT STD_LOGIC;
        img_hsv_data_stream_2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_hsv_data_stream_2_empty_n : IN STD_LOGIC;
        img_hsv_data_stream_2_read : OUT STD_LOGIC;
        img_hsv_data_stream_1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_hsv_data_stream_1_empty_n : IN STD_LOGIC;
        img_hsv_data_stream_1_read : OUT STD_LOGIC;
        img_hsv_data_stream_s_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_hsv_data_stream_s_empty_n : IN STD_LOGIC;
        img_hsv_data_stream_s_read : OUT STD_LOGIC );
    end component;


    component count_720u_1280u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_doublethres_data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_doublethres_data_empty_n : IN STD_LOGIC;
        img_doublethres_data_read : OUT STD_LOGIC;
        count_strm_V_V_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        count_strm_V_V_full_n : IN STD_LOGIC;
        count_strm_V_V_write : OUT STD_LOGIC );
    end component;


    component findMaxRegion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        count_strm_V_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        count_strm_V_V_empty_n : IN STD_LOGIC;
        count_strm_V_V_read : OUT STD_LOGIC;
        res_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_strm_V_full_n : IN STD_LOGIC;
        res_strm_V_write : OUT STD_LOGIC );
    end component;


    component Block_codeRepl17_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res : OUT STD_LOGIC_VECTOR (127 downto 0);
        res_ap_vld : OUT STD_LOGIC;
        res_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        res_strm_V_empty_n : IN STD_LOGIC;
        res_strm_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w12_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component color_detect_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        H_thres : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_thres : OUT STD_LOGIC_VECTOR (15 downto 0);
        V_thres : OUT STD_LOGIC_VECTOR (15 downto 0);
        res : IN STD_LOGIC_VECTOR (127 downto 0);
        res_ap_vld : IN STD_LOGIC );
    end component;



begin
    color_detect_AXILiteS_s_axi_U : component color_detect_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        H_thres => H_thres,
        S_thres => S_thres,
        V_thres => V_thres,
        res => Block_codeRepl17_pro_U0_res,
        res_ap_vld => Block_codeRepl17_pro_U0_res_ap_vld);

    color_detect_entry3_U0 : component color_detect_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => color_detect_entry3_U0_ap_start,
        ap_done => color_detect_entry3_U0_ap_done,
        ap_continue => color_detect_entry3_U0_ap_continue,
        ap_idle => color_detect_entry3_U0_ap_idle,
        ap_ready => color_detect_entry3_U0_ap_ready,
        H_thres => H_thres,
        S_thres => S_thres,
        V_thres => V_thres,
        H_thres_out_din => color_detect_entry3_U0_H_thres_out_din,
        H_thres_out_full_n => H_thres_c1_full_n,
        H_thres_out_write => color_detect_entry3_U0_H_thres_out_write,
        S_thres_out_din => color_detect_entry3_U0_S_thres_out_din,
        S_thres_out_full_n => S_thres_c2_full_n,
        S_thres_out_write => color_detect_entry3_U0_S_thres_out_write,
        V_thres_out_din => color_detect_entry3_U0_V_thres_out_din,
        V_thres_out_full_n => V_thres_c3_full_n,
        V_thres_out_write => color_detect_entry3_U0_V_thres_out_write);

    color_detect_entry13_U0 : component color_detect_entry13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => color_detect_entry13_U0_ap_start,
        ap_done => color_detect_entry13_U0_ap_done,
        ap_continue => color_detect_entry13_U0_ap_continue,
        ap_idle => color_detect_entry13_U0_ap_idle,
        ap_ready => color_detect_entry13_U0_ap_ready,
        H_thres_dout => H_thres_c1_dout,
        H_thres_empty_n => H_thres_c1_empty_n,
        H_thres_read => color_detect_entry13_U0_H_thres_read,
        S_thres_dout => S_thres_c2_dout,
        S_thres_empty_n => S_thres_c2_empty_n,
        S_thres_read => color_detect_entry13_U0_S_thres_read,
        V_thres_dout => V_thres_c3_dout,
        V_thres_empty_n => V_thres_c3_empty_n,
        V_thres_read => color_detect_entry13_U0_V_thres_read,
        H_thres_out_din => color_detect_entry13_U0_H_thres_out_din,
        H_thres_out_full_n => H_thres_c_full_n,
        H_thres_out_write => color_detect_entry13_U0_H_thres_out_write,
        S_thres_out_din => color_detect_entry13_U0_S_thres_out_din,
        S_thres_out_full_n => S_thres_c_full_n,
        S_thres_out_write => color_detect_entry13_U0_S_thres_out_write,
        V_thres_out_din => color_detect_entry13_U0_V_thres_out_din,
        V_thres_out_full_n => V_thres_c_full_n,
        V_thres_out_write => color_detect_entry13_U0_V_thres_out_write);

    Block_codeRepl1_proc_U0 : component Block_codeRepl1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_codeRepl1_proc_U0_ap_start,
        ap_done => Block_codeRepl1_proc_U0_ap_done,
        ap_continue => Block_codeRepl1_proc_U0_ap_continue,
        ap_idle => Block_codeRepl1_proc_U0_ap_idle,
        ap_ready => Block_codeRepl1_proc_U0_ap_ready,
        V_thres_dout => V_thres_c_dout,
        V_thres_empty_n => V_thres_c_empty_n,
        V_thres_read => Block_codeRepl1_proc_U0_V_thres_read,
        S_thres_dout => S_thres_c_dout,
        S_thres_empty_n => S_thres_c_empty_n,
        S_thres_read => Block_codeRepl1_proc_U0_S_thres_read,
        H_thres_dout => H_thres_c_dout,
        H_thres_empty_n => H_thres_c_empty_n,
        H_thres_read => Block_codeRepl1_proc_U0_H_thres_read,
        V_thres_byval_out_din => Block_codeRepl1_proc_U0_V_thres_byval_out_din,
        V_thres_byval_out_full_n => V_thres_byval_c_full_n,
        V_thres_byval_out_write => Block_codeRepl1_proc_U0_V_thres_byval_out_write,
        S_thres_byval_out_din => Block_codeRepl1_proc_U0_S_thres_byval_out_din,
        S_thres_byval_out_full_n => S_thres_byval_c_full_n,
        S_thres_byval_out_write => Block_codeRepl1_proc_U0_S_thres_byval_out_write,
        H_thres_byval_out_din => Block_codeRepl1_proc_U0_H_thres_byval_out_din,
        H_thres_byval_out_full_n => H_thres_byval_c_full_n,
        H_thres_byval_out_write => Block_codeRepl1_proc_U0_H_thres_byval_out_write);

    strm2mat_U0 : component strm2mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => strm2mat_U0_ap_start,
        ap_done => strm2mat_U0_ap_done,
        ap_continue => strm2mat_U0_ap_continue,
        ap_idle => strm2mat_U0_ap_idle,
        ap_ready => strm2mat_U0_ap_ready,
        strm_in_TDATA => strm_in_TDATA,
        strm_in_TVALID => strm_in_TVALID,
        strm_in_TREADY => strm2mat_U0_strm_in_TREADY,
        strm_in_TKEEP => strm_in_TKEEP,
        strm_in_TSTRB => strm_in_TSTRB,
        strm_in_TUSER => strm_in_TUSER,
        strm_in_TLAST => strm_in_TLAST,
        strm_in_TID => strm_in_TID,
        strm_in_TDEST => strm_in_TDEST,
        img_src_data_stream_2_din => strm2mat_U0_img_src_data_stream_2_din,
        img_src_data_stream_2_full_n => img_src_data_stream_2_full_n,
        img_src_data_stream_2_write => strm2mat_U0_img_src_data_stream_2_write,
        img_src_data_stream_1_din => strm2mat_U0_img_src_data_stream_1_din,
        img_src_data_stream_1_full_n => img_src_data_stream_1_full_n,
        img_src_data_stream_1_write => strm2mat_U0_img_src_data_stream_1_write,
        img_src_data_stream_s_din => strm2mat_U0_img_src_data_stream_s_din,
        img_src_data_stream_s_full_n => img_src_data_stream_s_full_n,
        img_src_data_stream_s_write => strm2mat_U0_img_src_data_stream_s_write);

    CvtColor_U0 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_U0_ap_start,
        ap_done => CvtColor_U0_ap_done,
        ap_continue => CvtColor_U0_ap_continue,
        ap_idle => CvtColor_U0_ap_idle,
        ap_ready => CvtColor_U0_ap_ready,
        img_src_data_stream_2_dout => img_src_data_stream_2_dout,
        img_src_data_stream_2_empty_n => img_src_data_stream_2_empty_n,
        img_src_data_stream_2_read => CvtColor_U0_img_src_data_stream_2_read,
        img_src_data_stream_1_dout => img_src_data_stream_1_dout,
        img_src_data_stream_1_empty_n => img_src_data_stream_1_empty_n,
        img_src_data_stream_1_read => CvtColor_U0_img_src_data_stream_1_read,
        img_src_data_stream_s_dout => img_src_data_stream_s_dout,
        img_src_data_stream_s_empty_n => img_src_data_stream_s_empty_n,
        img_src_data_stream_s_read => CvtColor_U0_img_src_data_stream_s_read,
        img_hsv_data_stream_2_din => CvtColor_U0_img_hsv_data_stream_2_din,
        img_hsv_data_stream_2_full_n => img_hsv_data_stream_2_full_n,
        img_hsv_data_stream_2_write => CvtColor_U0_img_hsv_data_stream_2_write,
        img_hsv_data_stream_1_din => CvtColor_U0_img_hsv_data_stream_1_din,
        img_hsv_data_stream_1_full_n => img_hsv_data_stream_1_full_n,
        img_hsv_data_stream_1_write => CvtColor_U0_img_hsv_data_stream_1_write,
        img_hsv_data_stream_s_din => CvtColor_U0_img_hsv_data_stream_s_din,
        img_hsv_data_stream_s_full_n => img_hsv_data_stream_s_full_n,
        img_hsv_data_stream_s_write => CvtColor_U0_img_hsv_data_stream_s_write);

    doublethres_U0 : component doublethres
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => doublethres_U0_ap_start,
        ap_done => doublethres_U0_ap_done,
        ap_continue => doublethres_U0_ap_continue,
        ap_idle => doublethres_U0_ap_idle,
        ap_ready => doublethres_U0_ap_ready,
        H_thres_dout => H_thres_byval_c_dout,
        H_thres_empty_n => H_thres_byval_c_empty_n,
        H_thres_read => doublethres_U0_H_thres_read,
        S_thres_dout => S_thres_byval_c_dout,
        S_thres_empty_n => S_thres_byval_c_empty_n,
        S_thres_read => doublethres_U0_S_thres_read,
        V_thres_dout => V_thres_byval_c_dout,
        V_thres_empty_n => V_thres_byval_c_empty_n,
        V_thres_read => doublethres_U0_V_thres_read,
        img_doublethres_data_din => doublethres_U0_img_doublethres_data_din,
        img_doublethres_data_full_n => img_doublethres_data_full_n,
        img_doublethres_data_write => doublethres_U0_img_doublethres_data_write,
        img_hsv_data_stream_2_dout => img_hsv_data_stream_2_dout,
        img_hsv_data_stream_2_empty_n => img_hsv_data_stream_2_empty_n,
        img_hsv_data_stream_2_read => doublethres_U0_img_hsv_data_stream_2_read,
        img_hsv_data_stream_1_dout => img_hsv_data_stream_1_dout,
        img_hsv_data_stream_1_empty_n => img_hsv_data_stream_1_empty_n,
        img_hsv_data_stream_1_read => doublethres_U0_img_hsv_data_stream_1_read,
        img_hsv_data_stream_s_dout => img_hsv_data_stream_s_dout,
        img_hsv_data_stream_s_empty_n => img_hsv_data_stream_s_empty_n,
        img_hsv_data_stream_s_read => doublethres_U0_img_hsv_data_stream_s_read);

    count_720u_1280u_U0 : component count_720u_1280u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => count_720u_1280u_U0_ap_start,
        ap_done => count_720u_1280u_U0_ap_done,
        ap_continue => count_720u_1280u_U0_ap_continue,
        ap_idle => count_720u_1280u_U0_ap_idle,
        ap_ready => count_720u_1280u_U0_ap_ready,
        img_doublethres_data_dout => img_doublethres_data_dout,
        img_doublethres_data_empty_n => img_doublethres_data_empty_n,
        img_doublethres_data_read => count_720u_1280u_U0_img_doublethres_data_read,
        count_strm_V_V_din => count_720u_1280u_U0_count_strm_V_V_din,
        count_strm_V_V_full_n => count_strm_V_V_full_n,
        count_strm_V_V_write => count_720u_1280u_U0_count_strm_V_V_write);

    findMaxRegion_U0 : component findMaxRegion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => findMaxRegion_U0_ap_start,
        ap_done => findMaxRegion_U0_ap_done,
        ap_continue => findMaxRegion_U0_ap_continue,
        ap_idle => findMaxRegion_U0_ap_idle,
        ap_ready => findMaxRegion_U0_ap_ready,
        count_strm_V_V_dout => count_strm_V_V_dout,
        count_strm_V_V_empty_n => count_strm_V_V_empty_n,
        count_strm_V_V_read => findMaxRegion_U0_count_strm_V_V_read,
        res_strm_V_din => findMaxRegion_U0_res_strm_V_din,
        res_strm_V_full_n => res_strm_V_full_n,
        res_strm_V_write => findMaxRegion_U0_res_strm_V_write);

    Block_codeRepl17_pro_U0 : component Block_codeRepl17_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_codeRepl17_pro_U0_ap_start,
        ap_done => Block_codeRepl17_pro_U0_ap_done,
        ap_continue => Block_codeRepl17_pro_U0_ap_continue,
        ap_idle => Block_codeRepl17_pro_U0_ap_idle,
        ap_ready => Block_codeRepl17_pro_U0_ap_ready,
        res => Block_codeRepl17_pro_U0_res,
        res_ap_vld => Block_codeRepl17_pro_U0_res_ap_vld,
        res_strm_V_dout => res_strm_V_dout,
        res_strm_V_empty_n => res_strm_V_empty_n,
        res_strm_V_read => Block_codeRepl17_pro_U0_res_strm_V_read);

    H_thres_c1_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => color_detect_entry3_U0_H_thres_out_din,
        if_full_n => H_thres_c1_full_n,
        if_write => color_detect_entry3_U0_H_thres_out_write,
        if_dout => H_thres_c1_dout,
        if_empty_n => H_thres_c1_empty_n,
        if_read => color_detect_entry13_U0_H_thres_read);

    S_thres_c2_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => color_detect_entry3_U0_S_thres_out_din,
        if_full_n => S_thres_c2_full_n,
        if_write => color_detect_entry3_U0_S_thres_out_write,
        if_dout => S_thres_c2_dout,
        if_empty_n => S_thres_c2_empty_n,
        if_read => color_detect_entry13_U0_S_thres_read);

    V_thres_c3_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => color_detect_entry3_U0_V_thres_out_din,
        if_full_n => V_thres_c3_full_n,
        if_write => color_detect_entry3_U0_V_thres_out_write,
        if_dout => V_thres_c3_dout,
        if_empty_n => V_thres_c3_empty_n,
        if_read => color_detect_entry13_U0_V_thres_read);

    H_thres_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => color_detect_entry13_U0_H_thres_out_din,
        if_full_n => H_thres_c_full_n,
        if_write => color_detect_entry13_U0_H_thres_out_write,
        if_dout => H_thres_c_dout,
        if_empty_n => H_thres_c_empty_n,
        if_read => Block_codeRepl1_proc_U0_H_thres_read);

    S_thres_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => color_detect_entry13_U0_S_thres_out_din,
        if_full_n => S_thres_c_full_n,
        if_write => color_detect_entry13_U0_S_thres_out_write,
        if_dout => S_thres_c_dout,
        if_empty_n => S_thres_c_empty_n,
        if_read => Block_codeRepl1_proc_U0_S_thres_read);

    V_thres_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => color_detect_entry13_U0_V_thres_out_din,
        if_full_n => V_thres_c_full_n,
        if_write => color_detect_entry13_U0_V_thres_out_write,
        if_dout => V_thres_c_dout,
        if_empty_n => V_thres_c_empty_n,
        if_read => Block_codeRepl1_proc_U0_V_thres_read);

    V_thres_byval_c_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl1_proc_U0_V_thres_byval_out_din,
        if_full_n => V_thres_byval_c_full_n,
        if_write => Block_codeRepl1_proc_U0_V_thres_byval_out_write,
        if_dout => V_thres_byval_c_dout,
        if_empty_n => V_thres_byval_c_empty_n,
        if_read => doublethres_U0_V_thres_read);

    S_thres_byval_c_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl1_proc_U0_S_thres_byval_out_din,
        if_full_n => S_thres_byval_c_full_n,
        if_write => Block_codeRepl1_proc_U0_S_thres_byval_out_write,
        if_dout => S_thres_byval_c_dout,
        if_empty_n => S_thres_byval_c_empty_n,
        if_read => doublethres_U0_S_thres_read);

    H_thres_byval_c_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl1_proc_U0_H_thres_byval_out_din,
        if_full_n => H_thres_byval_c_full_n,
        if_write => Block_codeRepl1_proc_U0_H_thres_byval_out_write,
        if_dout => H_thres_byval_c_dout,
        if_empty_n => H_thres_byval_c_empty_n,
        if_read => doublethres_U0_H_thres_read);

    img_src_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => strm2mat_U0_img_src_data_stream_2_din,
        if_full_n => img_src_data_stream_2_full_n,
        if_write => strm2mat_U0_img_src_data_stream_2_write,
        if_dout => img_src_data_stream_2_dout,
        if_empty_n => img_src_data_stream_2_empty_n,
        if_read => CvtColor_U0_img_src_data_stream_2_read);

    img_src_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => strm2mat_U0_img_src_data_stream_1_din,
        if_full_n => img_src_data_stream_1_full_n,
        if_write => strm2mat_U0_img_src_data_stream_1_write,
        if_dout => img_src_data_stream_1_dout,
        if_empty_n => img_src_data_stream_1_empty_n,
        if_read => CvtColor_U0_img_src_data_stream_1_read);

    img_src_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => strm2mat_U0_img_src_data_stream_s_din,
        if_full_n => img_src_data_stream_s_full_n,
        if_write => strm2mat_U0_img_src_data_stream_s_write,
        if_dout => img_src_data_stream_s_dout,
        if_empty_n => img_src_data_stream_s_empty_n,
        if_read => CvtColor_U0_img_src_data_stream_s_read);

    img_hsv_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_img_hsv_data_stream_2_din,
        if_full_n => img_hsv_data_stream_2_full_n,
        if_write => CvtColor_U0_img_hsv_data_stream_2_write,
        if_dout => img_hsv_data_stream_2_dout,
        if_empty_n => img_hsv_data_stream_2_empty_n,
        if_read => doublethres_U0_img_hsv_data_stream_2_read);

    img_hsv_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_img_hsv_data_stream_1_din,
        if_full_n => img_hsv_data_stream_1_full_n,
        if_write => CvtColor_U0_img_hsv_data_stream_1_write,
        if_dout => img_hsv_data_stream_1_dout,
        if_empty_n => img_hsv_data_stream_1_empty_n,
        if_read => doublethres_U0_img_hsv_data_stream_1_read);

    img_hsv_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_img_hsv_data_stream_s_din,
        if_full_n => img_hsv_data_stream_s_full_n,
        if_write => CvtColor_U0_img_hsv_data_stream_s_write,
        if_dout => img_hsv_data_stream_s_dout,
        if_empty_n => img_hsv_data_stream_s_empty_n,
        if_read => doublethres_U0_img_hsv_data_stream_s_read);

    img_doublethres_data_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => doublethres_U0_img_doublethres_data_din,
        if_full_n => img_doublethres_data_full_n,
        if_write => doublethres_U0_img_doublethres_data_write,
        if_dout => img_doublethres_data_dout,
        if_empty_n => img_doublethres_data_empty_n,
        if_read => count_720u_1280u_U0_img_doublethres_data_read);

    count_strm_V_V_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => count_720u_1280u_U0_count_strm_V_V_din,
        if_full_n => count_strm_V_V_full_n,
        if_write => count_720u_1280u_U0_count_strm_V_V_write,
        if_dout => count_strm_V_V_dout,
        if_empty_n => count_strm_V_V_empty_n,
        if_read => findMaxRegion_U0_count_strm_V_V_read);

    res_strm_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => findMaxRegion_U0_res_strm_V_din,
        if_full_n => res_strm_V_full_n,
        if_write => findMaxRegion_U0_res_strm_V_write,
        if_dout => res_strm_V_dout,
        if_empty_n => res_strm_V_empty_n,
        if_read => Block_codeRepl17_pro_U0_res_strm_V_read);





    ap_sync_reg_Block_codeRepl17_pro_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_codeRepl17_pro_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_Block_codeRepl17_pro_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_codeRepl1_proc_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_codeRepl1_proc_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_Block_codeRepl1_proc_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_CvtColor_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_CvtColor_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_CvtColor_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_color_detect_entry13_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_color_detect_entry13_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_color_detect_entry13_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_color_detect_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_color_detect_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_color_detect_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_color_detect_entry3_U0_ap_ready <= ap_sync_color_detect_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_count_720u_1280u_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_count_720u_1280u_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_count_720u_1280u_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_doublethres_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_doublethres_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_doublethres_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_findMaxRegion_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_findMaxRegion_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_findMaxRegion_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_strm2mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_strm2mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_strm2mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_strm2mat_U0_ap_ready <= ap_sync_strm2mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    color_detect_entry3_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((color_detect_entry3_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                color_detect_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(color_detect_entry3_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((color_detect_entry3_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                color_detect_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(color_detect_entry3_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    strm2mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (strm2mat_U0_ap_ready = ap_const_logic_0))) then 
                strm2mat_U0_ap_ready_count <= std_logic_vector(unsigned(strm2mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((strm2mat_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                strm2mat_U0_ap_ready_count <= std_logic_vector(unsigned(strm2mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_codeRepl17_pro_U0_ap_continue <= ap_const_logic_1;
    Block_codeRepl17_pro_U0_ap_start <= (ap_sync_reg_Block_codeRepl17_pro_U0_ap_start or ap_start);
    Block_codeRepl1_proc_U0_ap_continue <= ap_const_logic_1;
    Block_codeRepl1_proc_U0_ap_start <= (ap_sync_reg_Block_codeRepl1_proc_U0_ap_start or ap_start);
    CvtColor_U0_ap_continue <= ap_const_logic_1;
    CvtColor_U0_ap_start <= (ap_sync_reg_CvtColor_U0_ap_start or ap_start);
    ap_done <= Block_codeRepl17_pro_U0_ap_done;
    ap_idle <= (strm2mat_U0_ap_idle and findMaxRegion_U0_ap_idle and doublethres_U0_ap_idle and count_720u_1280u_U0_ap_idle and color_detect_entry3_U0_ap_idle and color_detect_entry13_U0_ap_idle and CvtColor_U0_ap_idle and Block_codeRepl1_proc_U0_ap_idle and Block_codeRepl17_pro_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_color_detect_entry3_U0_ap_ready <= (color_detect_entry3_U0_ap_ready or ap_sync_reg_color_detect_entry3_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Block_codeRepl17_pro_U0_ap_done;
    ap_sync_ready <= (ap_sync_strm2mat_U0_ap_ready and ap_sync_color_detect_entry3_U0_ap_ready);
    ap_sync_strm2mat_U0_ap_ready <= (strm2mat_U0_ap_ready or ap_sync_reg_strm2mat_U0_ap_ready);
    color_detect_entry13_U0_ap_continue <= ap_const_logic_1;
    color_detect_entry13_U0_ap_start <= (ap_sync_reg_color_detect_entry13_U0_ap_start or ap_start);
    color_detect_entry3_U0_ap_continue <= ap_const_logic_1;
    color_detect_entry3_U0_ap_start <= ((ap_sync_reg_color_detect_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    count_720u_1280u_U0_ap_continue <= ap_const_logic_1;
    count_720u_1280u_U0_ap_start <= (ap_sync_reg_count_720u_1280u_U0_ap_start or ap_start);
    doublethres_U0_ap_continue <= ap_const_logic_1;
    doublethres_U0_ap_start <= (ap_sync_reg_doublethres_U0_ap_start or ap_start);
    findMaxRegion_U0_ap_continue <= ap_const_logic_1;
    findMaxRegion_U0_ap_start <= (ap_sync_reg_findMaxRegion_U0_ap_start or ap_start);
    strm2mat_U0_ap_continue <= ap_const_logic_1;
    strm2mat_U0_ap_start <= ((ap_sync_reg_strm2mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    strm_in_TREADY <= strm2mat_U0_strm_in_TREADY;
end behav;
