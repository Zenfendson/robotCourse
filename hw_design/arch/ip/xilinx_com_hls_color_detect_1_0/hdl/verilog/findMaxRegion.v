// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findMaxRegion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        count_strm_V_V_dout,
        count_strm_V_V_empty_n,
        count_strm_V_V_read,
        res_strm_V_din,
        res_strm_V_full_n,
        res_strm_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state7 = 7'd4;
parameter    ap_ST_fsm_state8 = 7'd8;
parameter    ap_ST_fsm_state9 = 7'd16;
parameter    ap_ST_fsm_state10 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] count_strm_V_V_dout;
input   count_strm_V_V_empty_n;
output   count_strm_V_V_read;
output  [31:0] res_strm_V_din;
input   res_strm_V_full_n;
output   res_strm_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg count_strm_V_V_read;
reg[31:0] res_strm_V_din;
reg res_strm_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    count_strm_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    res_strm_V_blk_n;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [10:0] i_i_reg_151;
reg   [10:0] i_i_reg_151_pp0_iter1_reg;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [10:0] i_i_reg_151_pp0_iter2_reg;
reg   [10:0] i_i_reg_151_pp0_iter3_reg;
wire   [0:0] tmp_i_fu_245_p2;
reg   [0:0] tmp_i_reg_768;
wire   [10:0] i_fu_251_p2;
reg   [10:0] i_reg_772;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_37_i_fu_257_p2;
reg   [0:0] tmp_37_i_reg_777;
reg   [0:0] tmp_37_i_reg_777_pp0_iter2_reg;
reg   [0:0] tmp_37_i_reg_777_pp0_iter3_reg;
reg   [11:0] tmp_V_reg_781;
wire   [0:0] isInValidRegionX_fu_263_p2;
reg   [0:0] isInValidRegionX_reg_787;
reg   [0:0] isInValidRegionX_reg_787_pp0_iter2_reg;
reg   [0:0] isInValidRegionX_reg_787_pp0_iter3_reg;
wire   [0:0] tmp_44_i_fu_272_p2;
reg   [0:0] tmp_44_i_reg_799;
reg   [0:0] tmp_44_i_reg_799_pp0_iter2_reg;
reg   [0:0] tmp_44_i_reg_799_pp0_iter3_reg;
wire   [0:0] tmp_38_i_fu_286_p2;
reg   [0:0] tmp_38_i_reg_805;
reg   [0:0] tmp_38_i_reg_805_pp0_iter2_reg;
reg   [0:0] tmp_38_i_reg_805_pp0_iter3_reg;
wire   [0:0] meetHighBoarderY_fu_321_p2;
reg   [0:0] meetHighBoarderY_reg_811;
reg   [0:0] meetHighBoarderY_reg_811_pp0_iter3_reg;
wire   [31:0] maxValSumY_fu_341_p3;
reg   [31:0] maxValSumY_reg_817;
wire   [0:0] meetHighBoarderX_fu_378_p2;
reg   [0:0] meetHighBoarderX_reg_823;
reg   [0:0] meetHighBoarderX_reg_823_pp0_iter3_reg;
wire   [31:0] maxValSumX_fu_398_p3;
reg   [31:0] maxValSumX_reg_829;
wire   [0:0] tmp_46_i_fu_418_p2;
reg   [0:0] tmp_46_i_reg_835;
wire   [11:0] tmp_50_i_fu_424_p2;
reg   [11:0] tmp_50_i_reg_840;
wire   [0:0] or_cond5_i_fu_435_p2;
reg   [0:0] or_cond5_i_reg_845;
wire   [0:0] tmp_45_i_fu_455_p2;
reg   [0:0] tmp_45_i_reg_851;
wire   [0:0] or_cond4_i_fu_466_p2;
reg   [0:0] or_cond4_i_reg_856;
wire   [31:0] widthX_fu_618_p2;
reg   [31:0] widthX_reg_862;
wire    ap_CS_fsm_state7;
reg   [30:0] centerX_reg_867;
wire   [31:0] widthY_fu_644_p2;
reg   [31:0] widthY_reg_872;
reg   [30:0] centerY_reg_877;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [10:0] ap_phi_mux_i_i_phi_fu_155_p4;
wire   [31:0] centerX_2_fu_640_p1;
wire   [31:0] centerY_2_fu_666_p1;
reg   [31:0] maxValSumY_2_fu_82;
wire   [31:0] maxValSumY_1_fu_440_p3;
reg   [31:0] maxPosHighY_fu_86;
wire   [31:0] maxPosHighY_1_fu_527_p3;
reg   [31:0] maxPosLowY_fu_90;
wire   [31:0] maxPosLowY_1_fu_520_p3;
reg   [31:0] i_op_assign_1_fu_94;
reg   [31:0] maxPosHighY_2_fu_98;
wire   [31:0] curPosHighY_fu_513_p3;
reg   [31:0] maxPosLowY_2_fu_102;
wire   [31:0] curPosLowY_fu_505_p3;
reg   [31:0] maxValSumX_2_fu_106;
wire   [31:0] maxValSumX_1_fu_471_p3;
reg   [31:0] maxPosHighX_fu_110;
wire   [31:0] maxPosHighX_1_fu_591_p3;
reg   [31:0] maxPosLowX_fu_114;
wire   [31:0] maxPosLowX_1_fu_584_p3;
reg   [31:0] i_op_assign_fu_118;
reg   [31:0] maxPosHighX_2_fu_122;
wire   [31:0] curPosHighX_fu_577_p3;
reg   [31:0] maxPosLowX_2_fu_126;
wire   [31:0] curPosLowX_fu_569_p3;
reg   [11:0] val_curY_V_fu_130;
reg   [11:0] val_curY_V_1_fu_134;
wire   [0:0] tmp_49_i_fu_304_p2;
wire   [0:0] or_cond3_i_fu_300_p2;
wire   [0:0] p_3_i_fu_310_p2;
wire   [0:0] not_or_cond3_i_fu_315_p2;
wire   [31:0] tmp_54_i_fu_332_p1;
wire   [0:0] tmp_51_i_fu_327_p2;
wire   [31:0] curValSumY_fu_335_p2;
wire   [0:0] tmp_47_i_fu_361_p2;
wire   [0:0] or_cond2_i_fu_357_p2;
wire   [0:0] p_2_i_fu_367_p2;
wire   [0:0] not_or_cond2_i_fu_372_p2;
wire   [31:0] tmp_52_i_fu_389_p1;
wire   [0:0] tmp_48_i_fu_384_p2;
wire   [31:0] curValSumX_fu_392_p2;
wire   [11:0] i_cast_i_fu_411_p1;
wire   [0:0] tmp_55_i_fu_430_p2;
wire   [0:0] tmp_53_i_fu_461_p2;
wire   [0:0] p_1_i2_fu_493_p2;
wire   [0:0] meetLowBoarderY_fu_497_p2;
wire   [31:0] tmp_50_cast_i_fu_502_p1;
wire   [0:0] p_i3_fu_560_p2;
wire   [0:0] meetLowBoarderX_fu_564_p2;
wire   [31:0] i_cast7_i_fu_483_p1;
wire   [31:0] tmp_i_20_fu_624_p2;
wire   [31:0] tmp_36_i_fu_650_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_reg_768 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_reg_151 <= i_reg_772;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_151 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_37_i_reg_777 == 1'd0))) begin
        i_op_assign_1_fu_94 <= maxValSumY_fu_341_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_op_assign_1_fu_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_37_i_reg_777 == 1'd1))) begin
        i_op_assign_fu_118 <= maxValSumX_fu_398_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_op_assign_fu_118 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd1))) begin
        maxPosHighX_2_fu_122 <= curPosHighX_fu_577_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosHighX_2_fu_122 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd1))) begin
        maxPosHighX_fu_110 <= maxPosHighX_1_fu_591_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosHighX_fu_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd0))) begin
        maxPosHighY_2_fu_98 <= curPosHighY_fu_513_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosHighY_2_fu_98 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd0))) begin
        maxPosHighY_fu_86 <= maxPosHighY_1_fu_527_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosHighY_fu_86 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd1))) begin
        maxPosLowX_2_fu_126 <= curPosLowX_fu_569_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosLowX_2_fu_126 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd1))) begin
        maxPosLowX_fu_114 <= maxPosLowX_1_fu_584_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosLowX_fu_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd0))) begin
        maxPosLowY_2_fu_102 <= curPosLowY_fu_505_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosLowY_2_fu_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (tmp_37_i_reg_777_pp0_iter3_reg == 1'd0))) begin
        maxPosLowY_fu_90 <= maxPosLowY_1_fu_520_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxPosLowY_fu_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_37_i_reg_777_pp0_iter2_reg == 1'd1))) begin
        maxValSumX_2_fu_106 <= maxValSumX_1_fu_471_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxValSumX_2_fu_106 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_37_i_reg_777_pp0_iter2_reg == 1'd0))) begin
        maxValSumY_2_fu_82 <= maxValSumY_1_fu_440_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxValSumY_2_fu_82 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_37_i_fu_257_p2 == 1'd1))) begin
        val_curY_V_1_fu_134 <= count_strm_V_V_dout;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_curY_V_1_fu_134 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_37_i_fu_257_p2 == 1'd0))) begin
        val_curY_V_fu_130 <= count_strm_V_V_dout;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_curY_V_fu_130 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        centerX_reg_867 <= {{tmp_i_20_fu_624_p2[31:1]}};
        widthX_reg_862 <= widthX_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        centerY_reg_877 <= {{tmp_36_i_fu_650_p2[31:1]}};
        widthY_reg_872 <= widthY_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_reg_151_pp0_iter1_reg <= i_i_reg_151;
        isInValidRegionX_reg_787 <= isInValidRegionX_fu_263_p2;
        tmp_37_i_reg_777 <= tmp_37_i_fu_257_p2;
        tmp_V_reg_781 <= count_strm_V_V_dout;
        tmp_i_reg_768 <= tmp_i_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_i_reg_151_pp0_iter2_reg <= i_i_reg_151_pp0_iter1_reg;
        i_i_reg_151_pp0_iter3_reg <= i_i_reg_151_pp0_iter2_reg;
        isInValidRegionX_reg_787_pp0_iter2_reg <= isInValidRegionX_reg_787;
        isInValidRegionX_reg_787_pp0_iter3_reg <= isInValidRegionX_reg_787_pp0_iter2_reg;
        meetHighBoarderX_reg_823_pp0_iter3_reg <= meetHighBoarderX_reg_823;
        meetHighBoarderY_reg_811_pp0_iter3_reg <= meetHighBoarderY_reg_811;
        tmp_37_i_reg_777_pp0_iter2_reg <= tmp_37_i_reg_777;
        tmp_37_i_reg_777_pp0_iter3_reg <= tmp_37_i_reg_777_pp0_iter2_reg;
        tmp_38_i_reg_805_pp0_iter2_reg <= tmp_38_i_reg_805;
        tmp_38_i_reg_805_pp0_iter3_reg <= tmp_38_i_reg_805_pp0_iter2_reg;
        tmp_44_i_reg_799_pp0_iter2_reg <= tmp_44_i_reg_799;
        tmp_44_i_reg_799_pp0_iter3_reg <= tmp_44_i_reg_799_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_772 <= i_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_37_i_reg_777 == 1'd1))) begin
        maxValSumX_reg_829 <= maxValSumX_fu_398_p3;
        meetHighBoarderX_reg_823 <= meetHighBoarderX_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_37_i_reg_777 == 1'd0))) begin
        maxValSumY_reg_817 <= maxValSumY_fu_341_p3;
        meetHighBoarderY_reg_811 <= meetHighBoarderY_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_37_i_reg_777_pp0_iter2_reg == 1'd1))) begin
        or_cond4_i_reg_856 <= or_cond4_i_fu_466_p2;
        tmp_45_i_reg_851 <= tmp_45_i_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_37_i_reg_777_pp0_iter2_reg == 1'd0))) begin
        or_cond5_i_reg_845 <= or_cond5_i_fu_435_p2;
        tmp_46_i_reg_835 <= tmp_46_i_fu_418_p2;
        tmp_50_i_reg_840 <= tmp_50_i_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_37_i_fu_257_p2 == 1'd1))) begin
        tmp_38_i_reg_805 <= tmp_38_i_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_37_i_fu_257_p2 == 1'd0))) begin
        tmp_44_i_reg_799 <= tmp_44_i_fu_272_p2;
    end
end

always @ (*) begin
    if ((tmp_i_fu_245_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_768 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_i_phi_fu_155_p4 = i_reg_772;
    end else begin
        ap_phi_mux_i_i_phi_fu_155_p4 = i_i_reg_151;
    end
end

always @ (*) begin
    if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_strm_V_V_blk_n = count_strm_V_V_empty_n;
    end else begin
        count_strm_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        count_strm_V_V_read = 1'b1;
    end else begin
        count_strm_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        res_strm_V_blk_n = res_strm_V_full_n;
    end else begin
        res_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((res_strm_V_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            res_strm_V_din = centerY_2_fu_666_p1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            res_strm_V_din = widthY_reg_872;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            res_strm_V_din = centerX_2_fu_640_p1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            res_strm_V_din = widthX_reg_862;
        end else begin
            res_strm_V_din = 'bx;
        end
    end else begin
        res_strm_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        res_strm_V_write = 1'b1;
    end else begin
        res_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_i_fu_245_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((tmp_i_fu_245_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((res_strm_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((count_strm_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((count_strm_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (count_strm_V_V_empty_n == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign centerX_2_fu_640_p1 = centerX_reg_867;

assign centerY_2_fu_666_p1 = centerY_reg_877;

assign curPosHighX_fu_577_p3 = ((meetHighBoarderX_reg_823_pp0_iter3_reg[0:0] === 1'b1) ? i_cast7_i_fu_483_p1 : maxPosHighX_2_fu_122);

assign curPosHighY_fu_513_p3 = ((meetHighBoarderY_reg_811_pp0_iter3_reg[0:0] === 1'b1) ? tmp_50_cast_i_fu_502_p1 : maxPosHighY_2_fu_98);

assign curPosLowX_fu_569_p3 = ((meetLowBoarderX_fu_564_p2[0:0] === 1'b1) ? i_cast7_i_fu_483_p1 : maxPosLowX_2_fu_126);

assign curPosLowY_fu_505_p3 = ((meetLowBoarderY_fu_497_p2[0:0] === 1'b1) ? tmp_50_cast_i_fu_502_p1 : maxPosLowY_2_fu_102);

assign curValSumX_fu_392_p2 = (i_op_assign_fu_118 + tmp_52_i_fu_389_p1);

assign curValSumY_fu_335_p2 = (i_op_assign_1_fu_94 + tmp_54_i_fu_332_p1);

assign i_cast7_i_fu_483_p1 = i_i_reg_151_pp0_iter3_reg;

assign i_cast_i_fu_411_p1 = i_i_reg_151_pp0_iter2_reg;

assign i_fu_251_p2 = (ap_phi_mux_i_i_phi_fu_155_p4 + 11'd1);

assign isInValidRegionX_fu_263_p2 = ((count_strm_V_V_dout != 12'd0) ? 1'b1 : 1'b0);

assign maxPosHighX_1_fu_591_p3 = ((or_cond4_i_reg_856[0:0] === 1'b1) ? curPosHighX_fu_577_p3 : maxPosHighX_fu_110);

assign maxPosHighY_1_fu_527_p3 = ((or_cond5_i_reg_845[0:0] === 1'b1) ? curPosHighY_fu_513_p3 : maxPosHighY_fu_86);

assign maxPosLowX_1_fu_584_p3 = ((or_cond4_i_reg_856[0:0] === 1'b1) ? curPosLowX_fu_569_p3 : maxPosLowX_fu_114);

assign maxPosLowY_1_fu_520_p3 = ((or_cond5_i_reg_845[0:0] === 1'b1) ? curPosLowY_fu_505_p3 : maxPosLowY_fu_90);

assign maxValSumX_1_fu_471_p3 = ((or_cond4_i_fu_466_p2[0:0] === 1'b1) ? maxValSumX_reg_829 : maxValSumX_2_fu_106);

assign maxValSumX_fu_398_p3 = ((tmp_48_i_fu_384_p2[0:0] === 1'b1) ? curValSumX_fu_392_p2 : 32'd0);

assign maxValSumY_1_fu_440_p3 = ((or_cond5_i_fu_435_p2[0:0] === 1'b1) ? maxValSumY_reg_817 : maxValSumY_2_fu_82);

assign maxValSumY_fu_341_p3 = ((tmp_51_i_fu_327_p2[0:0] === 1'b1) ? curValSumY_fu_335_p2 : 32'd0);

assign meetHighBoarderX_fu_378_p2 = (p_2_i_fu_367_p2 | not_or_cond2_i_fu_372_p2);

assign meetHighBoarderY_fu_321_p2 = (p_3_i_fu_310_p2 | not_or_cond3_i_fu_315_p2);

assign meetLowBoarderX_fu_564_p2 = (p_i3_fu_560_p2 & isInValidRegionX_reg_787_pp0_iter3_reg);

assign meetLowBoarderY_fu_497_p2 = (p_1_i2_fu_493_p2 & isInValidRegionX_reg_787_pp0_iter3_reg);

assign not_or_cond2_i_fu_372_p2 = (or_cond2_i_fu_357_p2 ^ 1'd1);

assign not_or_cond3_i_fu_315_p2 = (or_cond3_i_fu_300_p2 ^ 1'd1);

assign or_cond2_i_fu_357_p2 = (tmp_38_i_reg_805 | isInValidRegionX_reg_787);

assign or_cond3_i_fu_300_p2 = (tmp_44_i_reg_799 | isInValidRegionX_reg_787);

assign or_cond4_i_fu_466_p2 = (tmp_53_i_fu_461_p2 & meetHighBoarderX_reg_823);

assign or_cond5_i_fu_435_p2 = (tmp_55_i_fu_430_p2 & meetHighBoarderY_reg_811);

assign p_1_i2_fu_493_p2 = (tmp_46_i_reg_835 | tmp_44_i_reg_799_pp0_iter3_reg);

assign p_2_i_fu_367_p2 = (tmp_47_i_fu_361_p2 & isInValidRegionX_reg_787);

assign p_3_i_fu_310_p2 = (tmp_49_i_fu_304_p2 & isInValidRegionX_reg_787);

assign p_i3_fu_560_p2 = (tmp_45_i_reg_851 | tmp_38_i_reg_805_pp0_iter3_reg);

assign tmp_36_i_fu_650_p2 = (maxPosLowY_fu_90 + maxPosHighY_fu_86);

assign tmp_37_i_fu_257_p2 = ((i_i_reg_151 < 11'd1280) ? 1'b1 : 1'b0);

assign tmp_38_i_fu_286_p2 = ((val_curY_V_1_fu_134 == 12'd0) ? 1'b1 : 1'b0);

assign tmp_44_i_fu_272_p2 = ((val_curY_V_fu_130 == 12'd0) ? 1'b1 : 1'b0);

assign tmp_45_i_fu_455_p2 = ((i_i_reg_151_pp0_iter2_reg == 11'd0) ? 1'b1 : 1'b0);

assign tmp_46_i_fu_418_p2 = ((i_i_reg_151_pp0_iter2_reg == 11'd1280) ? 1'b1 : 1'b0);

assign tmp_47_i_fu_361_p2 = ((i_i_reg_151_pp0_iter1_reg == 11'd1279) ? 1'b1 : 1'b0);

assign tmp_48_i_fu_384_p2 = (not_or_cond2_i_fu_372_p2 | isInValidRegionX_reg_787);

assign tmp_49_i_fu_304_p2 = ((i_i_reg_151_pp0_iter1_reg == 11'd1999) ? 1'b1 : 1'b0);

assign tmp_50_cast_i_fu_502_p1 = tmp_50_i_reg_840;

assign tmp_50_i_fu_424_p2 = ($signed(i_cast_i_fu_411_p1) + $signed(12'd2816));

assign tmp_51_i_fu_327_p2 = (not_or_cond3_i_fu_315_p2 | isInValidRegionX_reg_787);

assign tmp_52_i_fu_389_p1 = tmp_V_reg_781;

assign tmp_53_i_fu_461_p2 = ((maxValSumX_reg_829 > maxValSumX_2_fu_106) ? 1'b1 : 1'b0);

assign tmp_54_i_fu_332_p1 = tmp_V_reg_781;

assign tmp_55_i_fu_430_p2 = ((maxValSumY_reg_817 > maxValSumY_2_fu_82) ? 1'b1 : 1'b0);

assign tmp_i_20_fu_624_p2 = (maxPosLowX_fu_114 + maxPosHighX_fu_110);

assign tmp_i_fu_245_p2 = ((ap_phi_mux_i_i_phi_fu_155_p4 == 11'd2000) ? 1'b1 : 1'b0);

assign widthX_fu_618_p2 = (maxPosHighX_fu_110 - maxPosLowX_fu_114);

assign widthY_fu_644_p2 = (maxPosHighY_fu_86 - maxPosLowY_fu_90);

endmodule //findMaxRegion
