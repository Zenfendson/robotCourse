// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module doublethres (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        H_thres_dout,
        H_thres_empty_n,
        H_thres_read,
        S_thres_dout,
        S_thres_empty_n,
        S_thres_read,
        V_thres_dout,
        V_thres_empty_n,
        V_thres_read,
        img_doublethres_data_din,
        img_doublethres_data_full_n,
        img_doublethres_data_write,
        img_hsv_data_stream_2_dout,
        img_hsv_data_stream_2_empty_n,
        img_hsv_data_stream_2_read,
        img_hsv_data_stream_1_dout,
        img_hsv_data_stream_1_empty_n,
        img_hsv_data_stream_1_read,
        img_hsv_data_stream_s_dout,
        img_hsv_data_stream_s_empty_n,
        img_hsv_data_stream_s_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] H_thres_dout;
input   H_thres_empty_n;
output   H_thres_read;
input  [15:0] S_thres_dout;
input   S_thres_empty_n;
output   S_thres_read;
input  [15:0] V_thres_dout;
input   V_thres_empty_n;
output   V_thres_read;
output  [7:0] img_doublethres_data_din;
input   img_doublethres_data_full_n;
output   img_doublethres_data_write;
input  [7:0] img_hsv_data_stream_2_dout;
input   img_hsv_data_stream_2_empty_n;
output   img_hsv_data_stream_2_read;
input  [7:0] img_hsv_data_stream_1_dout;
input   img_hsv_data_stream_1_empty_n;
output   img_hsv_data_stream_1_read;
input  [7:0] img_hsv_data_stream_s_dout;
input   img_hsv_data_stream_s_empty_n;
output   img_hsv_data_stream_s_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg H_thres_read;
reg S_thres_read;
reg V_thres_read;
reg[7:0] img_doublethres_data_din;
reg img_doublethres_data_write;
reg img_hsv_data_stream_2_read;
reg img_hsv_data_stream_1_read;
reg img_hsv_data_stream_s_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    H_thres_blk_n;
reg    S_thres_blk_n;
reg    V_thres_blk_n;
reg    img_doublethres_data_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond_reg_347;
reg   [0:0] or_cond2_reg_351;
reg   [0:0] or_cond3_reg_355;
reg    img_hsv_data_stream_2_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    img_hsv_data_stream_1_blk_n;
reg    img_hsv_data_stream_s_blk_n;
reg   [19:0] indvar_flatten_reg_191;
reg   [15:0] H_thres_read_reg_298;
reg    ap_block_state1;
reg   [15:0] S_thres_read_reg_304;
reg   [15:0] V_thres_read_reg_310;
wire   [0:0] exitcond_flatten_fu_202_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_predicate_op54_write_state5;
reg    ap_predicate_op59_write_state5;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [19:0] indvar_flatten_next_fu_208_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] scl_val_1_reg_325;
reg   [7:0] tmp_reg_331;
wire   [0:0] tmp_i_i_24_fu_223_p2;
reg   [0:0] tmp_i_i_24_reg_337;
wire   [0:0] tmp_56_i_i_fu_232_p2;
reg   [0:0] tmp_56_i_i_reg_342;
wire   [0:0] or_cond_fu_238_p2;
wire   [0:0] or_cond2_fu_264_p2;
wire   [0:0] or_cond3_fu_292_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] H_thres_low_V_load_n_fu_214_p4;
wire   [7:0] tmp_6_fu_229_p1;
wire   [7:0] S_thres_low_V_load_n_fu_242_p4;
wire   [7:0] tmp_7_fu_256_p1;
wire   [0:0] tmp_57_i_i_fu_251_p2;
wire   [0:0] tmp_58_i_i_fu_259_p2;
wire   [7:0] V_thres_low_V_load_n_fu_270_p4;
wire   [7:0] tmp_8_fu_284_p1;
wire   [0:0] tmp_59_i_i_fu_279_p2;
wire   [0:0] tmp_60_i_i_fu_287_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_191 <= indvar_flatten_next_fu_208_p2;
    end else if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_191 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        H_thres_read_reg_298 <= H_thres_dout;
        S_thres_read_reg_304 <= S_thres_dout;
        V_thres_read_reg_310 <= V_thres_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_238_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond2_reg_351 <= or_cond2_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond2_fu_264_p2 == 1'd0) & (or_cond_fu_238_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond3_reg_355 <= or_cond3_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond_reg_347 <= or_cond_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        scl_val_1_reg_325 <= img_hsv_data_stream_1_dout;
        tmp_56_i_i_reg_342 <= tmp_56_i_i_fu_232_p2;
        tmp_i_i_24_reg_337 <= tmp_i_i_24_fu_223_p2;
        tmp_reg_331 <= img_hsv_data_stream_s_dout;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        H_thres_blk_n = H_thres_empty_n;
    end else begin
        H_thres_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        H_thres_read = 1'b1;
    end else begin
        H_thres_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_thres_blk_n = S_thres_empty_n;
    end else begin
        S_thres_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_thres_read = 1'b1;
    end else begin
        S_thres_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        V_thres_blk_n = V_thres_empty_n;
    end else begin
        V_thres_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        V_thres_read = 1'b1;
    end else begin
        V_thres_read = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_202_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & ((or_cond_reg_347 == 1'd1) | ((or_cond3_reg_355 == 1'd1) | (or_cond2_reg_351 == 1'd1)))) | ((or_cond3_reg_355 == 1'd0) & (or_cond2_reg_351 == 1'd0) & (or_cond_reg_347 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        img_doublethres_data_blk_n = img_doublethres_data_full_n;
    end else begin
        img_doublethres_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op59_write_state5 == 1'b1)) begin
            img_doublethres_data_din = 8'd0;
        end else if ((ap_predicate_op54_write_state5 == 1'b1)) begin
            img_doublethres_data_din = 8'd255;
        end else begin
            img_doublethres_data_din = 'bx;
        end
    end else begin
        img_doublethres_data_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op59_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op54_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        img_doublethres_data_write = 1'b1;
    end else begin
        img_doublethres_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_hsv_data_stream_1_blk_n = img_hsv_data_stream_1_empty_n;
    end else begin
        img_hsv_data_stream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_hsv_data_stream_1_read = 1'b1;
    end else begin
        img_hsv_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_hsv_data_stream_2_blk_n = img_hsv_data_stream_2_empty_n;
    end else begin
        img_hsv_data_stream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_hsv_data_stream_2_read = 1'b1;
    end else begin
        img_hsv_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_hsv_data_stream_s_blk_n = img_hsv_data_stream_s_empty_n;
    end else begin
        img_hsv_data_stream_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_hsv_data_stream_s_read = 1'b1;
    end else begin
        img_hsv_data_stream_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign H_thres_low_V_load_n_fu_214_p4 = {{H_thres_read_reg_298[15:8]}};

assign S_thres_low_V_load_n_fu_242_p4 = {{S_thres_read_reg_304[15:8]}};

assign V_thres_low_V_load_n_fu_270_p4 = {{V_thres_read_reg_310[15:8]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((img_hsv_data_stream_s_empty_n == 1'b0) | (img_hsv_data_stream_1_empty_n == 1'b0) | (img_hsv_data_stream_2_empty_n == 1'b0))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op54_write_state5 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((img_hsv_data_stream_s_empty_n == 1'b0) | (img_hsv_data_stream_1_empty_n == 1'b0) | (img_hsv_data_stream_2_empty_n == 1'b0))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op54_write_state5 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((img_hsv_data_stream_s_empty_n == 1'b0) | (img_hsv_data_stream_1_empty_n == 1'b0) | (img_hsv_data_stream_2_empty_n == 1'b0))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op54_write_state5 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == V_thres_empty_n) | (1'b0 == S_thres_empty_n) | (1'b0 == H_thres_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((img_hsv_data_stream_s_empty_n == 1'b0) | (img_hsv_data_stream_1_empty_n == 1'b0) | (img_hsv_data_stream_2_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = (((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op59_write_state5 == 1'b1)) | ((img_doublethres_data_full_n == 1'b0) & (ap_predicate_op54_write_state5 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op54_write_state5 = ((or_cond3_reg_355 == 1'd0) & (or_cond2_reg_351 == 1'd0) & (or_cond_reg_347 == 1'd0));
end

always @ (*) begin
    ap_predicate_op59_write_state5 = ((or_cond_reg_347 == 1'd1) | ((or_cond3_reg_355 == 1'd1) | (or_cond2_reg_351 == 1'd1)));
end

assign exitcond_flatten_fu_202_p2 = ((indvar_flatten_reg_191 == 20'd921600) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_208_p2 = (indvar_flatten_reg_191 + 20'd1);

assign or_cond2_fu_264_p2 = (tmp_58_i_i_fu_259_p2 | tmp_57_i_i_fu_251_p2);

assign or_cond3_fu_292_p2 = (tmp_60_i_i_fu_287_p2 | tmp_59_i_i_fu_279_p2);

assign or_cond_fu_238_p2 = (tmp_i_i_24_reg_337 | tmp_56_i_i_reg_342);

assign tmp_56_i_i_fu_232_p2 = ((img_hsv_data_stream_2_dout > tmp_6_fu_229_p1) ? 1'b1 : 1'b0);

assign tmp_57_i_i_fu_251_p2 = ((scl_val_1_reg_325 < S_thres_low_V_load_n_fu_242_p4) ? 1'b1 : 1'b0);

assign tmp_58_i_i_fu_259_p2 = ((scl_val_1_reg_325 > tmp_7_fu_256_p1) ? 1'b1 : 1'b0);

assign tmp_59_i_i_fu_279_p2 = ((tmp_reg_331 < V_thres_low_V_load_n_fu_270_p4) ? 1'b1 : 1'b0);

assign tmp_60_i_i_fu_287_p2 = ((tmp_reg_331 > tmp_8_fu_284_p1) ? 1'b1 : 1'b0);

assign tmp_6_fu_229_p1 = H_thres_read_reg_298[7:0];

assign tmp_7_fu_256_p1 = S_thres_read_reg_304[7:0];

assign tmp_8_fu_284_p1 = V_thres_read_reg_310[7:0];

assign tmp_i_i_24_fu_223_p2 = ((img_hsv_data_stream_2_dout < H_thres_low_V_load_n_fu_214_p4) ? 1'b1 : 1'b0);

endmodule //doublethres
