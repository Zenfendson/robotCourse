// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_codeRepl17_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        res,
        res_ap_vld,
        res_strm_V_dout,
        res_strm_V_empty_n,
        res_strm_V_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [127:0] res;
output   res_ap_vld;
input  [31:0] res_strm_V_dout;
input   res_strm_V_empty_n;
output   res_strm_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] res;
reg res_ap_vld;
reg res_strm_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    res_strm_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [31:0] tmp_reg_55;
reg    ap_block_state1;
reg   [31:0] tmp_24_reg_60;
reg   [31:0] tmp_25_reg_65;
wire   [127:0] res22_part_set_i_fu_45_p5;
reg   [127:0] res_preg;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 res_preg = 128'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_preg <= 128'd0;
    end else begin
        if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            res_preg <= res22_part_set_i_fu_45_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_24_reg_60 <= res_strm_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_25_reg_65 <= res_strm_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (res_strm_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_55 <= res_strm_V_dout;
    end
end

always @ (*) begin
    if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res = res22_part_set_i_fu_45_p5;
    end else begin
        res = res_preg;
    end
end

always @ (*) begin
    if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        res_strm_V_blk_n = res_strm_V_empty_n;
    end else begin
        res_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_start == 1'b0) | (res_strm_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        res_strm_V_read = 1'b1;
    end else begin
        res_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (res_strm_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((res_strm_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (res_strm_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign res22_part_set_i_fu_45_p5 = {{{{tmp_25_reg_65}, {tmp_reg_55}}, {res_strm_V_dout}}, {tmp_24_reg_60}};

endmodule //Block_codeRepl17_pro
