// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nonmax_suppression (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gd_data_stream_V_dout,
        gd_data_stream_V_empty_n,
        gd_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] gd_data_stream_V_dout;
input   gd_data_stream_V_empty_n;
output   gd_data_stream_V_read;
output  [15:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gd_data_stream_V_read;
reg dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gd_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond_reg_781;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] or_cond4_reg_796;
reg   [0:0] or_cond4_reg_796_pp0_iter2_reg;
reg   [10:0] t_V_1_reg_225;
reg   [10:0] t_V_1_reg_225_pp0_iter1_reg;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond8_fu_237_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_V_fu_243_p2;
reg   [9:0] i_V_reg_740;
wire   [0:0] tmp_2_fu_249_p2;
reg   [0:0] tmp_2_reg_745;
wire   [0:0] icmp_fu_265_p2;
reg   [0:0] icmp_reg_750;
wire   [0:0] tmp_4_fu_271_p2;
reg   [0:0] tmp_4_reg_755;
wire   [0:0] tmp_5_fu_277_p2;
reg   [0:0] tmp_5_reg_760;
wire   [0:0] exitcond_fu_283_p2;
reg   [0:0] exitcond_reg_765;
reg   [0:0] exitcond_reg_765_pp0_iter1_reg;
wire   [10:0] j_V_fu_289_p2;
reg   [10:0] j_V_reg_769;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_8_fu_295_p2;
reg   [0:0] tmp_8_reg_774;
reg   [0:0] tmp_8_reg_774_pp0_iter1_reg;
wire   [0:0] or_cond_fu_301_p2;
reg   [0:0] or_cond_reg_781_pp0_iter1_reg;
reg   [10:0] linebuff_val_1_addr_reg_785;
reg   [10:0] linebuff_val_1_addr_reg_785_pp0_iter1_reg;
wire   [0:0] or_cond4_fu_318_p2;
reg   [0:0] or_cond4_reg_796_pp0_iter1_reg;
wire   [15:0] linebuff_val_0_q0;
reg   [15:0] tmp0_reg_800;
wire   [13:0] out_pixel_val_2_cast_fu_399_p4;
reg   [13:0] out_pixel_val_2_cast_reg_805;
wire   [0:0] icmp1_fu_419_p2;
reg   [0:0] icmp1_reg_810;
wire   [0:0] tmp_7_fu_425_p2;
reg   [0:0] tmp_7_reg_815;
wire   [0:0] tmp_14_fu_589_p2;
reg   [0:0] tmp_14_reg_820;
wire   [0:0] tmp_15_fu_595_p2;
reg   [0:0] tmp_15_reg_825;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
wire   [10:0] linebuff_val_0_address0;
reg    linebuff_val_0_ce0;
wire   [10:0] linebuff_val_0_address1;
reg    linebuff_val_0_ce1;
reg    linebuff_val_0_we1;
wire   [10:0] linebuff_val_1_address0;
reg    linebuff_val_1_ce0;
wire   [15:0] linebuff_val_1_q0;
reg    linebuff_val_1_ce1;
reg    linebuff_val_1_we1;
reg   [9:0] t_V_reg_214;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
reg   [10:0] ap_phi_mux_t_V_1_phi_fu_229_p4;
wire   [63:0] tmp_s_fu_306_p1;
wire   [63:0] tmp_6_fu_342_p1;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] tmp1_s_fu_118;
reg   [15:0] tmp0_s_fu_122;
reg   [15:0] element_gd_s_fu_126;
reg   [15:0] win_val_0_1_fu_130;
wire   [15:0] win_val_0_0_0_win_va_fu_388_p3;
reg   [15:0] win_val_0_1_1_fu_134;
reg   [15:0] win_val_1_1_fu_138;
wire   [15:0] win_val_1_0_0_win_va_fu_381_p3;
reg   [15:0] win_val_1_1_1_fu_142;
reg   [15:0] win_val_2_1_fu_146;
wire   [15:0] win_val_2_0_0_win_va_fu_374_p3;
reg   [15:0] win_val_2_1_1_fu_150;
wire   [8:0] tmp_3_fu_255_p4;
wire   [0:0] tmp_17_fu_312_p2;
wire   [9:0] tmp_19_fu_409_p4;
wire   [1:0] current_dir_fu_395_p1;
wire   [0:0] tmp_9_fu_431_p2;
wire   [0:0] tmp_10_fu_437_p2;
wire   [0:0] sel_tmp1_fu_449_p2;
wire   [0:0] tmp_11_fu_443_p2;
wire   [13:0] tmp_20_fu_481_p4;
wire   [13:0] tmp_21_fu_491_p4;
wire   [13:0] tmp_13_fu_471_p4;
wire   [13:0] tmp_22_fu_501_p3;
wire   [0:0] sel_tmp2_fu_455_p2;
wire   [13:0] tmp_12_fu_461_p4;
wire   [13:0] tmp_23_fu_509_p3;
wire   [13:0] tmp_27_fu_545_p4;
wire   [13:0] tmp_28_fu_555_p4;
wire   [13:0] tmp_26_fu_535_p4;
wire   [13:0] tmp_29_fu_565_p3;
wire   [13:0] tmp_25_fu_525_p4;
wire   [13:0] tmp_30_fu_573_p3;
wire   [13:0] tmp_31_fu_581_p3;
wire   [13:0] tmp_24_fu_517_p3;
wire   [0:0] tmp8_fu_644_p2;
wire   [0:0] tmp9_fu_640_p2;
wire   [0:0] or_cond3_fu_654_p2;
wire   [0:0] or_cond2_fu_648_p2;
wire   [13:0] out_pixel_val_fu_658_p3;
wire   [13:0] tmp_16_fu_665_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_0_address0),
    .ce0(linebuff_val_0_ce0),
    .q0(linebuff_val_0_q0),
    .address1(linebuff_val_0_address1),
    .ce1(linebuff_val_0_ce1),
    .we1(linebuff_val_0_we1),
    .d1(element_gd_s_fu_126)
);

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_1_address0),
    .ce0(linebuff_val_1_ce0),
    .q0(linebuff_val_1_q0),
    .address1(linebuff_val_1_addr_reg_785_pp0_iter1_reg),
    .ce1(linebuff_val_1_ce1),
    .we1(linebuff_val_1_we1),
    .d1(tmp0_reg_800)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond8_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond8_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((exitcond8_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_765 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_1_reg_225 <= j_V_reg_769;
    end else if (((exitcond8_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_225 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_214 <= i_V_reg_740;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_214 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        element_gd_s_fu_126 <= gd_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_765 <= exitcond_fu_283_p2;
        exitcond_reg_765_pp0_iter1_reg <= exitcond_reg_765;
        linebuff_val_1_addr_reg_785_pp0_iter1_reg <= linebuff_val_1_addr_reg_785;
        or_cond4_reg_796_pp0_iter1_reg <= or_cond4_reg_796;
        or_cond_reg_781_pp0_iter1_reg <= or_cond_reg_781;
        t_V_1_reg_225_pp0_iter1_reg <= t_V_1_reg_225;
        tmp_8_reg_774_pp0_iter1_reg <= tmp_8_reg_774;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_740 <= i_V_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp1_reg_810 <= icmp1_fu_419_p2;
        or_cond4_reg_796_pp0_iter2_reg <= or_cond4_reg_796_pp0_iter1_reg;
        out_pixel_val_2_cast_reg_805 <= {{win_val_1_1_fu_138[15:2]}};
        tmp_14_reg_820 <= tmp_14_fu_589_p2;
        tmp_15_reg_825 <= tmp_15_fu_595_p2;
        tmp_7_reg_815 <= tmp_7_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_reg_750 <= icmp_fu_265_p2;
        tmp_2_reg_745 <= tmp_2_fu_249_p2;
        tmp_4_reg_755 <= tmp_4_fu_271_p2;
        tmp_5_reg_760 <= tmp_5_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_V_reg_769 <= j_V_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_283_p2 == 1'd0) & (tmp_8_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuff_val_1_addr_reg_785 <= tmp_s_fu_306_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond4_reg_796 <= or_cond4_fu_318_p2;
        or_cond_reg_781 <= or_cond_fu_301_p2;
        tmp_8_reg_774 <= tmp_8_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_reg_774 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp0_reg_800 <= linebuff_val_0_q0;
        tmp0_s_fu_122 <= linebuff_val_0_q0;
        tmp1_s_fu_118 <= linebuff_val_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_765_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        win_val_0_1_1_fu_134 <= win_val_0_1_fu_130;
        win_val_0_1_fu_130 <= win_val_0_0_0_win_va_fu_388_p3;
        win_val_1_1_1_fu_142 <= win_val_1_1_fu_138;
        win_val_1_1_fu_138 <= win_val_1_0_0_win_va_fu_381_p3;
        win_val_2_1_1_fu_150 <= win_val_2_1_fu_146;
        win_val_2_1_fu_146 <= win_val_2_0_0_win_va_fu_374_p3;
    end
end

always @ (*) begin
    if ((exitcond_fu_283_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_765 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_V_1_phi_fu_229_p4 = j_V_reg_769;
    end else begin
        ap_phi_mux_t_V_1_phi_fu_229_p4 = t_V_1_reg_225;
    end
end

always @ (*) begin
    if (((exitcond8_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond4_reg_796_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond4_reg_796_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_781 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gd_data_stream_V_blk_n = gd_data_stream_V_empty_n;
    end else begin
        gd_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_781 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gd_data_stream_V_read = 1'b1;
    end else begin
        gd_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuff_val_0_ce0 = 1'b1;
    end else begin
        linebuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_0_ce1 = 1'b1;
    end else begin
        linebuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_781_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_0_we1 = 1'b1;
    end else begin
        linebuff_val_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuff_val_1_ce0 = 1'b1;
    end else begin
        linebuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_1_ce1 = 1'b1;
    end else begin
        linebuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_reg_774_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_1_we1 = 1'b1;
    end else begin
        linebuff_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_283_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_283_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_cond4_reg_796_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_reg_781 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_cond4_reg_796_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_reg_781 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_cond4_reg_796_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_reg_781 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((or_cond_reg_781 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((or_cond4_reg_796_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign current_dir_fu_395_p1 = win_val_1_1_fu_138[1:0];

assign dst_data_stream_V_din = tmp_16_fu_665_p3;

assign exitcond8_fu_237_p2 = ((t_V_reg_214 == 10'd721) ? 1'b1 : 1'b0);

assign exitcond_fu_283_p2 = ((ap_phi_mux_t_V_1_phi_fu_229_p4 == 11'd1281) ? 1'b1 : 1'b0);

assign i_V_fu_243_p2 = (t_V_reg_214 + 10'd1);

assign icmp1_fu_419_p2 = ((tmp_19_fu_409_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_fu_265_p2 = ((tmp_3_fu_255_p4 == 9'd0) ? 1'b1 : 1'b0);

assign j_V_fu_289_p2 = (ap_phi_mux_t_V_1_phi_fu_229_p4 + 11'd1);

assign linebuff_val_0_address0 = tmp_s_fu_306_p1;

assign linebuff_val_0_address1 = tmp_6_fu_342_p1;

assign linebuff_val_1_address0 = tmp_s_fu_306_p1;

assign or_cond2_fu_648_p2 = (tmp9_fu_640_p2 | tmp8_fu_644_p2);

assign or_cond3_fu_654_p2 = (tmp_15_reg_825 & tmp_14_reg_820);

assign or_cond4_fu_318_p2 = (tmp_4_reg_755 | tmp_17_fu_312_p2);

assign or_cond_fu_301_p2 = (tmp_8_fu_295_p2 & tmp_2_reg_745);

assign out_pixel_val_2_cast_fu_399_p4 = {{win_val_1_1_fu_138[15:2]}};

assign out_pixel_val_fu_658_p3 = ((or_cond3_fu_654_p2[0:0] === 1'b1) ? out_pixel_val_2_cast_reg_805 : 14'd0);

assign sel_tmp1_fu_449_p2 = (tmp_9_fu_431_p2 ^ 1'd1);

assign sel_tmp2_fu_455_p2 = (tmp_10_fu_437_p2 & sel_tmp1_fu_449_p2);

assign tmp8_fu_644_p2 = (tmp_7_reg_815 | tmp_5_reg_760);

assign tmp9_fu_640_p2 = (icmp_reg_750 | icmp1_reg_810);

assign tmp_10_fu_437_p2 = ((current_dir_fu_395_p1 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_11_fu_443_p2 = ((current_dir_fu_395_p1 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_12_fu_461_p4 = {{win_val_0_1_1_fu_134[15:2]}};

assign tmp_13_fu_471_p4 = {{win_val_1_1_1_fu_142[15:2]}};

assign tmp_14_fu_589_p2 = ((out_pixel_val_2_cast_fu_399_p4 > tmp_31_fu_581_p3) ? 1'b1 : 1'b0);

assign tmp_15_fu_595_p2 = ((out_pixel_val_2_cast_fu_399_p4 > tmp_24_fu_517_p3) ? 1'b1 : 1'b0);

assign tmp_16_fu_665_p3 = ((or_cond2_fu_648_p2[0:0] === 1'b1) ? 14'd0 : out_pixel_val_fu_658_p3);

assign tmp_17_fu_312_p2 = ((ap_phi_mux_t_V_1_phi_fu_229_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_19_fu_409_p4 = {{t_V_1_reg_225_pp0_iter1_reg[10:1]}};

assign tmp_20_fu_481_p4 = {{win_val_2_1_fu_146[15:2]}};

assign tmp_21_fu_491_p4 = {{win_val_0_0_0_win_va_fu_388_p3[15:2]}};

assign tmp_22_fu_501_p3 = ((tmp_11_fu_443_p2[0:0] === 1'b1) ? tmp_20_fu_481_p4 : tmp_21_fu_491_p4);

assign tmp_23_fu_509_p3 = ((tmp_9_fu_431_p2[0:0] === 1'b1) ? tmp_13_fu_471_p4 : tmp_22_fu_501_p3);

assign tmp_24_fu_517_p3 = ((sel_tmp2_fu_455_p2[0:0] === 1'b1) ? tmp_12_fu_461_p4 : tmp_23_fu_509_p3);

assign tmp_25_fu_525_p4 = {{win_val_2_0_0_win_va_fu_374_p3[15:2]}};

assign tmp_26_fu_535_p4 = {{win_val_1_0_0_win_va_fu_381_p3[15:2]}};

assign tmp_27_fu_545_p4 = {{win_val_0_1_fu_130[15:2]}};

assign tmp_28_fu_555_p4 = {{win_val_2_1_1_fu_150[15:2]}};

assign tmp_29_fu_565_p3 = ((tmp_11_fu_443_p2[0:0] === 1'b1) ? tmp_27_fu_545_p4 : tmp_28_fu_555_p4);

assign tmp_2_fu_249_p2 = ((t_V_reg_214 < 10'd720) ? 1'b1 : 1'b0);

assign tmp_30_fu_573_p3 = ((tmp_9_fu_431_p2[0:0] === 1'b1) ? tmp_26_fu_535_p4 : tmp_29_fu_565_p3);

assign tmp_31_fu_581_p3 = ((sel_tmp2_fu_455_p2[0:0] === 1'b1) ? tmp_25_fu_525_p4 : tmp_30_fu_573_p3);

assign tmp_3_fu_255_p4 = {{t_V_reg_214[9:1]}};

assign tmp_4_fu_271_p2 = ((t_V_reg_214 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_277_p2 = ((t_V_reg_214 > 10'd719) ? 1'b1 : 1'b0);

assign tmp_6_fu_342_p1 = t_V_1_reg_225_pp0_iter1_reg;

assign tmp_7_fu_425_p2 = ((t_V_1_reg_225_pp0_iter1_reg > 11'd1279) ? 1'b1 : 1'b0);

assign tmp_8_fu_295_p2 = ((ap_phi_mux_t_V_1_phi_fu_229_p4 < 11'd1280) ? 1'b1 : 1'b0);

assign tmp_9_fu_431_p2 = ((current_dir_fu_395_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_306_p1 = ap_phi_mux_t_V_1_phi_fu_229_p4;

assign win_val_0_0_0_win_va_fu_388_p3 = ((tmp_8_reg_774_pp0_iter1_reg[0:0] === 1'b1) ? element_gd_s_fu_126 : win_val_0_1_fu_130);

assign win_val_1_0_0_win_va_fu_381_p3 = ((tmp_8_reg_774_pp0_iter1_reg[0:0] === 1'b1) ? tmp0_s_fu_122 : win_val_1_1_fu_138);

assign win_val_2_0_0_win_va_fu_374_p3 = ((tmp_8_reg_774_pp0_iter1_reg[0:0] === 1'b1) ? tmp1_s_fu_118 : win_val_2_1_fu_146);

endmodule //nonmax_suppression
