// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_decompositi (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        gx_data_stream_V_dout,
        gx_data_stream_V_empty_n,
        gx_data_stream_V_read,
        gy_data_stream_V_dout,
        gy_data_stream_V_empty_n,
        gy_data_stream_V_read,
        gd_data_stream_V_din,
        gd_data_stream_V_full_n,
        gd_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] gx_data_stream_V_dout;
input   gx_data_stream_V_empty_n;
output   gx_data_stream_V_read;
input  [15:0] gy_data_stream_V_dout;
input   gy_data_stream_V_empty_n;
output   gy_data_stream_V_read;
output  [15:0] gd_data_stream_V_din;
input   gd_data_stream_V_full_n;
output   gd_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg gx_data_stream_V_read;
reg gy_data_stream_V_read;
reg gd_data_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    gx_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_627;
reg    gy_data_stream_V_blk_n;
reg    gd_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] exitcond_reg_627_pp0_iter4_reg;
reg   [10:0] t_V_3_reg_154;
wire   [0:0] exitcond8_fu_165_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_V_fu_171_p2;
reg   [9:0] i_V_reg_622;
wire   [0:0] exitcond_fu_177_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_627_pp0_iter1_reg;
reg   [0:0] exitcond_reg_627_pp0_iter2_reg;
reg   [0:0] exitcond_reg_627_pp0_iter3_reg;
wire   [10:0] j_V_fu_183_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_51_reg_636;
reg   [15:0] tmp_52_reg_645;
wire   [15:0] xs_V_3_fu_189_p2;
reg   [15:0] xs_V_3_reg_654;
reg   [0:0] p_Result_s_reg_659;
wire   [15:0] xs_V_4_fu_203_p2;
reg   [15:0] xs_V_4_reg_665;
reg   [0:0] p_Result_2_reg_670;
wire   [0:0] tmp_s_fu_255_p2;
reg   [0:0] tmp_s_reg_676;
reg   [0:0] tmp_s_reg_676_pp0_iter3_reg;
wire   [0:0] or_cond5_fu_295_p2;
reg   [0:0] or_cond5_reg_684;
reg   [0:0] or_cond5_reg_684_pp0_iter3_reg;
wire   [0:0] or_cond9_fu_324_p2;
reg   [0:0] or_cond9_reg_690;
reg   [0:0] or_cond9_reg_690_pp0_iter3_reg;
wire   [18:0] tmp_33_fu_346_p2;
reg   [18:0] tmp_33_reg_696;
wire   [20:0] tmp_34_fu_376_p2;
reg   [20:0] tmp_34_reg_701;
wire   [18:0] tmp_35_fu_390_p2;
reg   [18:0] tmp_35_reg_706;
wire   [20:0] tmp_36_fu_412_p2;
reg   [20:0] tmp_36_reg_711;
wire   [0:0] or_cond4_fu_447_p2;
reg   [0:0] or_cond4_reg_716;
reg   [0:0] or_cond4_reg_716_pp0_iter3_reg;
wire   [0:0] tmp_40_fu_459_p2;
reg   [0:0] tmp_40_reg_722;
reg   [0:0] tmp_40_reg_722_pp0_iter3_reg;
wire   [13:0] abs_g_fu_465_p2;
reg   [13:0] abs_g_reg_727;
reg   [13:0] abs_g_reg_727_pp0_iter3_reg;
reg   [13:0] abs_g_reg_727_pp0_iter4_reg;
wire   [0:0] ult_fu_474_p2;
reg   [0:0] ult_reg_732;
wire   [0:0] tmp_37_fu_482_p2;
reg   [0:0] tmp_37_reg_737;
wire   [1:0] dir_g_7_fu_603_p3;
reg   [1:0] dir_g_7_reg_743;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [9:0] t_V_reg_143;
reg    ap_block_state1;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] p_Result_3_fu_217_p4;
reg   [15:0] p_Result_4_fu_232_p4;
wire   [15:0] abs_gy_fu_241_p3;
wire   [15:0] abs_gx_fu_226_p3;
wire   [0:0] tmp_47_fu_266_p3;
wire   [0:0] tmp_28_fu_261_p2;
wire   [0:0] rev_fu_273_p2;
wire   [0:0] tmp_30_fu_285_p2;
wire   [0:0] or_cond_fu_279_p2;
wire   [0:0] or_cond1_fu_290_p2;
wire   [0:0] tmp_31_fu_301_p2;
wire   [15:0] tmp_32_fu_312_p2;
wire   [0:0] or_cond8_fu_306_p2;
wire   [0:0] tmp_48_fu_316_p3;
wire   [17:0] p_shl2_fu_334_p3;
wire   [18:0] tmp_96_cast1_fu_330_p1;
wire   [18:0] p_shl2_cast_fu_342_p1;
wire   [19:0] p_shl_fu_352_p3;
wire   [17:0] p_shl1_fu_364_p3;
wire   [20:0] p_shl_cast_fu_360_p1;
wire   [20:0] p_shl1_cast_fu_372_p1;
wire   [18:0] tmp_88_cast1_fu_382_p1;
wire   [18:0] p_shl5_cast_fu_386_p1;
wire   [19:0] p_shl3_fu_396_p3;
wire   [20:0] p_shl3_cast_fu_404_p1;
wire   [20:0] p_shl4_cast_fu_408_p1;
wire   [0:0] tmp_49_fu_418_p3;
wire   [0:0] rev10_fu_425_p2;
wire   [0:0] tmp_38_fu_436_p2;
wire   [0:0] or_cond2_fu_431_p2;
wire   [0:0] or_cond3_fu_441_p2;
wire   [15:0] tmp_39_fu_453_p2;
wire   [13:0] tmp_fu_247_p1;
wire   [13:0] tmp_46_fu_251_p1;
wire   [20:0] tmp_97_cast_fu_471_p1;
wire   [20:0] tmp_89_cast_fu_479_p1;
wire   [0:0] rev9_fu_487_p2;
wire   [0:0] sel_tmp_fu_518_p2;
wire   [1:0] dir_g_cast_fu_492_p1;
wire   [1:0] dir_g_3_cast_fu_510_p3;
wire   [0:0] sel_tmp2_fu_530_p2;
wire   [0:0] sel_tmp3_fu_535_p2;
wire   [1:0] dir_g_1_fu_496_p3;
wire   [1:0] sel_tmp1_fu_522_p3;
wire   [0:0] sel_tmp7_demorgan_fu_548_p2;
wire   [0:0] sel_tmp7_fu_552_p2;
wire   [0:0] sel_tmp8_fu_558_p2;
wire   [1:0] dir_g_2_fu_503_p3;
wire   [1:0] sel_tmp4_fu_540_p3;
wire   [0:0] sel_tmp5_fu_571_p2;
wire   [0:0] sel_tmp16_demorgan_fu_581_p2;
wire   [0:0] sel_tmp6_fu_576_p2;
wire   [0:0] sel_tmp10_fu_586_p2;
wire   [0:0] sel_tmp11_fu_592_p2;
wire   [0:0] sel_tmp12_fu_598_p2;
wire   [1:0] sel_tmp9_fu_563_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond8_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond8_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((exitcond8_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_3_reg_154 <= 11'd0;
    end else if (((exitcond_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_3_reg_154 <= j_V_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_143 <= i_V_reg_622;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_143 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_627_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        abs_g_reg_727 <= abs_g_fu_465_p2;
        or_cond4_reg_716 <= or_cond4_fu_447_p2;
        or_cond5_reg_684 <= or_cond5_fu_295_p2;
        or_cond9_reg_690 <= or_cond9_fu_324_p2;
        tmp_33_reg_696 <= tmp_33_fu_346_p2;
        tmp_34_reg_701[20 : 2] <= tmp_34_fu_376_p2[20 : 2];
        tmp_35_reg_706 <= tmp_35_fu_390_p2;
        tmp_36_reg_711[20 : 2] <= tmp_36_fu_412_p2[20 : 2];
        tmp_40_reg_722 <= tmp_40_fu_459_p2;
        tmp_s_reg_676 <= tmp_s_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        abs_g_reg_727_pp0_iter3_reg <= abs_g_reg_727;
        abs_g_reg_727_pp0_iter4_reg <= abs_g_reg_727_pp0_iter3_reg;
        exitcond_reg_627_pp0_iter2_reg <= exitcond_reg_627_pp0_iter1_reg;
        exitcond_reg_627_pp0_iter3_reg <= exitcond_reg_627_pp0_iter2_reg;
        exitcond_reg_627_pp0_iter4_reg <= exitcond_reg_627_pp0_iter3_reg;
        or_cond4_reg_716_pp0_iter3_reg <= or_cond4_reg_716;
        or_cond5_reg_684_pp0_iter3_reg <= or_cond5_reg_684;
        or_cond9_reg_690_pp0_iter3_reg <= or_cond9_reg_690;
        tmp_40_reg_722_pp0_iter3_reg <= tmp_40_reg_722;
        tmp_s_reg_676_pp0_iter3_reg <= tmp_s_reg_676;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_627_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dir_g_7_reg_743 <= dir_g_7_fu_603_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_627 <= exitcond_fu_177_p2;
        exitcond_reg_627_pp0_iter1_reg <= exitcond_reg_627;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_622 <= i_V_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_627 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_2_reg_670 <= gy_data_stream_V_dout[32'd15];
        p_Result_s_reg_659 <= gx_data_stream_V_dout[32'd15];
        tmp_51_reg_636 <= gx_data_stream_V_dout;
        tmp_52_reg_645 <= gy_data_stream_V_dout;
        xs_V_3_reg_654 <= xs_V_3_fu_189_p2;
        xs_V_4_reg_665 <= xs_V_4_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_627_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_37_reg_737 <= tmp_37_fu_482_p2;
        ult_reg_732 <= ult_fu_474_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_177_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_627_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        gd_data_stream_V_blk_n = gd_data_stream_V_full_n;
    end else begin
        gd_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_627_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gd_data_stream_V_write = 1'b1;
    end else begin
        gd_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gx_data_stream_V_blk_n = gx_data_stream_V_empty_n;
    end else begin
        gx_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_627 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gx_data_stream_V_read = 1'b1;
    end else begin
        gx_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_627 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gy_data_stream_V_blk_n = gy_data_stream_V_empty_n;
    end else begin
        gy_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_627 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gy_data_stream_V_read = 1'b1;
    end else begin
        gy_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_177_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_177_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_g_fu_465_p2 = (tmp_fu_247_p1 + tmp_46_fu_251_p1);

assign abs_gx_fu_226_p3 = ((p_Result_s_reg_659[0:0] === 1'b1) ? p_Result_3_fu_217_p4 : tmp_51_reg_636);

assign abs_gy_fu_241_p3 = ((p_Result_2_reg_670[0:0] === 1'b1) ? p_Result_4_fu_232_p4 : tmp_52_reg_645);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_reg_627_pp0_iter4_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_627 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_627 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_reg_627_pp0_iter4_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_627 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_627 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_reg_627_pp0_iter4_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_627 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_627 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_627 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_627 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter5 = ((exitcond_reg_627_pp0_iter4_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dir_g_1_fu_496_p3 = ((tmp_37_reg_737[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign dir_g_2_fu_503_p3 = ((tmp_37_reg_737[0:0] === 1'b1) ? 2'd2 : 2'd3);

assign dir_g_3_cast_fu_510_p3 = ((rev9_fu_487_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign dir_g_7_fu_603_p3 = ((sel_tmp12_fu_598_p2[0:0] === 1'b1) ? 2'd0 : sel_tmp9_fu_563_p3);

assign dir_g_cast_fu_492_p1 = rev9_fu_487_p2;

assign exitcond8_fu_165_p2 = ((t_V_reg_143 == 10'd720) ? 1'b1 : 1'b0);

assign exitcond_fu_177_p2 = ((t_V_3_reg_154 == 11'd1280) ? 1'b1 : 1'b0);

assign gd_data_stream_V_din = {{abs_g_reg_727_pp0_iter4_reg}, {dir_g_7_reg_743}};

assign i_V_fu_171_p2 = (t_V_reg_143 + 10'd1);

assign j_V_fu_183_p2 = (t_V_3_reg_154 + 11'd1);

assign or_cond1_fu_290_p2 = (tmp_30_fu_285_p2 & p_Result_s_reg_659);

assign or_cond2_fu_431_p2 = (rev10_fu_425_p2 & p_Result_2_reg_670);

assign or_cond3_fu_441_p2 = (tmp_38_fu_436_p2 & tmp_31_fu_301_p2);

assign or_cond4_fu_447_p2 = (or_cond3_fu_441_p2 | or_cond2_fu_431_p2);

assign or_cond5_fu_295_p2 = (or_cond_fu_279_p2 | or_cond1_fu_290_p2);

assign or_cond8_fu_306_p2 = (tmp_31_fu_301_p2 & tmp_28_fu_261_p2);

assign or_cond9_fu_324_p2 = (tmp_48_fu_316_p3 | or_cond8_fu_306_p2);

assign or_cond_fu_279_p2 = (tmp_28_fu_261_p2 & rev_fu_273_p2);

always @ (*) begin
    p_Result_3_fu_217_p4 = xs_V_3_reg_654;
    p_Result_3_fu_217_p4[32'd15] = |(1'd0);
end

always @ (*) begin
    p_Result_4_fu_232_p4 = xs_V_4_reg_665;
    p_Result_4_fu_232_p4[32'd15] = |(1'd0);
end

assign p_shl1_cast_fu_372_p1 = p_shl1_fu_364_p3;

assign p_shl1_fu_364_p3 = {{abs_gy_fu_241_p3}, {2'd0}};

assign p_shl2_cast_fu_342_p1 = p_shl2_fu_334_p3;

assign p_shl2_fu_334_p3 = {{abs_gx_fu_226_p3}, {2'd0}};

assign p_shl3_cast_fu_404_p1 = p_shl3_fu_396_p3;

assign p_shl3_fu_396_p3 = {{abs_gx_fu_226_p3}, {4'd0}};

assign p_shl4_cast_fu_408_p1 = p_shl2_fu_334_p3;

assign p_shl5_cast_fu_386_p1 = p_shl1_fu_364_p3;

assign p_shl_cast_fu_360_p1 = p_shl_fu_352_p3;

assign p_shl_fu_352_p3 = {{abs_gy_fu_241_p3}, {4'd0}};

assign rev10_fu_425_p2 = (tmp_49_fu_418_p3 ^ 1'd1);

assign rev9_fu_487_p2 = (ult_reg_732 ^ 1'd1);

assign rev_fu_273_p2 = (tmp_47_fu_266_p3 ^ 1'd1);

assign sel_tmp10_fu_586_p2 = (sel_tmp16_demorgan_fu_581_p2 ^ 1'd1);

assign sel_tmp11_fu_592_p2 = (sel_tmp6_fu_576_p2 | sel_tmp10_fu_586_p2);

assign sel_tmp12_fu_598_p2 = (tmp_40_reg_722_pp0_iter3_reg & sel_tmp11_fu_592_p2);

assign sel_tmp16_demorgan_fu_581_p2 = (sel_tmp7_demorgan_fu_548_p2 | or_cond4_reg_716_pp0_iter3_reg);

assign sel_tmp1_fu_522_p3 = ((sel_tmp_fu_518_p2[0:0] === 1'b1) ? dir_g_cast_fu_492_p1 : dir_g_3_cast_fu_510_p3);

assign sel_tmp2_fu_530_p2 = (tmp_s_reg_676_pp0_iter3_reg ^ 1'd1);

assign sel_tmp3_fu_535_p2 = (sel_tmp2_fu_530_p2 & or_cond9_reg_690_pp0_iter3_reg);

assign sel_tmp4_fu_540_p3 = ((sel_tmp3_fu_535_p2[0:0] === 1'b1) ? dir_g_1_fu_496_p3 : sel_tmp1_fu_522_p3);

assign sel_tmp5_fu_571_p2 = (or_cond5_reg_684_pp0_iter3_reg ^ 1'd1);

assign sel_tmp6_fu_576_p2 = (tmp_s_reg_676_pp0_iter3_reg & sel_tmp5_fu_571_p2);

assign sel_tmp7_demorgan_fu_548_p2 = (tmp_s_reg_676_pp0_iter3_reg | or_cond9_reg_690_pp0_iter3_reg);

assign sel_tmp7_fu_552_p2 = (sel_tmp7_demorgan_fu_548_p2 ^ 1'd1);

assign sel_tmp8_fu_558_p2 = (sel_tmp7_fu_552_p2 & or_cond4_reg_716_pp0_iter3_reg);

assign sel_tmp9_fu_563_p3 = ((sel_tmp8_fu_558_p2[0:0] === 1'b1) ? dir_g_2_fu_503_p3 : sel_tmp4_fu_540_p3);

assign sel_tmp_fu_518_p2 = (tmp_s_reg_676_pp0_iter3_reg & or_cond5_reg_684_pp0_iter3_reg);

assign start_out = real_start;

assign tmp_28_fu_261_p2 = (($signed(tmp_51_reg_636) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_30_fu_285_p2 = (($signed(tmp_52_reg_645) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_31_fu_301_p2 = (($signed(tmp_52_reg_645) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_32_fu_312_p2 = (tmp_52_reg_645 & tmp_51_reg_636);

assign tmp_33_fu_346_p2 = (tmp_96_cast1_fu_330_p1 + p_shl2_cast_fu_342_p1);

assign tmp_34_fu_376_p2 = (p_shl_cast_fu_360_p1 - p_shl1_cast_fu_372_p1);

assign tmp_35_fu_390_p2 = (tmp_88_cast1_fu_382_p1 + p_shl5_cast_fu_386_p1);

assign tmp_36_fu_412_p2 = (p_shl3_cast_fu_404_p1 - p_shl4_cast_fu_408_p1);

assign tmp_37_fu_482_p2 = ((tmp_89_cast_fu_479_p1 > tmp_36_reg_711) ? 1'b1 : 1'b0);

assign tmp_38_fu_436_p2 = (($signed(tmp_51_reg_636) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_39_fu_453_p2 = (abs_gy_fu_241_p3 | abs_gx_fu_226_p3);

assign tmp_40_fu_459_p2 = ((tmp_39_fu_453_p2 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_46_fu_251_p1 = abs_gx_fu_226_p3[13:0];

assign tmp_47_fu_266_p3 = tmp_52_reg_645[32'd15];

assign tmp_48_fu_316_p3 = tmp_32_fu_312_p2[32'd15];

assign tmp_49_fu_418_p3 = tmp_51_reg_636[32'd15];

assign tmp_88_cast1_fu_382_p1 = abs_gy_fu_241_p3;

assign tmp_89_cast_fu_479_p1 = tmp_35_reg_706;

assign tmp_96_cast1_fu_330_p1 = abs_gx_fu_226_p3;

assign tmp_97_cast_fu_471_p1 = tmp_33_reg_696;

assign tmp_fu_247_p1 = abs_gy_fu_241_p3[13:0];

assign tmp_s_fu_255_p2 = ((abs_gx_fu_226_p3 > abs_gy_fu_241_p3) ? 1'b1 : 1'b0);

assign ult_fu_474_p2 = ((tmp_34_reg_701 < tmp_97_cast_fu_471_p1) ? 1'b1 : 1'b0);

assign xs_V_3_fu_189_p2 = (16'd0 - gx_data_stream_V_dout);

assign xs_V_4_fu_203_p2 = (16'd0 - gy_data_stream_V_dout);

always @ (posedge ap_clk) begin
    tmp_34_reg_701[1:0] <= 2'b00;
    tmp_36_reg_711[1:0] <= 2'b00;
end

endmodule //gradient_decompositi
