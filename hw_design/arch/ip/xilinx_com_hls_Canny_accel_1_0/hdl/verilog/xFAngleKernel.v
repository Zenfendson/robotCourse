// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xFAngleKernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src1_V_V_dout,
        p_src1_V_V_empty_n,
        p_src1_V_V_read,
        p_src2_V_V_dout,
        p_src2_V_V_empty_n,
        p_src2_V_V_read,
        p_dst_V_V_din,
        p_dst_V_V_full_n,
        p_dst_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state12 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] p_src1_V_V_dout;
input   p_src1_V_V_empty_n;
output   p_src1_V_V_read;
input  [15:0] p_src2_V_V_dout;
input   p_src2_V_V_empty_n;
output   p_src2_V_V_read;
output  [7:0] p_dst_V_V_din;
input   p_dst_V_V_full_n;
output   p_dst_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src1_V_V_read;
reg p_src2_V_V_read;
reg p_dst_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_348;
reg    p_src2_V_V_blk_n;
reg    p_dst_V_V_blk_n;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] exitcond_reg_348_pp0_iter7_reg;
reg   [10:0] t_V_10_reg_158;
wire   [0:0] exitcond1_fu_169_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_V_fu_175_p2;
reg   [9:0] i_V_reg_343;
wire   [0:0] exitcond_fu_181_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
reg    ap_block_state11_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_348_pp0_iter1_reg;
reg   [0:0] exitcond_reg_348_pp0_iter2_reg;
reg   [0:0] exitcond_reg_348_pp0_iter3_reg;
reg   [0:0] exitcond_reg_348_pp0_iter4_reg;
reg   [0:0] exitcond_reg_348_pp0_iter5_reg;
reg   [0:0] exitcond_reg_348_pp0_iter6_reg;
wire   [10:0] j_V_fu_187_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_V_18_reg_357;
reg   [15:0] tmp_V_18_reg_357_pp0_iter2_reg;
reg   [15:0] tmp_V_18_reg_357_pp0_iter3_reg;
reg   [15:0] tmp_V_18_reg_357_pp0_iter4_reg;
reg   [15:0] tmp_V_18_reg_357_pp0_iter5_reg;
reg   [15:0] tmp_V_18_reg_357_pp0_iter6_reg;
reg   [15:0] tmp_V_18_reg_357_pp0_iter7_reg;
reg   [15:0] tmp_V_19_reg_364;
reg   [15:0] tmp_V_19_reg_364_pp0_iter2_reg;
reg   [15:0] tmp_V_19_reg_364_pp0_iter3_reg;
reg   [15:0] tmp_V_19_reg_364_pp0_iter4_reg;
reg   [15:0] tmp_V_19_reg_364_pp0_iter5_reg;
reg   [15:0] tmp_V_19_reg_364_pp0_iter6_reg;
reg   [15:0] tmp_V_19_reg_364_pp0_iter7_reg;
reg   [0:0] tmp_reg_371;
reg   [0:0] tmp_36_reg_376;
reg   [0:0] tmp_36_reg_376_pp0_iter2_reg;
reg   [0:0] tmp_36_reg_376_pp0_iter3_reg;
reg   [0:0] tmp_36_reg_376_pp0_iter4_reg;
reg   [0:0] tmp_36_reg_376_pp0_iter5_reg;
wire   [15:0] p_Val2_3_fu_214_p3;
reg   [15:0] p_Val2_3_reg_381;
reg   [15:0] p_Val2_3_reg_381_pp0_iter3_reg;
reg   [15:0] p_Val2_3_reg_381_pp0_iter4_reg;
reg   [15:0] p_Val2_3_reg_381_pp0_iter5_reg;
wire   [30:0] grp_fu_327_p2;
reg   [30:0] tg22x_1_reg_392;
reg   [30:0] tg22x_1_reg_392_pp0_iter6_reg;
wire   [15:0] tmp_5_fu_232_p3;
reg   [15:0] tmp_5_reg_398;
wire   [31:0] tg67x_fu_248_p2;
reg   [31:0] tg67x_reg_403;
wire   [0:0] tmp_29_fu_265_p2;
reg   [0:0] tmp_29_reg_408;
wire   [0:0] sel_tmp2_fu_281_p2;
reg   [0:0] sel_tmp2_reg_413;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [9:0] t_V_reg_147;
reg    ap_block_state1;
wire    ap_CS_fsm_state12;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_27_fu_209_p2;
wire   [15:0] tmp_28_fu_227_p2;
wire   [31:0] tmp_30_fu_241_p3;
wire   [31:0] tg22x_1_cast1_fu_238_p1;
wire   [30:0] ya_fu_254_p3;
wire   [31:0] ya_cast_fu_261_p1;
wire   [0:0] tmp_31_fu_270_p2;
wire   [0:0] sel_tmp1_fu_275_p2;
wire   [15:0] tmp_32_fu_287_p2;
wire   [0:0] tmp_37_fu_291_p3;
wire   [0:0] or_cond_fu_306_p2;
wire   [7:0] newSel_cast_cast_fu_299_p3;
wire   [7:0] newSel4_fu_310_p3;
wire   [15:0] grp_fu_327_p0;
wire   [14:0] grp_fu_327_p1;
reg    grp_fu_327_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [30:0] grp_fu_327_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

Canny_accel_mul_mg8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
Canny_accel_mul_mg8j_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_327_p0),
    .din1(grp_fu_327_p1),
    .ce(grp_fu_327_ce),
    .dout(grp_fu_327_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((exitcond1_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        t_V_10_reg_158 <= j_V_fu_187_p2;
    end else if (((exitcond1_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_10_reg_158 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        t_V_reg_147 <= i_V_reg_343;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_147 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_348 <= exitcond_fu_181_p2;
        exitcond_reg_348_pp0_iter1_reg <= exitcond_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_348_pp0_iter2_reg <= exitcond_reg_348_pp0_iter1_reg;
        exitcond_reg_348_pp0_iter3_reg <= exitcond_reg_348_pp0_iter2_reg;
        exitcond_reg_348_pp0_iter4_reg <= exitcond_reg_348_pp0_iter3_reg;
        exitcond_reg_348_pp0_iter5_reg <= exitcond_reg_348_pp0_iter4_reg;
        exitcond_reg_348_pp0_iter6_reg <= exitcond_reg_348_pp0_iter5_reg;
        exitcond_reg_348_pp0_iter7_reg <= exitcond_reg_348_pp0_iter6_reg;
        p_Val2_3_reg_381_pp0_iter3_reg <= p_Val2_3_reg_381;
        p_Val2_3_reg_381_pp0_iter4_reg <= p_Val2_3_reg_381_pp0_iter3_reg;
        p_Val2_3_reg_381_pp0_iter5_reg <= p_Val2_3_reg_381_pp0_iter4_reg;
        tg22x_1_reg_392_pp0_iter6_reg <= tg22x_1_reg_392;
        tmp_36_reg_376_pp0_iter2_reg <= tmp_36_reg_376;
        tmp_36_reg_376_pp0_iter3_reg <= tmp_36_reg_376_pp0_iter2_reg;
        tmp_36_reg_376_pp0_iter4_reg <= tmp_36_reg_376_pp0_iter3_reg;
        tmp_36_reg_376_pp0_iter5_reg <= tmp_36_reg_376_pp0_iter4_reg;
        tmp_V_18_reg_357_pp0_iter2_reg <= tmp_V_18_reg_357;
        tmp_V_18_reg_357_pp0_iter3_reg <= tmp_V_18_reg_357_pp0_iter2_reg;
        tmp_V_18_reg_357_pp0_iter4_reg <= tmp_V_18_reg_357_pp0_iter3_reg;
        tmp_V_18_reg_357_pp0_iter5_reg <= tmp_V_18_reg_357_pp0_iter4_reg;
        tmp_V_18_reg_357_pp0_iter6_reg <= tmp_V_18_reg_357_pp0_iter5_reg;
        tmp_V_18_reg_357_pp0_iter7_reg <= tmp_V_18_reg_357_pp0_iter6_reg;
        tmp_V_19_reg_364_pp0_iter2_reg <= tmp_V_19_reg_364;
        tmp_V_19_reg_364_pp0_iter3_reg <= tmp_V_19_reg_364_pp0_iter2_reg;
        tmp_V_19_reg_364_pp0_iter4_reg <= tmp_V_19_reg_364_pp0_iter3_reg;
        tmp_V_19_reg_364_pp0_iter5_reg <= tmp_V_19_reg_364_pp0_iter4_reg;
        tmp_V_19_reg_364_pp0_iter6_reg <= tmp_V_19_reg_364_pp0_iter5_reg;
        tmp_V_19_reg_364_pp0_iter7_reg <= tmp_V_19_reg_364_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_343 <= i_V_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348_pp0_iter1_reg == 1'd0))) begin
        p_Val2_3_reg_381 <= p_Val2_3_fu_214_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348_pp0_iter6_reg == 1'd0))) begin
        sel_tmp2_reg_413 <= sel_tmp2_fu_281_p2;
        tmp_29_reg_408 <= tmp_29_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348_pp0_iter4_reg == 1'd0))) begin
        tg22x_1_reg_392 <= grp_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348_pp0_iter5_reg == 1'd0))) begin
        tg67x_reg_403 <= tg67x_fu_248_p2;
        tmp_5_reg_398 <= tmp_5_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_36_reg_376 <= p_src2_V_V_dout[32'd15];
        tmp_V_18_reg_357 <= p_src1_V_V_dout;
        tmp_V_19_reg_364 <= p_src2_V_V_dout;
        tmp_reg_371 <= p_src1_V_V_dout[32'd15];
    end
end

always @ (*) begin
    if ((exitcond_fu_181_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_327_ce = 1'b1;
    end else begin
        grp_fu_327_ce = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_348_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        p_dst_V_V_blk_n = p_dst_V_V_full_n;
    end else begin
        p_dst_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        p_dst_V_V_write = 1'b1;
    end else begin
        p_dst_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_348 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src1_V_V_blk_n = p_src1_V_V_empty_n;
    end else begin
        p_src1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src1_V_V_read = 1'b1;
    end else begin
        p_src1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_348 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src2_V_V_blk_n = p_src2_V_V_empty_n;
    end else begin
        p_src2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_348 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src2_V_V_read = 1'b1;
    end else begin
        p_src2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_181_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_181_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_reg_348_pp0_iter7_reg == 1'd0) & (p_dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_348 == 1'd0) & (p_src2_V_V_empty_n == 1'b0)) | ((exitcond_reg_348 == 1'd0) & (p_src1_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_reg_348_pp0_iter7_reg == 1'd0) & (p_dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_348 == 1'd0) & (p_src2_V_V_empty_n == 1'b0)) | ((exitcond_reg_348 == 1'd0) & (p_src1_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_reg_348_pp0_iter7_reg == 1'd0) & (p_dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_348 == 1'd0) & (p_src2_V_V_empty_n == 1'b0)) | ((exitcond_reg_348 == 1'd0) & (p_src1_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter8 = ((exitcond_reg_348_pp0_iter7_reg == 1'd0) & (p_dst_V_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_348 == 1'd0) & (p_src2_V_V_empty_n == 1'b0)) | ((exitcond_reg_348 == 1'd0) & (p_src1_V_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_fu_169_p2 = ((t_V_reg_147 == 10'd720) ? 1'b1 : 1'b0);

assign exitcond_fu_181_p2 = ((t_V_10_reg_158 == 11'd1280) ? 1'b1 : 1'b0);

assign grp_fu_327_p0 = grp_fu_327_p00;

assign grp_fu_327_p00 = p_Val2_3_reg_381;

assign grp_fu_327_p1 = 31'd13573;

assign i_V_fu_175_p2 = (t_V_reg_147 + 10'd1);

assign j_V_fu_187_p2 = (t_V_10_reg_158 + 11'd1);

assign newSel4_fu_310_p3 = ((tmp_37_fu_291_p3[0:0] === 1'b1) ? 8'd45 : 8'd135);

assign newSel_cast_cast_fu_299_p3 = ((sel_tmp2_reg_413[0:0] === 1'b1) ? 8'd90 : 8'd0);

assign or_cond_fu_306_p2 = (tmp_29_reg_408 | sel_tmp2_reg_413);

assign p_Val2_3_fu_214_p3 = ((tmp_reg_371[0:0] === 1'b1) ? tmp_27_fu_209_p2 : tmp_V_18_reg_357);

assign p_dst_V_V_din = ((or_cond_fu_306_p2[0:0] === 1'b1) ? newSel_cast_cast_fu_299_p3 : newSel4_fu_310_p3);

assign sel_tmp1_fu_275_p2 = (tmp_29_fu_265_p2 ^ 1'd1);

assign sel_tmp2_fu_281_p2 = (tmp_31_fu_270_p2 & sel_tmp1_fu_275_p2);

assign tg22x_1_cast1_fu_238_p1 = tg22x_1_reg_392;

assign tg67x_fu_248_p2 = (tmp_30_fu_241_p3 + tg22x_1_cast1_fu_238_p1);

assign tmp_27_fu_209_p2 = (16'd0 - tmp_V_18_reg_357);

assign tmp_28_fu_227_p2 = (16'd0 - tmp_V_19_reg_364_pp0_iter5_reg);

assign tmp_29_fu_265_p2 = ((ya_fu_254_p3 < tg22x_1_reg_392_pp0_iter6_reg) ? 1'b1 : 1'b0);

assign tmp_30_fu_241_p3 = {{p_Val2_3_reg_381_pp0_iter5_reg}, {16'd0}};

assign tmp_31_fu_270_p2 = (($signed(ya_cast_fu_261_p1) > $signed(tg67x_reg_403)) ? 1'b1 : 1'b0);

assign tmp_32_fu_287_p2 = (tmp_V_19_reg_364_pp0_iter7_reg ^ tmp_V_18_reg_357_pp0_iter7_reg);

assign tmp_37_fu_291_p3 = tmp_32_fu_287_p2[32'd15];

assign tmp_5_fu_232_p3 = ((tmp_36_reg_376_pp0_iter5_reg[0:0] === 1'b1) ? tmp_28_fu_227_p2 : tmp_V_19_reg_364_pp0_iter5_reg);

assign ya_cast_fu_261_p1 = ya_fu_254_p3;

assign ya_fu_254_p3 = {{tmp_5_reg_398}, {15'd0}};

endmodule //xFAngleKernel
