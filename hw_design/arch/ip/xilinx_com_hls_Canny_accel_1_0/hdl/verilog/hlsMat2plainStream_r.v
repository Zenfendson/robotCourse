// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hlsMat2plainStream_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mat_in_data_stream_0_V_dout,
        mat_in_data_stream_0_V_empty_n,
        mat_in_data_stream_0_V_read,
        mat_in_data_stream_1_V_dout,
        mat_in_data_stream_1_V_empty_n,
        mat_in_data_stream_1_V_read,
        mat_in_data_stream_2_V_dout,
        mat_in_data_stream_2_V_empty_n,
        mat_in_data_stream_2_V_read,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] mat_in_data_stream_0_V_dout;
input   mat_in_data_stream_0_V_empty_n;
output   mat_in_data_stream_0_V_read;
input  [7:0] mat_in_data_stream_1_V_dout;
input   mat_in_data_stream_1_V_empty_n;
output   mat_in_data_stream_1_V_read;
input  [7:0] mat_in_data_stream_2_V_dout;
input   mat_in_data_stream_2_V_empty_n;
output   mat_in_data_stream_2_V_read;
output  [23:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [2:0] out_stream_TKEEP;
output  [2:0] out_stream_TSTRB;
output  [0:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [0:0] out_stream_TID;
output  [0:0] out_stream_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_in_data_stream_0_V_read;
reg mat_in_data_stream_1_V_read;
reg mat_in_data_stream_2_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] strm_out_V_data_V_1_data_out;
reg    strm_out_V_data_V_1_vld_in;
wire    strm_out_V_data_V_1_vld_out;
wire    strm_out_V_data_V_1_ack_in;
wire    strm_out_V_data_V_1_ack_out;
reg   [23:0] strm_out_V_data_V_1_payload_A;
reg   [23:0] strm_out_V_data_V_1_payload_B;
reg    strm_out_V_data_V_1_sel_rd;
reg    strm_out_V_data_V_1_sel_wr;
wire    strm_out_V_data_V_1_sel;
wire    strm_out_V_data_V_1_load_A;
wire    strm_out_V_data_V_1_load_B;
reg   [1:0] strm_out_V_data_V_1_state;
wire    strm_out_V_data_V_1_state_cmp_full;
wire   [2:0] strm_out_V_keep_V_1_data_out;
reg    strm_out_V_keep_V_1_vld_in;
wire    strm_out_V_keep_V_1_vld_out;
wire    strm_out_V_keep_V_1_ack_in;
wire    strm_out_V_keep_V_1_ack_out;
reg    strm_out_V_keep_V_1_sel_rd;
wire    strm_out_V_keep_V_1_sel;
reg   [1:0] strm_out_V_keep_V_1_state;
wire   [2:0] strm_out_V_strb_V_1_data_out;
reg    strm_out_V_strb_V_1_vld_in;
wire    strm_out_V_strb_V_1_vld_out;
wire    strm_out_V_strb_V_1_ack_in;
wire    strm_out_V_strb_V_1_ack_out;
reg    strm_out_V_strb_V_1_sel_rd;
wire    strm_out_V_strb_V_1_sel;
reg   [1:0] strm_out_V_strb_V_1_state;
wire   [0:0] strm_out_V_user_V_1_data_out;
reg    strm_out_V_user_V_1_vld_in;
wire    strm_out_V_user_V_1_vld_out;
wire    strm_out_V_user_V_1_ack_in;
wire    strm_out_V_user_V_1_ack_out;
reg    strm_out_V_user_V_1_sel_rd;
wire    strm_out_V_user_V_1_sel;
reg   [1:0] strm_out_V_user_V_1_state;
reg   [0:0] strm_out_V_last_V_1_data_out;
reg    strm_out_V_last_V_1_vld_in;
wire    strm_out_V_last_V_1_vld_out;
wire    strm_out_V_last_V_1_ack_in;
wire    strm_out_V_last_V_1_ack_out;
reg   [0:0] strm_out_V_last_V_1_payload_A;
reg   [0:0] strm_out_V_last_V_1_payload_B;
reg    strm_out_V_last_V_1_sel_rd;
reg    strm_out_V_last_V_1_sel_wr;
wire    strm_out_V_last_V_1_sel;
wire    strm_out_V_last_V_1_load_A;
wire    strm_out_V_last_V_1_load_B;
reg   [1:0] strm_out_V_last_V_1_state;
wire    strm_out_V_last_V_1_state_cmp_full;
wire   [0:0] strm_out_V_id_V_1_data_out;
reg    strm_out_V_id_V_1_vld_in;
wire    strm_out_V_id_V_1_vld_out;
wire    strm_out_V_id_V_1_ack_in;
wire    strm_out_V_id_V_1_ack_out;
reg    strm_out_V_id_V_1_sel_rd;
wire    strm_out_V_id_V_1_sel;
reg   [1:0] strm_out_V_id_V_1_state;
wire   [0:0] strm_out_V_dest_V_1_data_out;
reg    strm_out_V_dest_V_1_vld_in;
wire    strm_out_V_dest_V_1_vld_out;
wire    strm_out_V_dest_V_1_ack_in;
wire    strm_out_V_dest_V_1_ack_out;
reg    strm_out_V_dest_V_1_sel_rd;
wire    strm_out_V_dest_V_1_sel;
reg   [1:0] strm_out_V_dest_V_1_state;
reg    mat_in_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_256;
reg    mat_in_data_stream_1_V_blk_n;
reg    mat_in_data_stream_2_V_blk_n;
reg    out_stream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_256_pp0_iter1_reg;
reg   [10:0] j_reg_179;
wire   [0:0] exitcond1_fu_190_p2;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [9:0] i_1_fu_196_p2;
reg   [9:0] i_1_reg_246;
wire   [0:0] tmp_s_fu_202_p2;
reg   [0:0] tmp_s_reg_251;
wire   [0:0] exitcond_fu_208_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_1_fu_214_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_226_p2;
reg   [0:0] tmp_last_V_reg_265;
wire   [23:0] p_Result_s_fu_231_p4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] i_reg_168;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_20_fu_220_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 strm_out_V_data_V_1_sel_rd = 1'b0;
#0 strm_out_V_data_V_1_sel_wr = 1'b0;
#0 strm_out_V_data_V_1_state = 2'd0;
#0 strm_out_V_keep_V_1_sel_rd = 1'b0;
#0 strm_out_V_keep_V_1_state = 2'd0;
#0 strm_out_V_strb_V_1_sel_rd = 1'b0;
#0 strm_out_V_strb_V_1_state = 2'd0;
#0 strm_out_V_user_V_1_sel_rd = 1'b0;
#0 strm_out_V_user_V_1_state = 2'd0;
#0 strm_out_V_last_V_1_sel_rd = 1'b0;
#0 strm_out_V_last_V_1_sel_wr = 1'b0;
#0 strm_out_V_last_V_1_state = 2'd0;
#0 strm_out_V_id_V_1_sel_rd = 1'b0;
#0 strm_out_V_id_V_1_state = 2'd0;
#0 strm_out_V_dest_V_1_sel_rd = 1'b0;
#0 strm_out_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((strm_out_V_data_V_1_ack_out == 1'b1) & (strm_out_V_data_V_1_vld_out == 1'b1))) begin
            strm_out_V_data_V_1_sel_rd <= ~strm_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((strm_out_V_data_V_1_ack_in == 1'b1) & (strm_out_V_data_V_1_vld_in == 1'b1))) begin
            strm_out_V_data_V_1_sel_wr <= ~strm_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((strm_out_V_data_V_1_state == 2'd2) & (strm_out_V_data_V_1_vld_in == 1'b0)) | ((strm_out_V_data_V_1_state == 2'd3) & (strm_out_V_data_V_1_vld_in == 1'b0) & (strm_out_V_data_V_1_ack_out == 1'b1)))) begin
            strm_out_V_data_V_1_state <= 2'd2;
        end else if ((((strm_out_V_data_V_1_state == 2'd1) & (strm_out_V_data_V_1_ack_out == 1'b0)) | ((strm_out_V_data_V_1_state == 2'd3) & (strm_out_V_data_V_1_ack_out == 1'b0) & (strm_out_V_data_V_1_vld_in == 1'b1)))) begin
            strm_out_V_data_V_1_state <= 2'd1;
        end else if (((~((strm_out_V_data_V_1_vld_in == 1'b0) & (strm_out_V_data_V_1_ack_out == 1'b1)) & ~((strm_out_V_data_V_1_ack_out == 1'b0) & (strm_out_V_data_V_1_vld_in == 1'b1)) & (strm_out_V_data_V_1_state == 2'd3)) | ((strm_out_V_data_V_1_state == 2'd1) & (strm_out_V_data_V_1_ack_out == 1'b1)) | ((strm_out_V_data_V_1_state == 2'd2) & (strm_out_V_data_V_1_vld_in == 1'b1)))) begin
            strm_out_V_data_V_1_state <= 2'd3;
        end else begin
            strm_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((strm_out_V_dest_V_1_ack_out == 1'b1) & (strm_out_V_dest_V_1_vld_out == 1'b1))) begin
            strm_out_V_dest_V_1_sel_rd <= ~strm_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((strm_out_V_dest_V_1_state == 2'd2) & (strm_out_V_dest_V_1_vld_in == 1'b0)) | ((strm_out_V_dest_V_1_state == 2'd3) & (strm_out_V_dest_V_1_vld_in == 1'b0) & (strm_out_V_dest_V_1_ack_out == 1'b1)))) begin
            strm_out_V_dest_V_1_state <= 2'd2;
        end else if ((((strm_out_V_dest_V_1_state == 2'd1) & (strm_out_V_dest_V_1_ack_out == 1'b0)) | ((strm_out_V_dest_V_1_state == 2'd3) & (strm_out_V_dest_V_1_ack_out == 1'b0) & (strm_out_V_dest_V_1_vld_in == 1'b1)))) begin
            strm_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((strm_out_V_dest_V_1_vld_in == 1'b0) & (strm_out_V_dest_V_1_ack_out == 1'b1)) & ~((strm_out_V_dest_V_1_ack_out == 1'b0) & (strm_out_V_dest_V_1_vld_in == 1'b1)) & (strm_out_V_dest_V_1_state == 2'd3)) | ((strm_out_V_dest_V_1_state == 2'd1) & (strm_out_V_dest_V_1_ack_out == 1'b1)) | ((strm_out_V_dest_V_1_state == 2'd2) & (strm_out_V_dest_V_1_vld_in == 1'b1)))) begin
            strm_out_V_dest_V_1_state <= 2'd3;
        end else begin
            strm_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((strm_out_V_id_V_1_ack_out == 1'b1) & (strm_out_V_id_V_1_vld_out == 1'b1))) begin
            strm_out_V_id_V_1_sel_rd <= ~strm_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((strm_out_V_id_V_1_state == 2'd2) & (strm_out_V_id_V_1_vld_in == 1'b0)) | ((strm_out_V_id_V_1_state == 2'd3) & (strm_out_V_id_V_1_vld_in == 1'b0) & (strm_out_V_id_V_1_ack_out == 1'b1)))) begin
            strm_out_V_id_V_1_state <= 2'd2;
        end else if ((((strm_out_V_id_V_1_state == 2'd1) & (strm_out_V_id_V_1_ack_out == 1'b0)) | ((strm_out_V_id_V_1_state == 2'd3) & (strm_out_V_id_V_1_ack_out == 1'b0) & (strm_out_V_id_V_1_vld_in == 1'b1)))) begin
            strm_out_V_id_V_1_state <= 2'd1;
        end else if (((~((strm_out_V_id_V_1_vld_in == 1'b0) & (strm_out_V_id_V_1_ack_out == 1'b1)) & ~((strm_out_V_id_V_1_ack_out == 1'b0) & (strm_out_V_id_V_1_vld_in == 1'b1)) & (strm_out_V_id_V_1_state == 2'd3)) | ((strm_out_V_id_V_1_state == 2'd1) & (strm_out_V_id_V_1_ack_out == 1'b1)) | ((strm_out_V_id_V_1_state == 2'd2) & (strm_out_V_id_V_1_vld_in == 1'b1)))) begin
            strm_out_V_id_V_1_state <= 2'd3;
        end else begin
            strm_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((strm_out_V_keep_V_1_ack_out == 1'b1) & (strm_out_V_keep_V_1_vld_out == 1'b1))) begin
            strm_out_V_keep_V_1_sel_rd <= ~strm_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((strm_out_V_keep_V_1_state == 2'd2) & (strm_out_V_keep_V_1_vld_in == 1'b0)) | ((strm_out_V_keep_V_1_state == 2'd3) & (strm_out_V_keep_V_1_vld_in == 1'b0) & (strm_out_V_keep_V_1_ack_out == 1'b1)))) begin
            strm_out_V_keep_V_1_state <= 2'd2;
        end else if ((((strm_out_V_keep_V_1_state == 2'd1) & (strm_out_V_keep_V_1_ack_out == 1'b0)) | ((strm_out_V_keep_V_1_state == 2'd3) & (strm_out_V_keep_V_1_ack_out == 1'b0) & (strm_out_V_keep_V_1_vld_in == 1'b1)))) begin
            strm_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((strm_out_V_keep_V_1_vld_in == 1'b0) & (strm_out_V_keep_V_1_ack_out == 1'b1)) & ~((strm_out_V_keep_V_1_ack_out == 1'b0) & (strm_out_V_keep_V_1_vld_in == 1'b1)) & (strm_out_V_keep_V_1_state == 2'd3)) | ((strm_out_V_keep_V_1_state == 2'd1) & (strm_out_V_keep_V_1_ack_out == 1'b1)) | ((strm_out_V_keep_V_1_state == 2'd2) & (strm_out_V_keep_V_1_vld_in == 1'b1)))) begin
            strm_out_V_keep_V_1_state <= 2'd3;
        end else begin
            strm_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((strm_out_V_last_V_1_ack_out == 1'b1) & (strm_out_V_last_V_1_vld_out == 1'b1))) begin
            strm_out_V_last_V_1_sel_rd <= ~strm_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((strm_out_V_last_V_1_ack_in == 1'b1) & (strm_out_V_last_V_1_vld_in == 1'b1))) begin
            strm_out_V_last_V_1_sel_wr <= ~strm_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((strm_out_V_last_V_1_state == 2'd2) & (strm_out_V_last_V_1_vld_in == 1'b0)) | ((strm_out_V_last_V_1_state == 2'd3) & (strm_out_V_last_V_1_vld_in == 1'b0) & (strm_out_V_last_V_1_ack_out == 1'b1)))) begin
            strm_out_V_last_V_1_state <= 2'd2;
        end else if ((((strm_out_V_last_V_1_state == 2'd1) & (strm_out_V_last_V_1_ack_out == 1'b0)) | ((strm_out_V_last_V_1_state == 2'd3) & (strm_out_V_last_V_1_ack_out == 1'b0) & (strm_out_V_last_V_1_vld_in == 1'b1)))) begin
            strm_out_V_last_V_1_state <= 2'd1;
        end else if (((~((strm_out_V_last_V_1_vld_in == 1'b0) & (strm_out_V_last_V_1_ack_out == 1'b1)) & ~((strm_out_V_last_V_1_ack_out == 1'b0) & (strm_out_V_last_V_1_vld_in == 1'b1)) & (strm_out_V_last_V_1_state == 2'd3)) | ((strm_out_V_last_V_1_state == 2'd1) & (strm_out_V_last_V_1_ack_out == 1'b1)) | ((strm_out_V_last_V_1_state == 2'd2) & (strm_out_V_last_V_1_vld_in == 1'b1)))) begin
            strm_out_V_last_V_1_state <= 2'd3;
        end else begin
            strm_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((strm_out_V_strb_V_1_ack_out == 1'b1) & (strm_out_V_strb_V_1_vld_out == 1'b1))) begin
            strm_out_V_strb_V_1_sel_rd <= ~strm_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((strm_out_V_strb_V_1_state == 2'd2) & (strm_out_V_strb_V_1_vld_in == 1'b0)) | ((strm_out_V_strb_V_1_state == 2'd3) & (strm_out_V_strb_V_1_vld_in == 1'b0) & (strm_out_V_strb_V_1_ack_out == 1'b1)))) begin
            strm_out_V_strb_V_1_state <= 2'd2;
        end else if ((((strm_out_V_strb_V_1_state == 2'd1) & (strm_out_V_strb_V_1_ack_out == 1'b0)) | ((strm_out_V_strb_V_1_state == 2'd3) & (strm_out_V_strb_V_1_ack_out == 1'b0) & (strm_out_V_strb_V_1_vld_in == 1'b1)))) begin
            strm_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((strm_out_V_strb_V_1_vld_in == 1'b0) & (strm_out_V_strb_V_1_ack_out == 1'b1)) & ~((strm_out_V_strb_V_1_ack_out == 1'b0) & (strm_out_V_strb_V_1_vld_in == 1'b1)) & (strm_out_V_strb_V_1_state == 2'd3)) | ((strm_out_V_strb_V_1_state == 2'd1) & (strm_out_V_strb_V_1_ack_out == 1'b1)) | ((strm_out_V_strb_V_1_state == 2'd2) & (strm_out_V_strb_V_1_vld_in == 1'b1)))) begin
            strm_out_V_strb_V_1_state <= 2'd3;
        end else begin
            strm_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((strm_out_V_user_V_1_ack_out == 1'b1) & (strm_out_V_user_V_1_vld_out == 1'b1))) begin
            strm_out_V_user_V_1_sel_rd <= ~strm_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((strm_out_V_user_V_1_state == 2'd2) & (strm_out_V_user_V_1_vld_in == 1'b0)) | ((strm_out_V_user_V_1_state == 2'd3) & (strm_out_V_user_V_1_vld_in == 1'b0) & (strm_out_V_user_V_1_ack_out == 1'b1)))) begin
            strm_out_V_user_V_1_state <= 2'd2;
        end else if ((((strm_out_V_user_V_1_state == 2'd1) & (strm_out_V_user_V_1_ack_out == 1'b0)) | ((strm_out_V_user_V_1_state == 2'd3) & (strm_out_V_user_V_1_ack_out == 1'b0) & (strm_out_V_user_V_1_vld_in == 1'b1)))) begin
            strm_out_V_user_V_1_state <= 2'd1;
        end else if (((~((strm_out_V_user_V_1_vld_in == 1'b0) & (strm_out_V_user_V_1_ack_out == 1'b1)) & ~((strm_out_V_user_V_1_ack_out == 1'b0) & (strm_out_V_user_V_1_vld_in == 1'b1)) & (strm_out_V_user_V_1_state == 2'd3)) | ((strm_out_V_user_V_1_state == 2'd1) & (strm_out_V_user_V_1_ack_out == 1'b1)) | ((strm_out_V_user_V_1_state == 2'd2) & (strm_out_V_user_V_1_vld_in == 1'b1)))) begin
            strm_out_V_user_V_1_state <= 2'd3;
        end else begin
            strm_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_168 <= i_1_reg_246;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_168 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_179 <= 11'd0;
    end else if (((exitcond_fu_208_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_179 <= j_1_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_256 <= exitcond_fu_208_p2;
        exitcond_reg_256_pp0_iter1_reg <= exitcond_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_246 <= i_1_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_out_V_data_V_1_load_A == 1'b1)) begin
        strm_out_V_data_V_1_payload_A <= p_Result_s_fu_231_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_out_V_data_V_1_load_B == 1'b1)) begin
        strm_out_V_data_V_1_payload_B <= p_Result_s_fu_231_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_out_V_last_V_1_load_A == 1'b1)) begin
        strm_out_V_last_V_1_payload_A <= tmp_last_V_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_out_V_last_V_1_load_B == 1'b1)) begin
        strm_out_V_last_V_1_payload_B <= tmp_last_V_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_208_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_265 <= tmp_last_V_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_251 <= tmp_s_fu_202_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_208_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_in_data_stream_0_V_blk_n = mat_in_data_stream_0_V_empty_n;
    end else begin
        mat_in_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_in_data_stream_0_V_read = 1'b1;
    end else begin
        mat_in_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_in_data_stream_1_V_blk_n = mat_in_data_stream_1_V_empty_n;
    end else begin
        mat_in_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_in_data_stream_1_V_read = 1'b1;
    end else begin
        mat_in_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_in_data_stream_2_V_blk_n = mat_in_data_stream_2_V_empty_n;
    end else begin
        mat_in_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_in_data_stream_2_V_read = 1'b1;
    end else begin
        mat_in_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_reg_256_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_stream_TDATA_blk_n = strm_out_V_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((strm_out_V_data_V_1_sel == 1'b1)) begin
        strm_out_V_data_V_1_data_out = strm_out_V_data_V_1_payload_B;
    end else begin
        strm_out_V_data_V_1_data_out = strm_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        strm_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        strm_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        strm_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        strm_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((strm_out_V_last_V_1_sel == 1'b1)) begin
        strm_out_V_last_V_1_data_out = strm_out_V_last_V_1_payload_B;
    end else begin
        strm_out_V_last_V_1_data_out = strm_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        strm_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        strm_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        strm_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0)) & (exitcond1_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_208_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_208_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((strm_out_V_data_V_1_ack_in == 1'b0) | (strm_out_V_dest_V_1_ack_in == 1'b0) | (strm_out_V_id_V_1_ack_in == 1'b0) | (strm_out_V_last_V_1_ack_in == 1'b0) | (strm_out_V_user_V_1_ack_in == 1'b0) | (strm_out_V_strb_V_1_ack_in == 1'b0) | (strm_out_V_keep_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((exitcond_reg_256 == 1'd0) & (strm_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_256 == 1'd0) & (mat_in_data_stream_0_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_io = ((exitcond_reg_256_pp0_iter1_reg == 1'd0) & (strm_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_fu_190_p2 = ((i_reg_168 == 10'd720) ? 1'b1 : 1'b0);

assign exitcond_fu_208_p2 = ((j_reg_179 == 11'd1280) ? 1'b1 : 1'b0);

assign i_1_fu_196_p2 = (i_reg_168 + 10'd1);

assign j_1_fu_214_p2 = (j_reg_179 + 11'd1);

assign out_stream_TDATA = strm_out_V_data_V_1_data_out;

assign out_stream_TDEST = strm_out_V_dest_V_1_data_out;

assign out_stream_TID = strm_out_V_id_V_1_data_out;

assign out_stream_TKEEP = strm_out_V_keep_V_1_data_out;

assign out_stream_TLAST = strm_out_V_last_V_1_data_out;

assign out_stream_TSTRB = strm_out_V_strb_V_1_data_out;

assign out_stream_TUSER = strm_out_V_user_V_1_data_out;

assign out_stream_TVALID = strm_out_V_dest_V_1_state[1'd0];

assign p_Result_s_fu_231_p4 = {{{mat_in_data_stream_2_V_dout}, {mat_in_data_stream_1_V_dout}}, {mat_in_data_stream_0_V_dout}};

assign strm_out_V_data_V_1_ack_in = strm_out_V_data_V_1_state[1'd1];

assign strm_out_V_data_V_1_ack_out = out_stream_TREADY;

assign strm_out_V_data_V_1_load_A = (strm_out_V_data_V_1_state_cmp_full & ~strm_out_V_data_V_1_sel_wr);

assign strm_out_V_data_V_1_load_B = (strm_out_V_data_V_1_state_cmp_full & strm_out_V_data_V_1_sel_wr);

assign strm_out_V_data_V_1_sel = strm_out_V_data_V_1_sel_rd;

assign strm_out_V_data_V_1_state_cmp_full = ((strm_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign strm_out_V_data_V_1_vld_out = strm_out_V_data_V_1_state[1'd0];

assign strm_out_V_dest_V_1_ack_in = strm_out_V_dest_V_1_state[1'd1];

assign strm_out_V_dest_V_1_ack_out = out_stream_TREADY;

assign strm_out_V_dest_V_1_data_out = 1'd0;

assign strm_out_V_dest_V_1_sel = strm_out_V_dest_V_1_sel_rd;

assign strm_out_V_dest_V_1_vld_out = strm_out_V_dest_V_1_state[1'd0];

assign strm_out_V_id_V_1_ack_in = strm_out_V_id_V_1_state[1'd1];

assign strm_out_V_id_V_1_ack_out = out_stream_TREADY;

assign strm_out_V_id_V_1_data_out = 1'd0;

assign strm_out_V_id_V_1_sel = strm_out_V_id_V_1_sel_rd;

assign strm_out_V_id_V_1_vld_out = strm_out_V_id_V_1_state[1'd0];

assign strm_out_V_keep_V_1_ack_in = strm_out_V_keep_V_1_state[1'd1];

assign strm_out_V_keep_V_1_ack_out = out_stream_TREADY;

assign strm_out_V_keep_V_1_data_out = 3'd0;

assign strm_out_V_keep_V_1_sel = strm_out_V_keep_V_1_sel_rd;

assign strm_out_V_keep_V_1_vld_out = strm_out_V_keep_V_1_state[1'd0];

assign strm_out_V_last_V_1_ack_in = strm_out_V_last_V_1_state[1'd1];

assign strm_out_V_last_V_1_ack_out = out_stream_TREADY;

assign strm_out_V_last_V_1_load_A = (strm_out_V_last_V_1_state_cmp_full & ~strm_out_V_last_V_1_sel_wr);

assign strm_out_V_last_V_1_load_B = (strm_out_V_last_V_1_state_cmp_full & strm_out_V_last_V_1_sel_wr);

assign strm_out_V_last_V_1_sel = strm_out_V_last_V_1_sel_rd;

assign strm_out_V_last_V_1_state_cmp_full = ((strm_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign strm_out_V_last_V_1_vld_out = strm_out_V_last_V_1_state[1'd0];

assign strm_out_V_strb_V_1_ack_in = strm_out_V_strb_V_1_state[1'd1];

assign strm_out_V_strb_V_1_ack_out = out_stream_TREADY;

assign strm_out_V_strb_V_1_data_out = 3'd0;

assign strm_out_V_strb_V_1_sel = strm_out_V_strb_V_1_sel_rd;

assign strm_out_V_strb_V_1_vld_out = strm_out_V_strb_V_1_state[1'd0];

assign strm_out_V_user_V_1_ack_in = strm_out_V_user_V_1_state[1'd1];

assign strm_out_V_user_V_1_ack_out = out_stream_TREADY;

assign strm_out_V_user_V_1_data_out = 1'd0;

assign strm_out_V_user_V_1_sel = strm_out_V_user_V_1_sel_rd;

assign strm_out_V_user_V_1_vld_out = strm_out_V_user_V_1_state[1'd0];

assign tmp_20_fu_220_p2 = ((j_reg_179 == 11'd1279) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_226_p2 = (tmp_s_reg_251 & tmp_20_fu_220_p2);

assign tmp_s_fu_202_p2 = ((i_reg_168 == 10'd719) ? 1'b1 : 1'b0);

endmodule //hlsMat2plainStream_r
