// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Canny_accel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=939231,HLS_SYN_TPT=939231,HLS_SYN_MEM=18,HLS_SYN_DSP=1,HLS_SYN_FF=3155,HLS_SYN_LUT=5835,HLS_VERSION=2018_3}" *)

module Canny_accel (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        in_strm_TDATA,
        in_strm_TKEEP,
        in_strm_TSTRB,
        in_strm_TUSER,
        in_strm_TLAST,
        in_strm_TID,
        in_strm_TDEST,
        out_strm_TDATA,
        out_strm_TKEEP,
        out_strm_TSTRB,
        out_strm_TUSER,
        out_strm_TLAST,
        out_strm_TID,
        out_strm_TDEST,
        in_strm_TVALID,
        in_strm_TREADY,
        out_strm_TVALID,
        out_strm_TREADY
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
input  [7:0] in_strm_TDATA;
input  [0:0] in_strm_TKEEP;
input  [0:0] in_strm_TSTRB;
input  [0:0] in_strm_TUSER;
input  [0:0] in_strm_TLAST;
input  [0:0] in_strm_TID;
input  [0:0] in_strm_TDEST;
output  [7:0] out_strm_TDATA;
output  [0:0] out_strm_TKEEP;
output  [0:0] out_strm_TSTRB;
output  [0:0] out_strm_TUSER;
output  [0:0] out_strm_TLAST;
output  [0:0] out_strm_TID;
output  [0:0] out_strm_TDEST;
input   in_strm_TVALID;
output   in_strm_TREADY;
output   out_strm_TVALID;
input   out_strm_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [7:0] low_threshold;
wire   [7:0] high_threshold;
wire    pre_process211_U0_ap_start;
wire    pre_process211_U0_ap_done;
wire    pre_process211_U0_ap_continue;
wire    pre_process211_U0_ap_idle;
wire    pre_process211_U0_ap_ready;
wire    pre_process211_U0_start_out;
wire    pre_process211_U0_start_write;
wire    pre_process211_U0_in_strm_TREADY;
wire   [7:0] pre_process211_U0_out_strm_V_V_din;
wire    pre_process211_U0_out_strm_V_V_write;
wire   [7:0] pre_process211_U0_low_threshold_out_din;
wire    pre_process211_U0_low_threshold_out_write;
wire   [7:0] pre_process211_U0_high_threshold_out_din;
wire    pre_process211_U0_high_threshold_out_write;
wire    xFCannyEdgeDetector_U0_ap_start;
wire    xFCannyEdgeDetector_U0_ap_done;
wire    xFCannyEdgeDetector_U0_ap_continue;
wire    xFCannyEdgeDetector_U0_ap_idle;
wire    xFCannyEdgeDetector_U0_ap_ready;
wire    xFCannyEdgeDetector_U0_start_out;
wire    xFCannyEdgeDetector_U0_start_write;
wire    xFCannyEdgeDetector_U0_p_src_mat_V_V_read;
wire   [1:0] xFCannyEdgeDetector_U0_out_strm_V_V_din;
wire    xFCannyEdgeDetector_U0_out_strm_V_V_write;
wire    xFCannyEdgeDetector_U0_p_lowthreshold_read;
wire    xFCannyEdgeDetector_U0_p_highthreshold_read;
wire    post_process_U0_ap_start;
wire    post_process_U0_ap_done;
wire    post_process_U0_ap_continue;
wire    post_process_U0_ap_idle;
wire    post_process_U0_ap_ready;
wire    post_process_U0_in_strm_V_V_read;
wire   [7:0] post_process_U0_out_strm_TDATA;
wire    post_process_U0_out_strm_TVALID;
wire   [0:0] post_process_U0_out_strm_TKEEP;
wire   [0:0] post_process_U0_out_strm_TSTRB;
wire   [0:0] post_process_U0_out_strm_TUSER;
wire   [0:0] post_process_U0_out_strm_TLAST;
wire   [0:0] post_process_U0_out_strm_TID;
wire   [0:0] post_process_U0_out_strm_TDEST;
wire    ap_sync_continue;
wire    strm_src_V_V_full_n;
wire   [7:0] strm_src_V_V_dout;
wire    strm_src_V_V_empty_n;
wire    low_threshold_c_full_n;
wire   [7:0] low_threshold_c_dout;
wire    low_threshold_c_empty_n;
wire    high_threshold_c_full_n;
wire   [7:0] high_threshold_c_dout;
wire    high_threshold_c_empty_n;
wire    strm_dst_V_V_full_n;
wire   [1:0] strm_dst_V_V_dout;
wire    strm_dst_V_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_xFCannyEdgeDetector_U0_din;
wire    start_for_xFCannyEdgeDetector_U0_full_n;
wire   [0:0] start_for_xFCannyEdgeDetector_U0_dout;
wire    start_for_xFCannyEdgeDetector_U0_empty_n;
wire   [0:0] start_for_post_process_U0_din;
wire    start_for_post_process_U0_full_n;
wire   [0:0] start_for_post_process_U0_dout;
wire    start_for_post_process_U0_empty_n;
wire    post_process_U0_start_full_n;
wire    post_process_U0_start_write;

Canny_accel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Canny_accel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .low_threshold(low_threshold),
    .high_threshold(high_threshold)
);

pre_process211 pre_process211_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(pre_process211_U0_ap_start),
    .start_full_n(start_for_xFCannyEdgeDetector_U0_full_n),
    .ap_done(pre_process211_U0_ap_done),
    .ap_continue(pre_process211_U0_ap_continue),
    .ap_idle(pre_process211_U0_ap_idle),
    .ap_ready(pre_process211_U0_ap_ready),
    .start_out(pre_process211_U0_start_out),
    .start_write(pre_process211_U0_start_write),
    .in_strm_TDATA(in_strm_TDATA),
    .in_strm_TVALID(in_strm_TVALID),
    .in_strm_TREADY(pre_process211_U0_in_strm_TREADY),
    .in_strm_TKEEP(in_strm_TKEEP),
    .in_strm_TSTRB(in_strm_TSTRB),
    .in_strm_TUSER(in_strm_TUSER),
    .in_strm_TLAST(in_strm_TLAST),
    .in_strm_TID(in_strm_TID),
    .in_strm_TDEST(in_strm_TDEST),
    .out_strm_V_V_din(pre_process211_U0_out_strm_V_V_din),
    .out_strm_V_V_full_n(strm_src_V_V_full_n),
    .out_strm_V_V_write(pre_process211_U0_out_strm_V_V_write),
    .low_threshold(low_threshold),
    .high_threshold(high_threshold),
    .low_threshold_out_din(pre_process211_U0_low_threshold_out_din),
    .low_threshold_out_full_n(low_threshold_c_full_n),
    .low_threshold_out_write(pre_process211_U0_low_threshold_out_write),
    .high_threshold_out_din(pre_process211_U0_high_threshold_out_din),
    .high_threshold_out_full_n(high_threshold_c_full_n),
    .high_threshold_out_write(pre_process211_U0_high_threshold_out_write)
);

xFCannyEdgeDetector xFCannyEdgeDetector_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(xFCannyEdgeDetector_U0_ap_start),
    .start_full_n(start_for_post_process_U0_full_n),
    .ap_done(xFCannyEdgeDetector_U0_ap_done),
    .ap_continue(xFCannyEdgeDetector_U0_ap_continue),
    .ap_idle(xFCannyEdgeDetector_U0_ap_idle),
    .ap_ready(xFCannyEdgeDetector_U0_ap_ready),
    .start_out(xFCannyEdgeDetector_U0_start_out),
    .start_write(xFCannyEdgeDetector_U0_start_write),
    .p_src_mat_V_V_dout(strm_src_V_V_dout),
    .p_src_mat_V_V_empty_n(strm_src_V_V_empty_n),
    .p_src_mat_V_V_read(xFCannyEdgeDetector_U0_p_src_mat_V_V_read),
    .out_strm_V_V_din(xFCannyEdgeDetector_U0_out_strm_V_V_din),
    .out_strm_V_V_full_n(strm_dst_V_V_full_n),
    .out_strm_V_V_write(xFCannyEdgeDetector_U0_out_strm_V_V_write),
    .p_lowthreshold_dout(low_threshold_c_dout),
    .p_lowthreshold_empty_n(low_threshold_c_empty_n),
    .p_lowthreshold_read(xFCannyEdgeDetector_U0_p_lowthreshold_read),
    .p_highthreshold_dout(high_threshold_c_dout),
    .p_highthreshold_empty_n(high_threshold_c_empty_n),
    .p_highthreshold_read(xFCannyEdgeDetector_U0_p_highthreshold_read)
);

post_process post_process_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(post_process_U0_ap_start),
    .ap_done(post_process_U0_ap_done),
    .ap_continue(post_process_U0_ap_continue),
    .ap_idle(post_process_U0_ap_idle),
    .ap_ready(post_process_U0_ap_ready),
    .in_strm_V_V_dout(strm_dst_V_V_dout),
    .in_strm_V_V_empty_n(strm_dst_V_V_empty_n),
    .in_strm_V_V_read(post_process_U0_in_strm_V_V_read),
    .out_strm_TDATA(post_process_U0_out_strm_TDATA),
    .out_strm_TVALID(post_process_U0_out_strm_TVALID),
    .out_strm_TREADY(out_strm_TREADY),
    .out_strm_TKEEP(post_process_U0_out_strm_TKEEP),
    .out_strm_TSTRB(post_process_U0_out_strm_TSTRB),
    .out_strm_TUSER(post_process_U0_out_strm_TUSER),
    .out_strm_TLAST(post_process_U0_out_strm_TLAST),
    .out_strm_TID(post_process_U0_out_strm_TID),
    .out_strm_TDEST(post_process_U0_out_strm_TDEST)
);

fifo_w8_d2_A_x strm_src_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pre_process211_U0_out_strm_V_V_din),
    .if_full_n(strm_src_V_V_full_n),
    .if_write(pre_process211_U0_out_strm_V_V_write),
    .if_dout(strm_src_V_V_dout),
    .if_empty_n(strm_src_V_V_empty_n),
    .if_read(xFCannyEdgeDetector_U0_p_src_mat_V_V_read)
);

fifo_w8_d2_A_x low_threshold_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pre_process211_U0_low_threshold_out_din),
    .if_full_n(low_threshold_c_full_n),
    .if_write(pre_process211_U0_low_threshold_out_write),
    .if_dout(low_threshold_c_dout),
    .if_empty_n(low_threshold_c_empty_n),
    .if_read(xFCannyEdgeDetector_U0_p_lowthreshold_read)
);

fifo_w8_d2_A_x high_threshold_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pre_process211_U0_high_threshold_out_din),
    .if_full_n(high_threshold_c_full_n),
    .if_write(pre_process211_U0_high_threshold_out_write),
    .if_dout(high_threshold_c_dout),
    .if_empty_n(high_threshold_c_empty_n),
    .if_read(xFCannyEdgeDetector_U0_p_highthreshold_read)
);

fifo_w2_d2_A strm_dst_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(xFCannyEdgeDetector_U0_out_strm_V_V_din),
    .if_full_n(strm_dst_V_V_full_n),
    .if_write(xFCannyEdgeDetector_U0_out_strm_V_V_write),
    .if_dout(strm_dst_V_V_dout),
    .if_empty_n(strm_dst_V_V_empty_n),
    .if_read(post_process_U0_in_strm_V_V_read)
);

start_for_xFCannysc4 start_for_xFCannysc4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_xFCannyEdgeDetector_U0_din),
    .if_full_n(start_for_xFCannyEdgeDetector_U0_full_n),
    .if_write(pre_process211_U0_start_write),
    .if_dout(start_for_xFCannyEdgeDetector_U0_dout),
    .if_empty_n(start_for_xFCannyEdgeDetector_U0_empty_n),
    .if_read(xFCannyEdgeDetector_U0_ap_ready)
);

start_for_post_prtde start_for_post_prtde_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_post_process_U0_din),
    .if_full_n(start_for_post_process_U0_full_n),
    .if_write(xFCannyEdgeDetector_U0_start_write),
    .if_dout(start_for_post_process_U0_dout),
    .if_empty_n(start_for_post_process_U0_empty_n),
    .if_read(post_process_U0_ap_ready)
);

assign ap_done = post_process_U0_ap_done;

assign ap_idle = (xFCannyEdgeDetector_U0_ap_idle & pre_process211_U0_ap_idle & post_process_U0_ap_idle);

assign ap_ready = pre_process211_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b1;

assign ap_sync_done = post_process_U0_ap_done;

assign ap_sync_ready = pre_process211_U0_ap_ready;

assign in_strm_TREADY = pre_process211_U0_in_strm_TREADY;

assign out_strm_TDATA = post_process_U0_out_strm_TDATA;

assign out_strm_TDEST = post_process_U0_out_strm_TDEST;

assign out_strm_TID = post_process_U0_out_strm_TID;

assign out_strm_TKEEP = post_process_U0_out_strm_TKEEP;

assign out_strm_TLAST = post_process_U0_out_strm_TLAST;

assign out_strm_TSTRB = post_process_U0_out_strm_TSTRB;

assign out_strm_TUSER = post_process_U0_out_strm_TUSER;

assign out_strm_TVALID = post_process_U0_out_strm_TVALID;

assign post_process_U0_ap_continue = 1'b1;

assign post_process_U0_ap_start = start_for_post_process_U0_empty_n;

assign post_process_U0_start_full_n = 1'b1;

assign post_process_U0_start_write = 1'b0;

assign pre_process211_U0_ap_continue = 1'b1;

assign pre_process211_U0_ap_start = ap_start;

assign start_for_post_process_U0_din = 1'b1;

assign start_for_xFCannyEdgeDetector_U0_din = 1'b1;

assign xFCannyEdgeDetector_U0_ap_continue = 1'b1;

assign xFCannyEdgeDetector_U0_ap_start = start_for_xFCannyEdgeDetector_U0_empty_n;

endmodule //Canny_accel
