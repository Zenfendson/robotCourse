// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module post_process (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_strm_V_V_dout,
        in_strm_V_V_empty_n,
        in_strm_V_V_read,
        out_strm_TDATA,
        out_strm_TVALID,
        out_strm_TREADY,
        out_strm_TKEEP,
        out_strm_TSTRB,
        out_strm_TUSER,
        out_strm_TLAST,
        out_strm_TID,
        out_strm_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1:0] in_strm_V_V_dout;
input   in_strm_V_V_empty_n;
output   in_strm_V_V_read;
output  [7:0] out_strm_TDATA;
output   out_strm_TVALID;
input   out_strm_TREADY;
output  [0:0] out_strm_TKEEP;
output  [0:0] out_strm_TSTRB;
output  [0:0] out_strm_TUSER;
output  [0:0] out_strm_TLAST;
output  [0:0] out_strm_TID;
output  [0:0] out_strm_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_strm_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] out_strm_V_data_V_1_data_out;
reg    out_strm_V_data_V_1_vld_in;
wire    out_strm_V_data_V_1_vld_out;
wire    out_strm_V_data_V_1_ack_in;
wire    out_strm_V_data_V_1_ack_out;
reg   [7:0] out_strm_V_data_V_1_payload_A;
reg   [7:0] out_strm_V_data_V_1_payload_B;
reg    out_strm_V_data_V_1_sel_rd;
reg    out_strm_V_data_V_1_sel_wr;
wire    out_strm_V_data_V_1_sel;
wire    out_strm_V_data_V_1_load_A;
wire    out_strm_V_data_V_1_load_B;
reg   [1:0] out_strm_V_data_V_1_state;
wire    out_strm_V_data_V_1_state_cmp_full;
wire   [0:0] out_strm_V_keep_V_1_data_out;
reg    out_strm_V_keep_V_1_vld_in;
wire    out_strm_V_keep_V_1_vld_out;
wire    out_strm_V_keep_V_1_ack_in;
wire    out_strm_V_keep_V_1_ack_out;
reg    out_strm_V_keep_V_1_sel_rd;
wire    out_strm_V_keep_V_1_sel;
reg   [1:0] out_strm_V_keep_V_1_state;
wire   [0:0] out_strm_V_strb_V_1_data_out;
reg    out_strm_V_strb_V_1_vld_in;
wire    out_strm_V_strb_V_1_vld_out;
wire    out_strm_V_strb_V_1_ack_in;
wire    out_strm_V_strb_V_1_ack_out;
reg    out_strm_V_strb_V_1_sel_rd;
wire    out_strm_V_strb_V_1_sel;
reg   [1:0] out_strm_V_strb_V_1_state;
wire   [0:0] out_strm_V_user_V_1_data_out;
reg    out_strm_V_user_V_1_vld_in;
wire    out_strm_V_user_V_1_vld_out;
wire    out_strm_V_user_V_1_ack_in;
wire    out_strm_V_user_V_1_ack_out;
reg    out_strm_V_user_V_1_sel_rd;
wire    out_strm_V_user_V_1_sel;
reg   [1:0] out_strm_V_user_V_1_state;
reg   [0:0] out_strm_V_last_V_1_data_out;
reg    out_strm_V_last_V_1_vld_in;
wire    out_strm_V_last_V_1_vld_out;
wire    out_strm_V_last_V_1_ack_in;
wire    out_strm_V_last_V_1_ack_out;
reg   [0:0] out_strm_V_last_V_1_payload_A;
reg   [0:0] out_strm_V_last_V_1_payload_B;
reg    out_strm_V_last_V_1_sel_rd;
reg    out_strm_V_last_V_1_sel_wr;
wire    out_strm_V_last_V_1_sel;
wire    out_strm_V_last_V_1_load_A;
wire    out_strm_V_last_V_1_load_B;
reg   [1:0] out_strm_V_last_V_1_state;
wire    out_strm_V_last_V_1_state_cmp_full;
wire   [0:0] out_strm_V_id_V_1_data_out;
reg    out_strm_V_id_V_1_vld_in;
wire    out_strm_V_id_V_1_vld_out;
wire    out_strm_V_id_V_1_ack_in;
wire    out_strm_V_id_V_1_ack_out;
reg    out_strm_V_id_V_1_sel_rd;
wire    out_strm_V_id_V_1_sel;
reg   [1:0] out_strm_V_id_V_1_state;
wire   [0:0] out_strm_V_dest_V_1_data_out;
reg    out_strm_V_dest_V_1_vld_in;
wire    out_strm_V_dest_V_1_vld_out;
wire    out_strm_V_dest_V_1_ack_in;
wire    out_strm_V_dest_V_1_ack_out;
reg    out_strm_V_dest_V_1_sel_rd;
wire    out_strm_V_dest_V_1_sel;
reg   [1:0] out_strm_V_dest_V_1_state;
reg    in_strm_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_270;
reg    out_strm_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_flatten_reg_270_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_flatten_reg_270_pp0_iter2_reg;
reg   [19:0] indvar_flatten_reg_130;
reg   [9:0] i_reg_141;
reg   [10:0] j_reg_152;
wire   [0:0] exitcond_flatten_fu_163_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [19:0] indvar_flatten_next_fu_169_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond7_fu_175_p2;
reg   [0:0] exitcond7_reg_279;
wire   [10:0] j_mid2_fu_181_p3;
reg   [10:0] j_mid2_reg_284;
wire   [9:0] i_s_fu_189_p2;
reg   [9:0] i_s_reg_289;
wire   [0:0] tmp4_fu_195_p2;
reg   [0:0] tmp4_reg_294;
wire   [9:0] i_mid2_fu_201_p3;
wire   [10:0] j_2_fu_209_p2;
reg   [1:0] tmp_V_reg_309;
wire   [0:0] tmp_last_V_fu_231_p2;
reg   [0:0] tmp_last_V_reg_315;
wire   [7:0] out_data_V_fu_261_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_mid1_fu_215_p2;
wire   [0:0] tmp_mid2_fu_220_p3;
wire   [0:0] tmp_35_fu_226_p2;
wire   [0:0] tmp_s_fu_237_p2;
wire   [0:0] tmp_34_fu_242_p2;
wire   [0:0] tmp_31_fu_255_p2;
wire   [7:0] storemerge_cast_fu_247_p3;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 out_strm_V_data_V_1_sel_rd = 1'b0;
#0 out_strm_V_data_V_1_sel_wr = 1'b0;
#0 out_strm_V_data_V_1_state = 2'd0;
#0 out_strm_V_keep_V_1_sel_rd = 1'b0;
#0 out_strm_V_keep_V_1_state = 2'd0;
#0 out_strm_V_strb_V_1_sel_rd = 1'b0;
#0 out_strm_V_strb_V_1_state = 2'd0;
#0 out_strm_V_user_V_1_sel_rd = 1'b0;
#0 out_strm_V_user_V_1_state = 2'd0;
#0 out_strm_V_last_V_1_sel_rd = 1'b0;
#0 out_strm_V_last_V_1_sel_wr = 1'b0;
#0 out_strm_V_last_V_1_state = 2'd0;
#0 out_strm_V_id_V_1_sel_rd = 1'b0;
#0 out_strm_V_id_V_1_state = 2'd0;
#0 out_strm_V_dest_V_1_sel_rd = 1'b0;
#0 out_strm_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_strm_V_dest_V_1_ack_in == 1'b0) | (out_strm_V_data_V_1_ack_in == 1'b0) | (out_strm_V_id_V_1_ack_in == 1'b0) | (out_strm_V_last_V_1_ack_in == 1'b0) | (out_strm_V_user_V_1_ack_in == 1'b0) | (out_strm_V_strb_V_1_ack_in == 1'b0) | (out_strm_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strm_V_data_V_1_ack_out == 1'b1) & (out_strm_V_data_V_1_vld_out == 1'b1))) begin
            out_strm_V_data_V_1_sel_rd <= ~out_strm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_strm_V_data_V_1_ack_in == 1'b1) & (out_strm_V_data_V_1_vld_in == 1'b1))) begin
            out_strm_V_data_V_1_sel_wr <= ~out_strm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_strm_V_data_V_1_state == 2'd2) & (out_strm_V_data_V_1_vld_in == 1'b0)) | ((out_strm_V_data_V_1_state == 2'd3) & (out_strm_V_data_V_1_vld_in == 1'b0) & (out_strm_V_data_V_1_ack_out == 1'b1)))) begin
            out_strm_V_data_V_1_state <= 2'd2;
        end else if ((((out_strm_V_data_V_1_state == 2'd1) & (out_strm_V_data_V_1_ack_out == 1'b0)) | ((out_strm_V_data_V_1_state == 2'd3) & (out_strm_V_data_V_1_ack_out == 1'b0) & (out_strm_V_data_V_1_vld_in == 1'b1)))) begin
            out_strm_V_data_V_1_state <= 2'd1;
        end else if (((~((out_strm_V_data_V_1_vld_in == 1'b0) & (out_strm_V_data_V_1_ack_out == 1'b1)) & ~((out_strm_V_data_V_1_ack_out == 1'b0) & (out_strm_V_data_V_1_vld_in == 1'b1)) & (out_strm_V_data_V_1_state == 2'd3)) | ((out_strm_V_data_V_1_state == 2'd1) & (out_strm_V_data_V_1_ack_out == 1'b1)) | ((out_strm_V_data_V_1_state == 2'd2) & (out_strm_V_data_V_1_vld_in == 1'b1)))) begin
            out_strm_V_data_V_1_state <= 2'd3;
        end else begin
            out_strm_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strm_V_dest_V_1_ack_out == 1'b1) & (out_strm_V_dest_V_1_vld_out == 1'b1))) begin
            out_strm_V_dest_V_1_sel_rd <= ~out_strm_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_strm_V_dest_V_1_state == 2'd2) & (out_strm_V_dest_V_1_vld_in == 1'b0)) | ((out_strm_V_dest_V_1_state == 2'd3) & (out_strm_V_dest_V_1_vld_in == 1'b0) & (out_strm_V_dest_V_1_ack_out == 1'b1)))) begin
            out_strm_V_dest_V_1_state <= 2'd2;
        end else if ((((out_strm_V_dest_V_1_state == 2'd1) & (out_strm_V_dest_V_1_ack_out == 1'b0)) | ((out_strm_V_dest_V_1_state == 2'd3) & (out_strm_V_dest_V_1_ack_out == 1'b0) & (out_strm_V_dest_V_1_vld_in == 1'b1)))) begin
            out_strm_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_strm_V_dest_V_1_vld_in == 1'b0) & (out_strm_V_dest_V_1_ack_out == 1'b1)) & ~((out_strm_V_dest_V_1_ack_out == 1'b0) & (out_strm_V_dest_V_1_vld_in == 1'b1)) & (out_strm_V_dest_V_1_state == 2'd3)) | ((out_strm_V_dest_V_1_state == 2'd1) & (out_strm_V_dest_V_1_ack_out == 1'b1)) | ((out_strm_V_dest_V_1_state == 2'd2) & (out_strm_V_dest_V_1_vld_in == 1'b1)))) begin
            out_strm_V_dest_V_1_state <= 2'd3;
        end else begin
            out_strm_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strm_V_id_V_1_ack_out == 1'b1) & (out_strm_V_id_V_1_vld_out == 1'b1))) begin
            out_strm_V_id_V_1_sel_rd <= ~out_strm_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_strm_V_id_V_1_state == 2'd2) & (out_strm_V_id_V_1_vld_in == 1'b0)) | ((out_strm_V_id_V_1_state == 2'd3) & (out_strm_V_id_V_1_vld_in == 1'b0) & (out_strm_V_id_V_1_ack_out == 1'b1)))) begin
            out_strm_V_id_V_1_state <= 2'd2;
        end else if ((((out_strm_V_id_V_1_state == 2'd1) & (out_strm_V_id_V_1_ack_out == 1'b0)) | ((out_strm_V_id_V_1_state == 2'd3) & (out_strm_V_id_V_1_ack_out == 1'b0) & (out_strm_V_id_V_1_vld_in == 1'b1)))) begin
            out_strm_V_id_V_1_state <= 2'd1;
        end else if (((~((out_strm_V_id_V_1_vld_in == 1'b0) & (out_strm_V_id_V_1_ack_out == 1'b1)) & ~((out_strm_V_id_V_1_ack_out == 1'b0) & (out_strm_V_id_V_1_vld_in == 1'b1)) & (out_strm_V_id_V_1_state == 2'd3)) | ((out_strm_V_id_V_1_state == 2'd1) & (out_strm_V_id_V_1_ack_out == 1'b1)) | ((out_strm_V_id_V_1_state == 2'd2) & (out_strm_V_id_V_1_vld_in == 1'b1)))) begin
            out_strm_V_id_V_1_state <= 2'd3;
        end else begin
            out_strm_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strm_V_keep_V_1_ack_out == 1'b1) & (out_strm_V_keep_V_1_vld_out == 1'b1))) begin
            out_strm_V_keep_V_1_sel_rd <= ~out_strm_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_strm_V_keep_V_1_state == 2'd2) & (out_strm_V_keep_V_1_vld_in == 1'b0)) | ((out_strm_V_keep_V_1_state == 2'd3) & (out_strm_V_keep_V_1_vld_in == 1'b0) & (out_strm_V_keep_V_1_ack_out == 1'b1)))) begin
            out_strm_V_keep_V_1_state <= 2'd2;
        end else if ((((out_strm_V_keep_V_1_state == 2'd1) & (out_strm_V_keep_V_1_ack_out == 1'b0)) | ((out_strm_V_keep_V_1_state == 2'd3) & (out_strm_V_keep_V_1_ack_out == 1'b0) & (out_strm_V_keep_V_1_vld_in == 1'b1)))) begin
            out_strm_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_strm_V_keep_V_1_vld_in == 1'b0) & (out_strm_V_keep_V_1_ack_out == 1'b1)) & ~((out_strm_V_keep_V_1_ack_out == 1'b0) & (out_strm_V_keep_V_1_vld_in == 1'b1)) & (out_strm_V_keep_V_1_state == 2'd3)) | ((out_strm_V_keep_V_1_state == 2'd1) & (out_strm_V_keep_V_1_ack_out == 1'b1)) | ((out_strm_V_keep_V_1_state == 2'd2) & (out_strm_V_keep_V_1_vld_in == 1'b1)))) begin
            out_strm_V_keep_V_1_state <= 2'd3;
        end else begin
            out_strm_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strm_V_last_V_1_ack_out == 1'b1) & (out_strm_V_last_V_1_vld_out == 1'b1))) begin
            out_strm_V_last_V_1_sel_rd <= ~out_strm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_strm_V_last_V_1_ack_in == 1'b1) & (out_strm_V_last_V_1_vld_in == 1'b1))) begin
            out_strm_V_last_V_1_sel_wr <= ~out_strm_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_strm_V_last_V_1_state == 2'd2) & (out_strm_V_last_V_1_vld_in == 1'b0)) | ((out_strm_V_last_V_1_state == 2'd3) & (out_strm_V_last_V_1_vld_in == 1'b0) & (out_strm_V_last_V_1_ack_out == 1'b1)))) begin
            out_strm_V_last_V_1_state <= 2'd2;
        end else if ((((out_strm_V_last_V_1_state == 2'd1) & (out_strm_V_last_V_1_ack_out == 1'b0)) | ((out_strm_V_last_V_1_state == 2'd3) & (out_strm_V_last_V_1_ack_out == 1'b0) & (out_strm_V_last_V_1_vld_in == 1'b1)))) begin
            out_strm_V_last_V_1_state <= 2'd1;
        end else if (((~((out_strm_V_last_V_1_vld_in == 1'b0) & (out_strm_V_last_V_1_ack_out == 1'b1)) & ~((out_strm_V_last_V_1_ack_out == 1'b0) & (out_strm_V_last_V_1_vld_in == 1'b1)) & (out_strm_V_last_V_1_state == 2'd3)) | ((out_strm_V_last_V_1_state == 2'd1) & (out_strm_V_last_V_1_ack_out == 1'b1)) | ((out_strm_V_last_V_1_state == 2'd2) & (out_strm_V_last_V_1_vld_in == 1'b1)))) begin
            out_strm_V_last_V_1_state <= 2'd3;
        end else begin
            out_strm_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strm_V_strb_V_1_ack_out == 1'b1) & (out_strm_V_strb_V_1_vld_out == 1'b1))) begin
            out_strm_V_strb_V_1_sel_rd <= ~out_strm_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_strm_V_strb_V_1_state == 2'd2) & (out_strm_V_strb_V_1_vld_in == 1'b0)) | ((out_strm_V_strb_V_1_state == 2'd3) & (out_strm_V_strb_V_1_vld_in == 1'b0) & (out_strm_V_strb_V_1_ack_out == 1'b1)))) begin
            out_strm_V_strb_V_1_state <= 2'd2;
        end else if ((((out_strm_V_strb_V_1_state == 2'd1) & (out_strm_V_strb_V_1_ack_out == 1'b0)) | ((out_strm_V_strb_V_1_state == 2'd3) & (out_strm_V_strb_V_1_ack_out == 1'b0) & (out_strm_V_strb_V_1_vld_in == 1'b1)))) begin
            out_strm_V_strb_V_1_state <= 2'd1;
        end else if (((~((out_strm_V_strb_V_1_vld_in == 1'b0) & (out_strm_V_strb_V_1_ack_out == 1'b1)) & ~((out_strm_V_strb_V_1_ack_out == 1'b0) & (out_strm_V_strb_V_1_vld_in == 1'b1)) & (out_strm_V_strb_V_1_state == 2'd3)) | ((out_strm_V_strb_V_1_state == 2'd1) & (out_strm_V_strb_V_1_ack_out == 1'b1)) | ((out_strm_V_strb_V_1_state == 2'd2) & (out_strm_V_strb_V_1_vld_in == 1'b1)))) begin
            out_strm_V_strb_V_1_state <= 2'd3;
        end else begin
            out_strm_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_strm_V_user_V_1_ack_out == 1'b1) & (out_strm_V_user_V_1_vld_out == 1'b1))) begin
            out_strm_V_user_V_1_sel_rd <= ~out_strm_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_strm_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_strm_V_user_V_1_state == 2'd2) & (out_strm_V_user_V_1_vld_in == 1'b0)) | ((out_strm_V_user_V_1_state == 2'd3) & (out_strm_V_user_V_1_vld_in == 1'b0) & (out_strm_V_user_V_1_ack_out == 1'b1)))) begin
            out_strm_V_user_V_1_state <= 2'd2;
        end else if ((((out_strm_V_user_V_1_state == 2'd1) & (out_strm_V_user_V_1_ack_out == 1'b0)) | ((out_strm_V_user_V_1_state == 2'd3) & (out_strm_V_user_V_1_ack_out == 1'b0) & (out_strm_V_user_V_1_vld_in == 1'b1)))) begin
            out_strm_V_user_V_1_state <= 2'd1;
        end else if (((~((out_strm_V_user_V_1_vld_in == 1'b0) & (out_strm_V_user_V_1_ack_out == 1'b1)) & ~((out_strm_V_user_V_1_ack_out == 1'b0) & (out_strm_V_user_V_1_vld_in == 1'b1)) & (out_strm_V_user_V_1_state == 2'd3)) | ((out_strm_V_user_V_1_state == 2'd1) & (out_strm_V_user_V_1_ack_out == 1'b1)) | ((out_strm_V_user_V_1_state == 2'd2) & (out_strm_V_user_V_1_vld_in == 1'b1)))) begin
            out_strm_V_user_V_1_state <= 2'd3;
        end else begin
            out_strm_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_141 <= i_mid2_fu_201_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_141 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_130 <= indvar_flatten_next_fu_169_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_130 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_152 <= j_2_fu_209_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_152 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond7_reg_279 <= exitcond7_fu_175_p2;
        i_s_reg_289 <= i_s_fu_189_p2;
        j_mid2_reg_284 <= j_mid2_fu_181_p3;
        tmp4_reg_294 <= tmp4_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_270 <= exitcond_flatten_fu_163_p2;
        exitcond_flatten_reg_270_pp0_iter1_reg <= exitcond_flatten_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_270_pp0_iter2_reg <= exitcond_flatten_reg_270_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strm_V_data_V_1_load_A == 1'b1)) begin
        out_strm_V_data_V_1_payload_A <= out_data_V_fu_261_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strm_V_data_V_1_load_B == 1'b1)) begin
        out_strm_V_data_V_1_payload_B <= out_data_V_fu_261_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strm_V_last_V_1_load_A == 1'b1)) begin
        out_strm_V_last_V_1_payload_A <= tmp_last_V_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if ((out_strm_V_last_V_1_load_B == 1'b1)) begin
        out_strm_V_last_V_1_payload_B <= tmp_last_V_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_reg_309 <= in_strm_V_V_dout;
        tmp_last_V_reg_315 <= tmp_last_V_fu_231_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_163_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_strm_V_dest_V_1_ack_in == 1'b0) | (out_strm_V_data_V_1_ack_in == 1'b0) | (out_strm_V_id_V_1_ack_in == 1'b0) | (out_strm_V_last_V_1_ack_in == 1'b0) | (out_strm_V_user_V_1_ack_in == 1'b0) | (out_strm_V_strb_V_1_ack_in == 1'b0) | (out_strm_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_strm_V_dest_V_1_ack_in == 1'b0) | (out_strm_V_data_V_1_ack_in == 1'b0) | (out_strm_V_id_V_1_ack_in == 1'b0) | (out_strm_V_last_V_1_ack_in == 1'b0) | (out_strm_V_user_V_1_ack_in == 1'b0) | (out_strm_V_strb_V_1_ack_in == 1'b0) | (out_strm_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_strm_V_V_blk_n = in_strm_V_V_empty_n;
    end else begin
        in_strm_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_strm_V_V_read = 1'b1;
    end else begin
        in_strm_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_270_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        out_strm_TDATA_blk_n = out_strm_V_data_V_1_state[1'd1];
    end else begin
        out_strm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_strm_V_data_V_1_sel == 1'b1)) begin
        out_strm_V_data_V_1_data_out = out_strm_V_data_V_1_payload_B;
    end else begin
        out_strm_V_data_V_1_data_out = out_strm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_strm_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_strm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_strm_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_strm_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_strm_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_strm_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_strm_V_keep_V_1_vld_in = 1'b1;
    end else begin
        out_strm_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_strm_V_last_V_1_sel == 1'b1)) begin
        out_strm_V_last_V_1_data_out = out_strm_V_last_V_1_payload_B;
    end else begin
        out_strm_V_last_V_1_data_out = out_strm_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_strm_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_strm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_strm_V_strb_V_1_vld_in = 1'b1;
    end else begin
        out_strm_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_strm_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_strm_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_163_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_163_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_strm_V_dest_V_1_ack_in == 1'b0) | (out_strm_V_data_V_1_ack_in == 1'b0) | (out_strm_V_id_V_1_ack_in == 1'b0) | (out_strm_V_last_V_1_ack_in == 1'b0) | (out_strm_V_user_V_1_ack_in == 1'b0) | (out_strm_V_strb_V_1_ack_in == 1'b0) | (out_strm_V_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_flatten_reg_270 == 1'd0) & (in_strm_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_flatten_reg_270 == 1'd0) & (in_strm_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_flatten_reg_270 == 1'd0) & (in_strm_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_270 == 1'd0) & (in_strm_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((exitcond_flatten_reg_270_pp0_iter1_reg == 1'd0) & (out_strm_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond_flatten_reg_270_pp0_iter2_reg == 1'd0) & (out_strm_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((out_strm_V_dest_V_1_ack_in == 1'b0) | (out_strm_V_data_V_1_ack_in == 1'b0) | (out_strm_V_id_V_1_ack_in == 1'b0) | (out_strm_V_last_V_1_ack_in == 1'b0) | (out_strm_V_user_V_1_ack_in == 1'b0) | (out_strm_V_strb_V_1_ack_in == 1'b0) | (out_strm_V_keep_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond7_fu_175_p2 = ((j_reg_152 == 11'd1280) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_163_p2 = ((indvar_flatten_reg_130 == 20'd921600) ? 1'b1 : 1'b0);

assign i_mid2_fu_201_p3 = ((exitcond7_fu_175_p2[0:0] === 1'b1) ? i_s_fu_189_p2 : i_reg_141);

assign i_s_fu_189_p2 = (i_reg_141 + 10'd1);

assign indvar_flatten_next_fu_169_p2 = (indvar_flatten_reg_130 + 20'd1);

assign j_2_fu_209_p2 = (j_mid2_fu_181_p3 + 11'd1);

assign j_mid2_fu_181_p3 = ((exitcond7_fu_175_p2[0:0] === 1'b1) ? 11'd0 : j_reg_152);

assign out_data_V_fu_261_p3 = ((tmp_31_fu_255_p2[0:0] === 1'b1) ? storemerge_cast_fu_247_p3 : 8'd255);

assign out_strm_TDATA = out_strm_V_data_V_1_data_out;

assign out_strm_TDEST = out_strm_V_dest_V_1_data_out;

assign out_strm_TID = out_strm_V_id_V_1_data_out;

assign out_strm_TKEEP = out_strm_V_keep_V_1_data_out;

assign out_strm_TLAST = out_strm_V_last_V_1_data_out;

assign out_strm_TSTRB = out_strm_V_strb_V_1_data_out;

assign out_strm_TUSER = out_strm_V_user_V_1_data_out;

assign out_strm_TVALID = out_strm_V_dest_V_1_state[1'd0];

assign out_strm_V_data_V_1_ack_in = out_strm_V_data_V_1_state[1'd1];

assign out_strm_V_data_V_1_ack_out = out_strm_TREADY;

assign out_strm_V_data_V_1_load_A = (out_strm_V_data_V_1_state_cmp_full & ~out_strm_V_data_V_1_sel_wr);

assign out_strm_V_data_V_1_load_B = (out_strm_V_data_V_1_state_cmp_full & out_strm_V_data_V_1_sel_wr);

assign out_strm_V_data_V_1_sel = out_strm_V_data_V_1_sel_rd;

assign out_strm_V_data_V_1_state_cmp_full = ((out_strm_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_strm_V_data_V_1_vld_out = out_strm_V_data_V_1_state[1'd0];

assign out_strm_V_dest_V_1_ack_in = out_strm_V_dest_V_1_state[1'd1];

assign out_strm_V_dest_V_1_ack_out = out_strm_TREADY;

assign out_strm_V_dest_V_1_data_out = 1'd0;

assign out_strm_V_dest_V_1_sel = out_strm_V_dest_V_1_sel_rd;

assign out_strm_V_dest_V_1_vld_out = out_strm_V_dest_V_1_state[1'd0];

assign out_strm_V_id_V_1_ack_in = out_strm_V_id_V_1_state[1'd1];

assign out_strm_V_id_V_1_ack_out = out_strm_TREADY;

assign out_strm_V_id_V_1_data_out = 1'd0;

assign out_strm_V_id_V_1_sel = out_strm_V_id_V_1_sel_rd;

assign out_strm_V_id_V_1_vld_out = out_strm_V_id_V_1_state[1'd0];

assign out_strm_V_keep_V_1_ack_in = out_strm_V_keep_V_1_state[1'd1];

assign out_strm_V_keep_V_1_ack_out = out_strm_TREADY;

assign out_strm_V_keep_V_1_data_out = 1'd1;

assign out_strm_V_keep_V_1_sel = out_strm_V_keep_V_1_sel_rd;

assign out_strm_V_keep_V_1_vld_out = out_strm_V_keep_V_1_state[1'd0];

assign out_strm_V_last_V_1_ack_in = out_strm_V_last_V_1_state[1'd1];

assign out_strm_V_last_V_1_ack_out = out_strm_TREADY;

assign out_strm_V_last_V_1_load_A = (out_strm_V_last_V_1_state_cmp_full & ~out_strm_V_last_V_1_sel_wr);

assign out_strm_V_last_V_1_load_B = (out_strm_V_last_V_1_state_cmp_full & out_strm_V_last_V_1_sel_wr);

assign out_strm_V_last_V_1_sel = out_strm_V_last_V_1_sel_rd;

assign out_strm_V_last_V_1_state_cmp_full = ((out_strm_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_strm_V_last_V_1_vld_out = out_strm_V_last_V_1_state[1'd0];

assign out_strm_V_strb_V_1_ack_in = out_strm_V_strb_V_1_state[1'd1];

assign out_strm_V_strb_V_1_ack_out = out_strm_TREADY;

assign out_strm_V_strb_V_1_data_out = 1'd0;

assign out_strm_V_strb_V_1_sel = out_strm_V_strb_V_1_sel_rd;

assign out_strm_V_strb_V_1_vld_out = out_strm_V_strb_V_1_state[1'd0];

assign out_strm_V_user_V_1_ack_in = out_strm_V_user_V_1_state[1'd1];

assign out_strm_V_user_V_1_ack_out = out_strm_TREADY;

assign out_strm_V_user_V_1_data_out = 1'd0;

assign out_strm_V_user_V_1_sel = out_strm_V_user_V_1_sel_rd;

assign out_strm_V_user_V_1_vld_out = out_strm_V_user_V_1_state[1'd0];

assign storemerge_cast_fu_247_p3 = ((tmp_s_fu_237_p2[0:0] === 1'b1) ? 8'd0 : 8'd127);

assign tmp4_fu_195_p2 = ((i_reg_141 == 10'd719) ? 1'b1 : 1'b0);

assign tmp_31_fu_255_p2 = (tmp_s_fu_237_p2 | tmp_34_fu_242_p2);

assign tmp_34_fu_242_p2 = ((tmp_V_reg_309 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_35_fu_226_p2 = ((j_mid2_reg_284 == 11'd1279) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_231_p2 = (tmp_mid2_fu_220_p3 & tmp_35_fu_226_p2);

assign tmp_mid1_fu_215_p2 = ((i_s_reg_289 == 10'd719) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_220_p3 = ((exitcond7_reg_279[0:0] === 1'b1) ? tmp_mid1_fu_215_p2 : tmp4_reg_294);

assign tmp_s_fu_237_p2 = ((tmp_V_reg_309 == 2'd0) ? 1'b1 : 1'b0);

endmodule //post_process
