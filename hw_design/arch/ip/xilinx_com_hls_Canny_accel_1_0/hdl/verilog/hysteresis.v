// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hysteresis (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        threshold_low_dout,
        threshold_low_empty_n,
        threshold_low_read,
        threshold_high_dout,
        threshold_high_empty_n,
        threshold_high_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
input  [31:0] threshold_low_dout;
input   threshold_low_empty_n;
output   threshold_low_read;
input  [31:0] threshold_high_dout;
input   threshold_high_empty_n;
output   threshold_high_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_data_stream_V_read;
reg dst_data_stream_V_write;
reg threshold_low_read;
reg threshold_high_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond_i_reg_852;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] or_cond7_i_reg_867;
reg   [0:0] or_cond7_i_reg_867_pp0_iter2_reg;
reg    threshold_low_blk_n;
reg    threshold_high_blk_n;
reg   [10:0] t_V_2_reg_259;
reg   [10:0] t_V_2_reg_259_pp0_iter1_reg;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] threshold_low_read_reg_789;
reg    ap_block_state1;
reg   [31:0] threshold_high_read_reg_794;
wire   [0:0] exitcond1_fu_271_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_V_fu_277_p2;
reg   [9:0] i_V_reg_811;
wire   [0:0] tmp_21_i_fu_283_p2;
reg   [0:0] tmp_21_i_reg_816;
wire   [0:0] icmp_fu_299_p2;
reg   [0:0] icmp_reg_821;
wire   [0:0] tmp_23_i_fu_305_p2;
reg   [0:0] tmp_23_i_reg_826;
wire   [0:0] tmp_24_i_fu_311_p2;
reg   [0:0] tmp_24_i_reg_831;
wire   [0:0] exitcond_fu_317_p2;
reg   [0:0] exitcond_reg_836;
reg   [0:0] exitcond_reg_836_pp0_iter1_reg;
wire   [10:0] j_V_fu_323_p2;
reg   [10:0] j_V_reg_840;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_26_i_fu_329_p2;
reg   [0:0] tmp_26_i_reg_845;
reg   [0:0] tmp_26_i_reg_845_pp0_iter1_reg;
wire   [0:0] or_cond_i_fu_335_p2;
reg   [0:0] or_cond_i_reg_852_pp0_iter1_reg;
reg   [10:0] linebuff_val_1_addr_reg_856;
reg   [10:0] linebuff_val_1_addr_reg_856_pp0_iter1_reg;
wire   [0:0] or_cond7_i_fu_352_p2;
reg   [0:0] or_cond7_i_reg_867_pp0_iter1_reg;
wire   [15:0] linebuff_val_0_q0;
reg   [15:0] tmp0_reg_871;
wire   [0:0] or_cond6_i_fu_461_p2;
reg   [0:0] or_cond6_i_reg_876;
wire   [0:0] tmp_34_i_fu_471_p2;
reg   [0:0] tmp_34_i_reg_881;
wire   [0:0] slt4_fu_564_p2;
reg   [0:0] slt4_reg_886;
wire   [0:0] slt5_fu_569_p2;
reg   [0:0] slt5_reg_891;
wire   [0:0] slt6_fu_574_p2;
reg   [0:0] slt6_reg_896;
wire   [0:0] slt7_fu_579_p2;
reg   [0:0] slt7_reg_901;
wire   [0:0] slt8_fu_584_p2;
reg   [0:0] slt8_reg_906;
wire   [0:0] tmp26_fu_607_p2;
reg   [0:0] tmp26_reg_911;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
wire   [10:0] linebuff_val_0_address0;
reg    linebuff_val_0_ce0;
wire   [10:0] linebuff_val_0_address1;
reg    linebuff_val_0_ce1;
reg    linebuff_val_0_we1;
wire   [10:0] linebuff_val_1_address0;
reg    linebuff_val_1_ce0;
wire   [15:0] linebuff_val_1_q0;
reg    linebuff_val_1_ce1;
reg    linebuff_val_1_we1;
reg   [9:0] t_V_reg_248;
wire    ap_CS_fsm_state7;
reg   [10:0] ap_phi_mux_t_V_2_phi_fu_263_p4;
wire   [63:0] tmp_29_i_fu_340_p1;
wire   [63:0] tmp_30_i_fu_376_p1;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] tmp1_i_fu_140;
reg   [15:0] tmp0_i_fu_144;
reg   [15:0] element_gd_i_fu_148;
reg   [15:0] win_val_0_1_fu_152;
wire   [15:0] win_val_0_0_0_win_va_fu_422_p3;
reg   [15:0] win_val_0_1_2_fu_156;
reg   [15:0] win_val_1_1_fu_160;
wire   [15:0] win_val_1_0_0_win_va_fu_415_p3;
reg   [15:0] win_val_1_1_2_fu_164;
reg   [15:0] win_val_2_1_fu_168;
wire   [15:0] win_val_2_0_0_win_va_fu_408_p3;
reg   [15:0] win_val_2_1_2_fu_172;
wire   [8:0] tmp_fu_289_p4;
wire   [0:0] tmp_53_i_fu_346_p2;
wire   [9:0] tmp_36_fu_429_p4;
wire   [0:0] icmp2_fu_439_p2;
wire   [0:0] tmp_32_i_fu_445_p2;
wire   [0:0] tmp22_fu_456_p2;
wire   [0:0] tmp21_fu_451_p2;
wire   [31:0] tmp_33_i_fu_467_p1;
wire   [0:0] sel_tmp6_demorgan_fu_508_p2;
wire   [0:0] slt_fu_520_p2;
wire   [31:0] tmp_36_i_fu_476_p1;
wire   [0:0] slt1_fu_531_p2;
wire   [31:0] tmp_38_i_fu_480_p1;
wire   [0:0] slt2_fu_542_p2;
wire   [31:0] tmp_40_i_fu_484_p1;
wire   [0:0] slt3_fu_553_p2;
wire   [31:0] tmp_42_i_fu_488_p1;
wire   [31:0] tmp_44_i_fu_492_p1;
wire   [31:0] tmp_46_i_fu_496_p1;
wire   [31:0] tmp_48_i_fu_500_p1;
wire   [31:0] tmp_50_i_fu_504_p1;
wire   [0:0] rev_fu_525_p2;
wire   [0:0] sel_tmp6_fu_514_p2;
wire   [0:0] rev2_fu_547_p2;
wire   [0:0] rev3_fu_558_p2;
wire   [0:0] tmp24_fu_595_p2;
wire   [0:0] rev1_fu_536_p2;
wire   [0:0] tmp25_fu_601_p2;
wire   [0:0] tmp23_fu_589_p2;
wire   [0:0] rev4_fu_652_p2;
wire   [0:0] rev5_fu_657_p2;
wire   [0:0] rev7_fu_667_p2;
wire   [0:0] rev8_fu_672_p2;
wire   [0:0] tmp28_fu_683_p2;
wire   [0:0] rev6_fu_662_p2;
wire   [0:0] tmp29_fu_689_p2;
wire   [0:0] tmp27_fu_677_p2;
wire   [0:0] tmp30_fu_695_p2;
wire   [0:0] sel_tmp4_fu_701_p2;
wire   [0:0] tmp31_fu_706_p2;
wire   [0:0] tmp_22_demorgan_fu_711_p2;
wire   [0:0] tmp_37_fu_716_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_0_address0),
    .ce0(linebuff_val_0_ce0),
    .q0(linebuff_val_0_q0),
    .address1(linebuff_val_0_address1),
    .ce1(linebuff_val_0_ce1),
    .we1(linebuff_val_0_we1),
    .d1(element_gd_i_fu_148)
);

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_1_address0),
    .ce0(linebuff_val_1_ce0),
    .q0(linebuff_val_1_q0),
    .address1(linebuff_val_1_addr_reg_856_pp0_iter1_reg),
    .ce1(linebuff_val_1_ce1),
    .we1(linebuff_val_1_we1),
    .d1(tmp0_reg_871)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((exitcond1_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_836 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_2_reg_259 <= j_V_reg_840;
    end else if (((exitcond1_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_2_reg_259 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_248 <= i_V_reg_811;
    end else if ((~((threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_248 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_i_reg_852 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        element_gd_i_fu_148 <= src_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_836 <= exitcond_fu_317_p2;
        exitcond_reg_836_pp0_iter1_reg <= exitcond_reg_836;
        linebuff_val_1_addr_reg_856_pp0_iter1_reg <= linebuff_val_1_addr_reg_856;
        or_cond7_i_reg_867_pp0_iter1_reg <= or_cond7_i_reg_867;
        or_cond_i_reg_852_pp0_iter1_reg <= or_cond_i_reg_852;
        t_V_2_reg_259_pp0_iter1_reg <= t_V_2_reg_259;
        tmp_26_i_reg_845_pp0_iter1_reg <= tmp_26_i_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_811 <= i_V_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_reg_821 <= icmp_fu_299_p2;
        tmp_21_i_reg_816 <= tmp_21_i_fu_283_p2;
        tmp_23_i_reg_826 <= tmp_23_i_fu_305_p2;
        tmp_24_i_reg_831 <= tmp_24_i_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_V_reg_840 <= j_V_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_317_p2 == 1'd0) & (tmp_26_i_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuff_val_1_addr_reg_856 <= tmp_29_i_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond6_i_reg_876 <= or_cond6_i_fu_461_p2;
        or_cond7_i_reg_867_pp0_iter2_reg <= or_cond7_i_reg_867_pp0_iter1_reg;
        slt4_reg_886 <= slt4_fu_564_p2;
        slt5_reg_891 <= slt5_fu_569_p2;
        slt6_reg_896 <= slt6_fu_574_p2;
        slt7_reg_901 <= slt7_fu_579_p2;
        slt8_reg_906 <= slt8_fu_584_p2;
        tmp26_reg_911 <= tmp26_fu_607_p2;
        tmp_34_i_reg_881 <= tmp_34_i_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond7_i_reg_867 <= or_cond7_i_fu_352_p2;
        or_cond_i_reg_852 <= or_cond_i_fu_335_p2;
        tmp_26_i_reg_845 <= tmp_26_i_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_high_read_reg_794 <= threshold_high_dout;
        threshold_low_read_reg_789 <= threshold_low_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_i_reg_845 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp0_i_fu_144 <= linebuff_val_0_q0;
        tmp0_reg_871 <= linebuff_val_0_q0;
        tmp1_i_fu_140 <= linebuff_val_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_836_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        win_val_0_1_2_fu_156 <= win_val_0_1_fu_152;
        win_val_0_1_fu_152 <= win_val_0_0_0_win_va_fu_422_p3;
        win_val_1_1_2_fu_164 <= win_val_1_1_fu_160;
        win_val_1_1_fu_160 <= win_val_1_0_0_win_va_fu_415_p3;
        win_val_2_1_2_fu_172 <= win_val_2_1_fu_168;
        win_val_2_1_fu_168 <= win_val_2_0_0_win_va_fu_408_p3;
    end
end

always @ (*) begin
    if ((exitcond_fu_317_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_V_2_phi_fu_263_p4 = j_V_reg_840;
    end else begin
        ap_phi_mux_t_V_2_phi_fu_263_p4 = t_V_2_reg_259;
    end
end

always @ (*) begin
    if (((or_cond7_i_reg_867_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_cond7_i_reg_867_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuff_val_0_ce0 = 1'b1;
    end else begin
        linebuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuff_val_0_ce1 = 1'b1;
    end else begin
        linebuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_852_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuff_val_0_we1 = 1'b1;
    end else begin
        linebuff_val_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuff_val_1_ce0 = 1'b1;
    end else begin
        linebuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuff_val_1_ce1 = 1'b1;
    end else begin
        linebuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_26_i_reg_845_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuff_val_1_we1 = 1'b1;
    end else begin
        linebuff_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_852 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_852 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_high_blk_n = threshold_high_empty_n;
    end else begin
        threshold_high_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_high_read = 1'b1;
    end else begin
        threshold_high_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_low_blk_n = threshold_low_empty_n;
    end else begin
        threshold_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_low_read = 1'b1;
    end else begin
        threshold_low_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_317_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_317_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_cond7_i_reg_867_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_852 == 1'd1) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_cond7_i_reg_867_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_852 == 1'd1) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_cond7_i_reg_867_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_852 == 1'd1) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((or_cond_i_reg_852 == 1'd1) & (src_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((or_cond7_i_reg_867_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dst_data_stream_V_din = ((tmp_37_fu_716_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign exitcond1_fu_271_p2 = ((t_V_reg_248 == 10'd721) ? 1'b1 : 1'b0);

assign exitcond_fu_317_p2 = ((ap_phi_mux_t_V_2_phi_fu_263_p4 == 11'd1281) ? 1'b1 : 1'b0);

assign i_V_fu_277_p2 = (t_V_reg_248 + 10'd1);

assign icmp2_fu_439_p2 = ((tmp_36_fu_429_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_fu_299_p2 = ((tmp_fu_289_p4 == 9'd0) ? 1'b1 : 1'b0);

assign j_V_fu_323_p2 = (ap_phi_mux_t_V_2_phi_fu_263_p4 + 11'd1);

assign linebuff_val_0_address0 = tmp_29_i_fu_340_p1;

assign linebuff_val_0_address1 = tmp_30_i_fu_376_p1;

assign linebuff_val_1_address0 = tmp_29_i_fu_340_p1;

assign or_cond6_i_fu_461_p2 = (tmp22_fu_456_p2 | tmp21_fu_451_p2);

assign or_cond7_i_fu_352_p2 = (tmp_53_i_fu_346_p2 | tmp_23_i_reg_826);

assign or_cond_i_fu_335_p2 = (tmp_26_i_fu_329_p2 & tmp_21_i_reg_816);

assign rev1_fu_536_p2 = (slt1_fu_531_p2 ^ 1'd1);

assign rev2_fu_547_p2 = (slt2_fu_542_p2 ^ 1'd1);

assign rev3_fu_558_p2 = (slt3_fu_553_p2 ^ 1'd1);

assign rev4_fu_652_p2 = (slt4_reg_886 ^ 1'd1);

assign rev5_fu_657_p2 = (slt5_reg_891 ^ 1'd1);

assign rev6_fu_662_p2 = (slt6_reg_896 ^ 1'd1);

assign rev7_fu_667_p2 = (slt7_reg_901 ^ 1'd1);

assign rev8_fu_672_p2 = (slt8_reg_906 ^ 1'd1);

assign rev_fu_525_p2 = (slt_fu_520_p2 ^ 1'd1);

assign sel_tmp4_fu_701_p2 = (tmp30_fu_695_p2 & tmp26_reg_911);

assign sel_tmp6_demorgan_fu_508_p2 = (tmp_34_i_fu_471_p2 | or_cond6_i_fu_461_p2);

assign sel_tmp6_fu_514_p2 = (sel_tmp6_demorgan_fu_508_p2 ^ 1'd1);

assign slt1_fu_531_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_36_i_fu_476_p1)) ? 1'b1 : 1'b0);

assign slt2_fu_542_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_38_i_fu_480_p1)) ? 1'b1 : 1'b0);

assign slt3_fu_553_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_40_i_fu_484_p1)) ? 1'b1 : 1'b0);

assign slt4_fu_564_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_42_i_fu_488_p1)) ? 1'b1 : 1'b0);

assign slt5_fu_569_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_44_i_fu_492_p1)) ? 1'b1 : 1'b0);

assign slt6_fu_574_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_46_i_fu_496_p1)) ? 1'b1 : 1'b0);

assign slt7_fu_579_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_48_i_fu_500_p1)) ? 1'b1 : 1'b0);

assign slt8_fu_584_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_50_i_fu_504_p1)) ? 1'b1 : 1'b0);

assign slt_fu_520_p2 = (($signed(threshold_high_read_reg_794) < $signed(tmp_33_i_fu_467_p1)) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign tmp21_fu_451_p2 = (tmp_24_i_reg_831 | icmp2_fu_439_p2);

assign tmp22_fu_456_p2 = (tmp_32_i_fu_445_p2 | icmp_reg_821);

assign tmp23_fu_589_p2 = (sel_tmp6_fu_514_p2 & rev_fu_525_p2);

assign tmp24_fu_595_p2 = (rev3_fu_558_p2 & rev2_fu_547_p2);

assign tmp25_fu_601_p2 = (tmp24_fu_595_p2 & rev1_fu_536_p2);

assign tmp26_fu_607_p2 = (tmp25_fu_601_p2 & tmp23_fu_589_p2);

assign tmp27_fu_677_p2 = (rev5_fu_657_p2 & rev4_fu_652_p2);

assign tmp28_fu_683_p2 = (rev8_fu_672_p2 & rev7_fu_667_p2);

assign tmp29_fu_689_p2 = (tmp28_fu_683_p2 & rev6_fu_662_p2);

assign tmp30_fu_695_p2 = (tmp29_fu_689_p2 & tmp27_fu_677_p2);

assign tmp31_fu_706_p2 = (sel_tmp4_fu_701_p2 | or_cond6_i_reg_876);

assign tmp_21_i_fu_283_p2 = ((t_V_reg_248 < 10'd720) ? 1'b1 : 1'b0);

assign tmp_22_demorgan_fu_711_p2 = (tmp_34_i_reg_881 | tmp31_fu_706_p2);

assign tmp_23_i_fu_305_p2 = ((t_V_reg_248 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_24_i_fu_311_p2 = ((t_V_reg_248 > 10'd719) ? 1'b1 : 1'b0);

assign tmp_26_i_fu_329_p2 = ((ap_phi_mux_t_V_2_phi_fu_263_p4 < 11'd1280) ? 1'b1 : 1'b0);

assign tmp_29_i_fu_340_p1 = ap_phi_mux_t_V_2_phi_fu_263_p4;

assign tmp_30_i_fu_376_p1 = t_V_2_reg_259_pp0_iter1_reg;

assign tmp_32_i_fu_445_p2 = ((t_V_2_reg_259_pp0_iter1_reg > 11'd1279) ? 1'b1 : 1'b0);

assign tmp_33_i_fu_467_p1 = win_val_1_1_fu_160;

assign tmp_34_i_fu_471_p2 = (($signed(tmp_33_i_fu_467_p1) < $signed(threshold_low_read_reg_789)) ? 1'b1 : 1'b0);

assign tmp_36_fu_429_p4 = {{t_V_2_reg_259_pp0_iter1_reg[10:1]}};

assign tmp_36_i_fu_476_p1 = win_val_0_0_0_win_va_fu_422_p3;

assign tmp_37_fu_716_p2 = (tmp_22_demorgan_fu_711_p2 ^ 1'd1);

assign tmp_38_i_fu_480_p1 = win_val_0_1_fu_152;

assign tmp_40_i_fu_484_p1 = win_val_0_1_2_fu_156;

assign tmp_42_i_fu_488_p1 = win_val_1_0_0_win_va_fu_415_p3;

assign tmp_44_i_fu_492_p1 = win_val_1_1_2_fu_164;

assign tmp_46_i_fu_496_p1 = win_val_2_0_0_win_va_fu_408_p3;

assign tmp_48_i_fu_500_p1 = win_val_2_1_fu_168;

assign tmp_50_i_fu_504_p1 = win_val_2_1_2_fu_172;

assign tmp_53_i_fu_346_p2 = ((ap_phi_mux_t_V_2_phi_fu_263_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_fu_289_p4 = {{t_V_reg_248[9:1]}};

assign win_val_0_0_0_win_va_fu_422_p3 = ((tmp_26_i_reg_845_pp0_iter1_reg[0:0] === 1'b1) ? element_gd_i_fu_148 : win_val_0_1_fu_152);

assign win_val_1_0_0_win_va_fu_415_p3 = ((tmp_26_i_reg_845_pp0_iter1_reg[0:0] === 1'b1) ? tmp0_i_fu_144 : win_val_1_1_fu_160);

assign win_val_2_0_0_win_va_fu_408_p3 = ((tmp_26_i_reg_845_pp0_iter1_reg[0:0] === 1'b1) ? tmp1_i_fu_140 : win_val_2_1_fu_168);

endmodule //hysteresis
