// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module plainStream2hlsMat_r (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        mat_out_rows_V_dout,
        mat_out_rows_V_empty_n,
        mat_out_rows_V_read,
        mat_out_cols_V_dout,
        mat_out_cols_V_empty_n,
        mat_out_cols_V_read,
        mat_out_data_stream_0_V_din,
        mat_out_data_stream_0_V_full_n,
        mat_out_data_stream_0_V_write,
        mat_out_data_stream_1_V_din,
        mat_out_data_stream_1_V_full_n,
        mat_out_data_stream_1_V_write,
        mat_out_data_stream_2_V_din,
        mat_out_data_stream_2_V_full_n,
        mat_out_data_stream_2_V_write,
        mat_out_rows_V_out_din,
        mat_out_rows_V_out_full_n,
        mat_out_rows_V_out_write,
        mat_out_cols_V_out_din,
        mat_out_cols_V_out_full_n,
        mat_out_cols_V_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [2:0] in_stream_TKEEP;
input  [2:0] in_stream_TSTRB;
input  [0:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [0:0] in_stream_TID;
input  [0:0] in_stream_TDEST;
input  [10:0] mat_out_rows_V_dout;
input   mat_out_rows_V_empty_n;
output   mat_out_rows_V_read;
input  [11:0] mat_out_cols_V_dout;
input   mat_out_cols_V_empty_n;
output   mat_out_cols_V_read;
output  [7:0] mat_out_data_stream_0_V_din;
input   mat_out_data_stream_0_V_full_n;
output   mat_out_data_stream_0_V_write;
output  [7:0] mat_out_data_stream_1_V_din;
input   mat_out_data_stream_1_V_full_n;
output   mat_out_data_stream_1_V_write;
output  [7:0] mat_out_data_stream_2_V_din;
input   mat_out_data_stream_2_V_full_n;
output   mat_out_data_stream_2_V_write;
output  [10:0] mat_out_rows_V_out_din;
input   mat_out_rows_V_out_full_n;
output   mat_out_rows_V_out_write;
output  [11:0] mat_out_cols_V_out_din;
input   mat_out_cols_V_out_full_n;
output   mat_out_cols_V_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg mat_out_rows_V_read;
reg mat_out_cols_V_read;
reg mat_out_data_stream_0_V_write;
reg mat_out_data_stream_1_V_write;
reg mat_out_data_stream_2_V_write;
reg mat_out_rows_V_out_write;
reg mat_out_cols_V_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] strm_in_V_data_V_0_data_out;
wire    strm_in_V_data_V_0_vld_in;
wire    strm_in_V_data_V_0_vld_out;
wire    strm_in_V_data_V_0_ack_in;
reg    strm_in_V_data_V_0_ack_out;
reg   [23:0] strm_in_V_data_V_0_payload_A;
reg   [23:0] strm_in_V_data_V_0_payload_B;
reg    strm_in_V_data_V_0_sel_rd;
reg    strm_in_V_data_V_0_sel_wr;
wire    strm_in_V_data_V_0_sel;
wire    strm_in_V_data_V_0_load_A;
wire    strm_in_V_data_V_0_load_B;
reg   [1:0] strm_in_V_data_V_0_state;
wire    strm_in_V_data_V_0_state_cmp_full;
wire    strm_in_V_dest_V_0_vld_in;
reg    strm_in_V_dest_V_0_ack_out;
reg   [1:0] strm_in_V_dest_V_0_state;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_3_i_fu_282_p2;
reg    mat_out_rows_V_blk_n;
reg    mat_out_cols_V_blk_n;
reg    mat_out_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_3_i_reg_340;
reg    mat_out_data_stream_1_V_blk_n;
reg    mat_out_data_stream_2_V_blk_n;
reg    mat_out_rows_V_out_blk_n;
reg    mat_out_cols_V_out_blk_n;
reg   [10:0] j_i_reg_252;
reg   [10:0] mat_out_rows_V_read_reg_321;
reg    ap_block_state1;
reg   [11:0] mat_out_cols_V_read_reg_326;
wire   [0:0] tmp_2_i_fu_267_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_fu_272_p2;
reg   [9:0] i_reg_335;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_287_p2;
wire   [7:0] tmp_fu_297_p1;
reg   [7:0] tmp_reg_349;
reg   [7:0] tmp_1_reg_354;
reg   [7:0] tmp_2_reg_359;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] i_i_reg_241;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] i_cast_cast_i_fu_263_p1;
wire   [11:0] j_cast_cast_i_fu_278_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 strm_in_V_data_V_0_sel_rd = 1'b0;
#0 strm_in_V_data_V_0_sel_wr = 1'b0;
#0 strm_in_V_data_V_0_state = 2'd0;
#0 strm_in_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_2_i_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_2_i_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_2_i_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((strm_in_V_data_V_0_ack_out == 1'b1) & (strm_in_V_data_V_0_vld_out == 1'b1))) begin
            strm_in_V_data_V_0_sel_rd <= ~strm_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((strm_in_V_data_V_0_ack_in == 1'b1) & (strm_in_V_data_V_0_vld_in == 1'b1))) begin
            strm_in_V_data_V_0_sel_wr <= ~strm_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((strm_in_V_data_V_0_state == 2'd2) & (strm_in_V_data_V_0_vld_in == 1'b0)) | ((strm_in_V_data_V_0_state == 2'd3) & (strm_in_V_data_V_0_vld_in == 1'b0) & (strm_in_V_data_V_0_ack_out == 1'b1)))) begin
            strm_in_V_data_V_0_state <= 2'd2;
        end else if ((((strm_in_V_data_V_0_state == 2'd1) & (strm_in_V_data_V_0_ack_out == 1'b0)) | ((strm_in_V_data_V_0_state == 2'd3) & (strm_in_V_data_V_0_ack_out == 1'b0) & (strm_in_V_data_V_0_vld_in == 1'b1)))) begin
            strm_in_V_data_V_0_state <= 2'd1;
        end else if (((~((strm_in_V_data_V_0_vld_in == 1'b0) & (strm_in_V_data_V_0_ack_out == 1'b1)) & ~((strm_in_V_data_V_0_ack_out == 1'b0) & (strm_in_V_data_V_0_vld_in == 1'b1)) & (strm_in_V_data_V_0_state == 2'd3)) | ((strm_in_V_data_V_0_state == 2'd1) & (strm_in_V_data_V_0_ack_out == 1'b1)) | ((strm_in_V_data_V_0_state == 2'd2) & (strm_in_V_data_V_0_vld_in == 1'b1)))) begin
            strm_in_V_data_V_0_state <= 2'd3;
        end else begin
            strm_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((strm_in_V_dest_V_0_state == 2'd2) & (strm_in_V_dest_V_0_vld_in == 1'b0)) | ((strm_in_V_dest_V_0_state == 2'd3) & (strm_in_V_dest_V_0_vld_in == 1'b0) & (strm_in_V_dest_V_0_ack_out == 1'b1)))) begin
            strm_in_V_dest_V_0_state <= 2'd2;
        end else if ((((strm_in_V_dest_V_0_state == 2'd1) & (strm_in_V_dest_V_0_ack_out == 1'b0)) | ((strm_in_V_dest_V_0_state == 2'd3) & (strm_in_V_dest_V_0_ack_out == 1'b0) & (strm_in_V_dest_V_0_vld_in == 1'b1)))) begin
            strm_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((strm_in_V_dest_V_0_vld_in == 1'b0) & (strm_in_V_dest_V_0_ack_out == 1'b1)) & ~((strm_in_V_dest_V_0_ack_out == 1'b0) & (strm_in_V_dest_V_0_vld_in == 1'b1)) & (strm_in_V_dest_V_0_state == 2'd3)) | ((strm_in_V_dest_V_0_state == 2'd1) & (strm_in_V_dest_V_0_ack_out == 1'b1)) | ((strm_in_V_dest_V_0_state == 2'd2) & (strm_in_V_dest_V_0_vld_in == 1'b1)))) begin
            strm_in_V_dest_V_0_state <= 2'd3;
        end else begin
            strm_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_241 <= i_reg_335;
    end else if ((~((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_241 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_i_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_252 <= 11'd0;
    end else if (((tmp_3_i_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_i_reg_252 <= j_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_335 <= i_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_cols_V_read_reg_326 <= mat_out_cols_V_dout;
        mat_out_rows_V_read_reg_321 <= mat_out_rows_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_in_V_data_V_0_load_A == 1'b1)) begin
        strm_in_V_data_V_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_in_V_data_V_0_load_B == 1'b1)) begin
        strm_in_V_data_V_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_i_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_354 <= {{strm_in_V_data_V_0_data_out[15:8]}};
        tmp_2_reg_359 <= {{strm_in_V_data_V_0_data_out[23:16]}};
        tmp_reg_349 <= tmp_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_i_reg_340 <= tmp_3_i_fu_282_p2;
    end
end

always @ (*) begin
    if ((tmp_3_i_fu_282_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_i_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TDATA_blk_n = strm_in_V_data_V_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_i_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_cols_V_blk_n = mat_out_cols_V_empty_n;
    end else begin
        mat_out_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_cols_V_out_blk_n = mat_out_cols_V_out_full_n;
    end else begin
        mat_out_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_cols_V_out_write = 1'b1;
    end else begin
        mat_out_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_cols_V_read = 1'b1;
    end else begin
        mat_out_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_340 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_out_data_stream_0_V_blk_n = mat_out_data_stream_0_V_full_n;
    end else begin
        mat_out_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_340 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_out_data_stream_0_V_write = 1'b1;
    end else begin
        mat_out_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_340 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_out_data_stream_1_V_blk_n = mat_out_data_stream_1_V_full_n;
    end else begin
        mat_out_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_340 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_out_data_stream_1_V_write = 1'b1;
    end else begin
        mat_out_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_340 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_out_data_stream_2_V_blk_n = mat_out_data_stream_2_V_full_n;
    end else begin
        mat_out_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_340 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_out_data_stream_2_V_write = 1'b1;
    end else begin
        mat_out_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_rows_V_blk_n = mat_out_rows_V_empty_n;
    end else begin
        mat_out_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_rows_V_out_blk_n = mat_out_rows_V_out_full_n;
    end else begin
        mat_out_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_rows_V_out_write = 1'b1;
    end else begin
        mat_out_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_out_rows_V_read = 1'b1;
    end else begin
        mat_out_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        strm_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((strm_in_V_data_V_0_sel == 1'b1)) begin
        strm_in_V_data_V_0_data_out = strm_in_V_data_V_0_payload_B;
    end else begin
        strm_in_V_data_V_0_data_out = strm_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_3_i_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strm_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        strm_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_2_i_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_3_i_fu_282_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_3_i_fu_282_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_2_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_1_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_0_V_full_n == 1'b0)))) | ((tmp_3_i_fu_282_p2 == 1'd1) & (strm_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_2_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_1_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_0_V_full_n == 1'b0)))) | ((tmp_3_i_fu_282_p2 == 1'd1) & (strm_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_2_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_1_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_0_V_full_n == 1'b0)))) | ((tmp_3_i_fu_282_p2 == 1'd1) & (strm_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((mat_out_cols_V_out_full_n == 1'b0) | (mat_out_rows_V_out_full_n == 1'b0) | (mat_out_cols_V_empty_n == 1'b0) | (mat_out_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((tmp_3_i_fu_282_p2 == 1'd1) & (strm_in_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_2_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_1_V_full_n == 1'b0)) | ((tmp_3_i_reg_340 == 1'd1) & (mat_out_data_stream_0_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_cast_cast_i_fu_263_p1 = i_i_reg_241;

assign i_fu_272_p2 = (i_i_reg_241 + 10'd1);

assign in_stream_TREADY = strm_in_V_dest_V_0_state[1'd1];

assign j_cast_cast_i_fu_278_p1 = j_i_reg_252;

assign j_fu_287_p2 = (j_i_reg_252 + 11'd1);

assign mat_out_cols_V_out_din = mat_out_cols_V_dout;

assign mat_out_data_stream_0_V_din = tmp_reg_349;

assign mat_out_data_stream_1_V_din = tmp_1_reg_354;

assign mat_out_data_stream_2_V_din = tmp_2_reg_359;

assign mat_out_rows_V_out_din = mat_out_rows_V_dout;

assign start_out = real_start;

assign strm_in_V_data_V_0_ack_in = strm_in_V_data_V_0_state[1'd1];

assign strm_in_V_data_V_0_load_A = (strm_in_V_data_V_0_state_cmp_full & ~strm_in_V_data_V_0_sel_wr);

assign strm_in_V_data_V_0_load_B = (strm_in_V_data_V_0_state_cmp_full & strm_in_V_data_V_0_sel_wr);

assign strm_in_V_data_V_0_sel = strm_in_V_data_V_0_sel_rd;

assign strm_in_V_data_V_0_state_cmp_full = ((strm_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign strm_in_V_data_V_0_vld_in = in_stream_TVALID;

assign strm_in_V_data_V_0_vld_out = strm_in_V_data_V_0_state[1'd0];

assign strm_in_V_dest_V_0_vld_in = in_stream_TVALID;

assign tmp_2_i_fu_267_p2 = (($signed(i_cast_cast_i_fu_263_p1) < $signed(mat_out_rows_V_read_reg_321)) ? 1'b1 : 1'b0);

assign tmp_3_i_fu_282_p2 = (($signed(j_cast_cast_i_fu_278_p1) < $signed(mat_out_cols_V_read_reg_326)) ? 1'b1 : 1'b0);

assign tmp_fu_297_p1 = strm_in_V_data_V_0_data_out[7:0];

endmodule //plainStream2hlsMat_r
