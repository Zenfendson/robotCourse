-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity plainStream2hlsMat_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    mat_out_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    mat_out_rows_V_empty_n : IN STD_LOGIC;
    mat_out_rows_V_read : OUT STD_LOGIC;
    mat_out_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    mat_out_cols_V_empty_n : IN STD_LOGIC;
    mat_out_cols_V_read : OUT STD_LOGIC;
    mat_out_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    mat_out_data_stream_0_V_full_n : IN STD_LOGIC;
    mat_out_data_stream_0_V_write : OUT STD_LOGIC;
    mat_out_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    mat_out_data_stream_1_V_full_n : IN STD_LOGIC;
    mat_out_data_stream_1_V_write : OUT STD_LOGIC;
    mat_out_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    mat_out_data_stream_2_V_full_n : IN STD_LOGIC;
    mat_out_data_stream_2_V_write : OUT STD_LOGIC;
    mat_out_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    mat_out_rows_V_out_full_n : IN STD_LOGIC;
    mat_out_rows_V_out_write : OUT STD_LOGIC;
    mat_out_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    mat_out_cols_V_out_full_n : IN STD_LOGIC;
    mat_out_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of plainStream2hlsMat_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal strm_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal strm_in_V_data_V_0_vld_in : STD_LOGIC;
    signal strm_in_V_data_V_0_vld_out : STD_LOGIC;
    signal strm_in_V_data_V_0_ack_in : STD_LOGIC;
    signal strm_in_V_data_V_0_ack_out : STD_LOGIC;
    signal strm_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal strm_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal strm_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal strm_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal strm_in_V_data_V_0_sel : STD_LOGIC;
    signal strm_in_V_data_V_0_load_A : STD_LOGIC;
    signal strm_in_V_data_V_0_load_B : STD_LOGIC;
    signal strm_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal strm_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal strm_in_V_dest_V_0_vld_in : STD_LOGIC;
    signal strm_in_V_dest_V_0_ack_out : STD_LOGIC;
    signal strm_in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_3_i_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_rows_V_blk_n : STD_LOGIC;
    signal mat_out_cols_V_blk_n : STD_LOGIC;
    signal mat_out_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_3_i_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_data_stream_1_V_blk_n : STD_LOGIC;
    signal mat_out_data_stream_2_V_blk_n : STD_LOGIC;
    signal mat_out_rows_V_out_blk_n : STD_LOGIC;
    signal mat_out_cols_V_out_blk_n : STD_LOGIC;
    signal j_i_reg_252 : STD_LOGIC_VECTOR (10 downto 0);
    signal mat_out_rows_V_read_reg_321 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mat_out_cols_V_read_reg_326 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_i_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_272_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_335 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_287_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_349 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_359 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_i_reg_241 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_cast_cast_i_fu_263_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_cast_cast_i_fu_278_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_2_i_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_2_i_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((tmp_2_i_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                strm_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((strm_in_V_data_V_0_ack_out = ap_const_logic_1) and (strm_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        strm_in_V_data_V_0_sel_rd <= not(strm_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                strm_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((strm_in_V_data_V_0_ack_in = ap_const_logic_1) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        strm_in_V_data_V_0_sel_wr <= not(strm_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                strm_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((strm_in_V_data_V_0_state = ap_const_lv2_2) and (strm_in_V_data_V_0_vld_in = ap_const_logic_0)) or ((strm_in_V_data_V_0_state = ap_const_lv2_3) and (strm_in_V_data_V_0_vld_in = ap_const_logic_0) and (strm_in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    strm_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((strm_in_V_data_V_0_state = ap_const_lv2_1) and (strm_in_V_data_V_0_ack_out = ap_const_logic_0)) or ((strm_in_V_data_V_0_state = ap_const_lv2_3) and (strm_in_V_data_V_0_ack_out = ap_const_logic_0) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((strm_in_V_data_V_0_vld_in = ap_const_logic_0) and (strm_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((strm_in_V_data_V_0_ack_out = ap_const_logic_0) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1))) and (strm_in_V_data_V_0_state = ap_const_lv2_3)) or ((strm_in_V_data_V_0_state = ap_const_lv2_1) and (strm_in_V_data_V_0_ack_out = ap_const_logic_1)) or ((strm_in_V_data_V_0_state = ap_const_lv2_2) and (strm_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    strm_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    strm_in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                strm_in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((strm_in_V_dest_V_0_state = ap_const_lv2_2) and (strm_in_V_dest_V_0_vld_in = ap_const_logic_0)) or ((strm_in_V_dest_V_0_state = ap_const_lv2_3) and (strm_in_V_dest_V_0_vld_in = ap_const_logic_0) and (strm_in_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    strm_in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((strm_in_V_dest_V_0_state = ap_const_lv2_1) and (strm_in_V_dest_V_0_ack_out = ap_const_logic_0)) or ((strm_in_V_dest_V_0_state = ap_const_lv2_3) and (strm_in_V_dest_V_0_ack_out = ap_const_logic_0) and (strm_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((strm_in_V_dest_V_0_vld_in = ap_const_logic_0) and (strm_in_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((strm_in_V_dest_V_0_ack_out = ap_const_logic_0) and (strm_in_V_dest_V_0_vld_in = ap_const_logic_1))) and (strm_in_V_dest_V_0_state = ap_const_lv2_3)) or ((strm_in_V_dest_V_0_state = ap_const_lv2_1) and (strm_in_V_dest_V_0_ack_out = ap_const_logic_1)) or ((strm_in_V_dest_V_0_state = ap_const_lv2_2) and (strm_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    strm_in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    strm_in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_241 <= i_reg_335;
            elsif ((not(((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_241 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_i_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_reg_252 <= ap_const_lv11_0;
            elsif (((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_i_reg_252 <= j_fu_287_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_335 <= i_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mat_out_cols_V_read_reg_326 <= mat_out_cols_V_dout;
                mat_out_rows_V_read_reg_321 <= mat_out_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_in_V_data_V_0_load_A = ap_const_logic_1)) then
                strm_in_V_data_V_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((strm_in_V_data_V_0_load_B = ap_const_logic_1)) then
                strm_in_V_data_V_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_354 <= strm_in_V_data_V_0_data_out(15 downto 8);
                tmp_2_reg_359 <= strm_in_V_data_V_0_data_out(23 downto 16);
                tmp_reg_349 <= tmp_fu_297_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_i_reg_340 <= tmp_3_i_fu_282_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mat_out_rows_V_empty_n, mat_out_cols_V_empty_n, mat_out_rows_V_out_full_n, mat_out_cols_V_out_full_n, ap_enable_reg_pp0_iter0, tmp_3_i_fu_282_p2, tmp_2_i_fu_267_p2, ap_CS_fsm_state2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_2_i_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((tmp_3_i_fu_282_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((tmp_3_i_fu_282_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(strm_in_V_data_V_0_vld_out, mat_out_data_stream_0_V_full_n, mat_out_data_stream_1_V_full_n, mat_out_data_stream_2_V_full_n, ap_enable_reg_pp0_iter0, tmp_3_i_fu_282_p2, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_2_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_1_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_0_V_full_n = ap_const_logic_0)))) or ((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(strm_in_V_data_V_0_vld_out, mat_out_data_stream_0_V_full_n, mat_out_data_stream_1_V_full_n, mat_out_data_stream_2_V_full_n, ap_enable_reg_pp0_iter0, tmp_3_i_fu_282_p2, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_2_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_1_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_0_V_full_n = ap_const_logic_0)))) or ((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(strm_in_V_data_V_0_vld_out, mat_out_data_stream_0_V_full_n, mat_out_data_stream_1_V_full_n, mat_out_data_stream_2_V_full_n, ap_enable_reg_pp0_iter0, tmp_3_i_fu_282_p2, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_2_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_1_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_0_V_full_n = ap_const_logic_0)))) or ((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, mat_out_rows_V_empty_n, mat_out_cols_V_empty_n, mat_out_rows_V_out_full_n, mat_out_cols_V_out_full_n)
    begin
                ap_block_state1 <= ((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(strm_in_V_data_V_0_vld_out, tmp_3_i_fu_282_p2)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (strm_in_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(mat_out_data_stream_0_V_full_n, mat_out_data_stream_1_V_full_n, mat_out_data_stream_2_V_full_n, tmp_3_i_reg_340)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_2_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_1_V_full_n = ap_const_logic_0)) or ((tmp_3_i_reg_340 = ap_const_lv1_1) and (mat_out_data_stream_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_3_i_fu_282_p2)
    begin
        if ((tmp_3_i_fu_282_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_2_i_fu_267_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_2_i_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    i_cast_cast_i_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_241),11));
    i_fu_272_p2 <= std_logic_vector(unsigned(i_i_reg_241) + unsigned(ap_const_lv10_1));

    in_stream_TDATA_blk_n_assign_proc : process(strm_in_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_3_i_fu_282_p2)
    begin
        if (((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_TDATA_blk_n <= strm_in_V_data_V_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= strm_in_V_dest_V_0_state(1);

    internal_ap_ready_assign_proc : process(tmp_2_i_fu_267_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_2_i_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_cast_cast_i_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_252),12));
    j_fu_287_p2 <= std_logic_vector(unsigned(j_i_reg_252) + unsigned(ap_const_lv11_1));

    mat_out_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_cols_V_blk_n <= mat_out_cols_V_empty_n;
        else 
            mat_out_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mat_out_cols_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_cols_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_cols_V_out_blk_n <= mat_out_cols_V_out_full_n;
        else 
            mat_out_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_out_cols_V_out_din <= mat_out_cols_V_dout;

    mat_out_cols_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_rows_V_empty_n, mat_out_cols_V_empty_n, mat_out_rows_V_out_full_n, mat_out_cols_V_out_full_n)
    begin
        if ((not(((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_cols_V_out_write <= ap_const_logic_1;
        else 
            mat_out_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_out_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_rows_V_empty_n, mat_out_cols_V_empty_n, mat_out_rows_V_out_full_n, mat_out_cols_V_out_full_n)
    begin
        if ((not(((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_cols_V_read <= ap_const_logic_1;
        else 
            mat_out_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    mat_out_data_stream_0_V_blk_n_assign_proc : process(mat_out_data_stream_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340)
    begin
        if (((tmp_3_i_reg_340 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_out_data_stream_0_V_blk_n <= mat_out_data_stream_0_V_full_n;
        else 
            mat_out_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_out_data_stream_0_V_din <= tmp_reg_349;

    mat_out_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_3_i_reg_340 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_out_data_stream_0_V_write <= ap_const_logic_1;
        else 
            mat_out_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_out_data_stream_1_V_blk_n_assign_proc : process(mat_out_data_stream_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340)
    begin
        if (((tmp_3_i_reg_340 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_out_data_stream_1_V_blk_n <= mat_out_data_stream_1_V_full_n;
        else 
            mat_out_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_out_data_stream_1_V_din <= tmp_1_reg_354;

    mat_out_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_3_i_reg_340 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_out_data_stream_1_V_write <= ap_const_logic_1;
        else 
            mat_out_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_out_data_stream_2_V_blk_n_assign_proc : process(mat_out_data_stream_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340)
    begin
        if (((tmp_3_i_reg_340 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_out_data_stream_2_V_blk_n <= mat_out_data_stream_2_V_full_n;
        else 
            mat_out_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_out_data_stream_2_V_din <= tmp_2_reg_359;

    mat_out_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_i_reg_340, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_3_i_reg_340 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_out_data_stream_2_V_write <= ap_const_logic_1;
        else 
            mat_out_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_out_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_rows_V_blk_n <= mat_out_rows_V_empty_n;
        else 
            mat_out_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mat_out_rows_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_rows_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_rows_V_out_blk_n <= mat_out_rows_V_out_full_n;
        else 
            mat_out_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_out_rows_V_out_din <= mat_out_rows_V_dout;

    mat_out_rows_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_rows_V_empty_n, mat_out_cols_V_empty_n, mat_out_rows_V_out_full_n, mat_out_cols_V_out_full_n)
    begin
        if ((not(((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_rows_V_out_write <= ap_const_logic_1;
        else 
            mat_out_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_out_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mat_out_rows_V_empty_n, mat_out_cols_V_empty_n, mat_out_rows_V_out_full_n, mat_out_cols_V_out_full_n)
    begin
        if ((not(((mat_out_cols_V_out_full_n = ap_const_logic_0) or (mat_out_rows_V_out_full_n = ap_const_logic_0) or (mat_out_cols_V_empty_n = ap_const_logic_0) or (mat_out_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat_out_rows_V_read <= ap_const_logic_1;
        else 
            mat_out_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    strm_in_V_data_V_0_ack_in <= strm_in_V_data_V_0_state(1);

    strm_in_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_3_i_fu_282_p2, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            strm_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_data_V_0_data_out_assign_proc : process(strm_in_V_data_V_0_payload_A, strm_in_V_data_V_0_payload_B, strm_in_V_data_V_0_sel)
    begin
        if ((strm_in_V_data_V_0_sel = ap_const_logic_1)) then 
            strm_in_V_data_V_0_data_out <= strm_in_V_data_V_0_payload_B;
        else 
            strm_in_V_data_V_0_data_out <= strm_in_V_data_V_0_payload_A;
        end if; 
    end process;

    strm_in_V_data_V_0_load_A <= (strm_in_V_data_V_0_state_cmp_full and not(strm_in_V_data_V_0_sel_wr));
    strm_in_V_data_V_0_load_B <= (strm_in_V_data_V_0_state_cmp_full and strm_in_V_data_V_0_sel_wr);
    strm_in_V_data_V_0_sel <= strm_in_V_data_V_0_sel_rd;
    strm_in_V_data_V_0_state_cmp_full <= '0' when (strm_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    strm_in_V_data_V_0_vld_in <= in_stream_TVALID;
    strm_in_V_data_V_0_vld_out <= strm_in_V_data_V_0_state(0);

    strm_in_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_3_i_fu_282_p2, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_3_i_fu_282_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            strm_in_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            strm_in_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    strm_in_V_dest_V_0_vld_in <= in_stream_TVALID;
    tmp_2_i_fu_267_p2 <= "1" when (signed(i_cast_cast_i_fu_263_p1) < signed(mat_out_rows_V_read_reg_321)) else "0";
    tmp_3_i_fu_282_p2 <= "1" when (signed(j_cast_cast_i_fu_278_p1) < signed(mat_out_cols_V_read_reg_326)) else "0";
    tmp_fu_297_p1 <= strm_in_V_data_V_0_data_out(8 - 1 downto 0);
end behav;
