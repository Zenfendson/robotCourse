-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hysteresis is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    threshold_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_low_empty_n : IN STD_LOGIC;
    threshold_low_read : OUT STD_LOGIC;
    threshold_high_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_high_empty_n : IN STD_LOGIC;
    threshold_high_read : OUT STD_LOGIC );
end;


architecture behav of hysteresis is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D1 : STD_LOGIC_VECTOR (9 downto 0) := "1011010001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_2CF : STD_LOGIC_VECTOR (9 downto 0) := "1011001111";
    constant ap_const_lv11_501 : STD_LOGIC_VECTOR (10 downto 0) := "10100000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_4FF : STD_LOGIC_VECTOR (10 downto 0) := "10011111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond_i_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal or_cond7_i_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_i_reg_867_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal threshold_low_blk_n : STD_LOGIC;
    signal threshold_high_blk_n : STD_LOGIC;
    signal t_V_2_reg_259 : STD_LOGIC_VECTOR (10 downto 0);
    signal t_V_2_reg_259_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal threshold_low_read_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal threshold_high_read_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_811 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_i_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_836_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_323_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_reg_840 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_26_i_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_reg_845_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_852_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuff_val_1_addr_reg_856 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_1_addr_reg_856_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal or_cond7_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_i_reg_867_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuff_val_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond6_i_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_i_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt4_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt4_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt5_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt5_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt6_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt6_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt7_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt7_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt8_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt8_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal linebuff_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_ce0 : STD_LOGIC;
    signal linebuff_val_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_ce1 : STD_LOGIC;
    signal linebuff_val_0_we1 : STD_LOGIC;
    signal linebuff_val_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_1_ce0 : STD_LOGIC;
    signal linebuff_val_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal linebuff_val_1_ce1 : STD_LOGIC;
    signal linebuff_val_1_we1 : STD_LOGIC;
    signal t_V_reg_248 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_t_V_2_phi_fu_263_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_i_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp1_i_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_i_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal element_gd_i_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_0_0_win_va_fu_422_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_2_fu_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_fu_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_0_0_win_va_fu_415_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_2_fu_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_0_0_win_va_fu_408_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_2_fu_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_289_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_i_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_429_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp2_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp22_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp21_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_demorgan_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_i_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt2_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_i_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt3_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_i_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_i_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_i_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp24_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp25_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp23_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev7_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev8_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp28_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev6_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp29_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp27_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp30_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp31_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_demorgan_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component nonmax_suppressioocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    linebuff_val_0_U : component nonmax_suppressioocq
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_0_address0,
        ce0 => linebuff_val_0_ce0,
        q0 => linebuff_val_0_q0,
        address1 => linebuff_val_0_address1,
        ce1 => linebuff_val_0_ce1,
        we1 => linebuff_val_0_we1,
        d1 => element_gd_i_fu_148);

    linebuff_val_1_U : component nonmax_suppressioocq
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_1_address0,
        ce0 => linebuff_val_1_ce0,
        q0 => linebuff_val_1_q0,
        address1 => linebuff_val_1_addr_reg_856_pp0_iter1_reg,
        ce1 => linebuff_val_1_ce1,
        we1 => linebuff_val_1_we1,
        d1 => tmp0_reg_871);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((exitcond1_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_2_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_836 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_2_reg_259 <= j_V_reg_840;
            elsif (((exitcond1_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_2_reg_259 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_reg_248 <= i_V_reg_811;
            elsif ((not(((threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_248 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_i_reg_852 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                element_gd_i_fu_148 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_836 <= exitcond_fu_317_p2;
                exitcond_reg_836_pp0_iter1_reg <= exitcond_reg_836;
                linebuff_val_1_addr_reg_856_pp0_iter1_reg <= linebuff_val_1_addr_reg_856;
                or_cond7_i_reg_867_pp0_iter1_reg <= or_cond7_i_reg_867;
                or_cond_i_reg_852_pp0_iter1_reg <= or_cond_i_reg_852;
                t_V_2_reg_259_pp0_iter1_reg <= t_V_2_reg_259;
                tmp_26_i_reg_845_pp0_iter1_reg <= tmp_26_i_reg_845;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_811 <= i_V_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_821 <= icmp_fu_299_p2;
                tmp_21_i_reg_816 <= tmp_21_i_fu_283_p2;
                tmp_23_i_reg_826 <= tmp_23_i_fu_305_p2;
                tmp_24_i_reg_831 <= tmp_24_i_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_V_reg_840 <= j_V_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_317_p2 = ap_const_lv1_0) and (tmp_26_i_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                linebuff_val_1_addr_reg_856 <= tmp_29_i_fu_340_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_cond6_i_reg_876 <= or_cond6_i_fu_461_p2;
                or_cond7_i_reg_867_pp0_iter2_reg <= or_cond7_i_reg_867_pp0_iter1_reg;
                slt4_reg_886 <= slt4_fu_564_p2;
                slt5_reg_891 <= slt5_fu_569_p2;
                slt6_reg_896 <= slt6_fu_574_p2;
                slt7_reg_901 <= slt7_fu_579_p2;
                slt8_reg_906 <= slt8_fu_584_p2;
                tmp26_reg_911 <= tmp26_fu_607_p2;
                tmp_34_i_reg_881 <= tmp_34_i_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond7_i_reg_867 <= or_cond7_i_fu_352_p2;
                or_cond_i_reg_852 <= or_cond_i_fu_335_p2;
                tmp_26_i_reg_845 <= tmp_26_i_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                threshold_high_read_reg_794 <= threshold_high_dout;
                threshold_low_read_reg_789 <= threshold_low_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_26_i_reg_845 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp0_i_fu_144 <= linebuff_val_0_q0;
                tmp0_reg_871 <= linebuff_val_0_q0;
                tmp1_i_fu_140 <= linebuff_val_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_836_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                win_val_0_1_2_fu_156 <= win_val_0_1_fu_152;
                win_val_0_1_fu_152 <= win_val_0_0_0_win_va_fu_422_p3;
                win_val_1_1_2_fu_164 <= win_val_1_1_fu_160;
                win_val_1_1_fu_160 <= win_val_1_0_0_win_va_fu_415_p3;
                win_val_2_1_2_fu_172 <= win_val_2_1_fu_168;
                win_val_2_1_fu_168 <= win_val_2_0_0_win_va_fu_408_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, threshold_low_empty_n, threshold_high_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond1_fu_271_p2, ap_CS_fsm_state2, exitcond_fu_317_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_317_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_317_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_i_reg_852, ap_enable_reg_pp0_iter3, or_cond7_i_reg_867_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((or_cond7_i_reg_867_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_i_reg_852 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_i_reg_852, ap_enable_reg_pp0_iter3, or_cond7_i_reg_867_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((or_cond7_i_reg_867_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_i_reg_852 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_i_reg_852, ap_enable_reg_pp0_iter3, or_cond7_i_reg_867_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((or_cond7_i_reg_867_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_i_reg_852 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, threshold_low_empty_n, threshold_high_empty_n)
    begin
                ap_block_state1 <= ((threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n, or_cond_i_reg_852)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((or_cond_i_reg_852 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(dst_data_stream_V_full_n, or_cond7_i_reg_867_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((or_cond7_i_reg_867_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_317_p2)
    begin
        if ((exitcond_fu_317_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_271_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t_V_2_phi_fu_263_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, t_V_2_reg_259, exitcond_reg_836, j_V_reg_840)
    begin
        if (((exitcond_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_t_V_2_phi_fu_263_p4 <= j_V_reg_840;
        else 
            ap_phi_mux_t_V_2_phi_fu_263_p4 <= t_V_2_reg_259;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, or_cond7_i_reg_867_pp0_iter2_reg)
    begin
        if (((or_cond7_i_reg_867_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        ap_const_lv8_FF when (tmp_37_fu_716_p2(0) = '1') else 
        ap_const_lv8_0;

    dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, or_cond7_i_reg_867_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond7_i_reg_867_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_271_p2 <= "1" when (t_V_reg_248 = ap_const_lv10_2D1) else "0";
    exitcond_fu_317_p2 <= "1" when (ap_phi_mux_t_V_2_phi_fu_263_p4 = ap_const_lv11_501) else "0";
    i_V_fu_277_p2 <= std_logic_vector(unsigned(t_V_reg_248) + unsigned(ap_const_lv10_1));
    icmp2_fu_439_p2 <= "1" when (tmp_36_fu_429_p4 = ap_const_lv10_0) else "0";
    icmp_fu_299_p2 <= "1" when (tmp_fu_289_p4 = ap_const_lv9_0) else "0";

    internal_ap_ready_assign_proc : process(exitcond1_fu_271_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_323_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_2_phi_fu_263_p4) + unsigned(ap_const_lv11_1));
    linebuff_val_0_address0 <= tmp_29_i_fu_340_p1(11 - 1 downto 0);
    linebuff_val_0_address1 <= tmp_30_i_fu_376_p1(11 - 1 downto 0);

    linebuff_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuff_val_0_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuff_val_0_ce1 <= ap_const_logic_1;
        else 
            linebuff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_i_reg_852_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((or_cond_i_reg_852_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuff_val_0_we1 <= ap_const_logic_1;
        else 
            linebuff_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuff_val_1_address0 <= tmp_29_i_fu_340_p1(11 - 1 downto 0);

    linebuff_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuff_val_1_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuff_val_1_ce1 <= ap_const_logic_1;
        else 
            linebuff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, tmp_26_i_reg_845_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_26_i_reg_845_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuff_val_1_we1 <= ap_const_logic_1;
        else 
            linebuff_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond6_i_fu_461_p2 <= (tmp22_fu_456_p2 or tmp21_fu_451_p2);
    or_cond7_i_fu_352_p2 <= (tmp_53_i_fu_346_p2 or tmp_23_i_reg_826);
    or_cond_i_fu_335_p2 <= (tmp_26_i_fu_329_p2 and tmp_21_i_reg_816);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev1_fu_536_p2 <= (slt1_fu_531_p2 xor ap_const_lv1_1);
    rev2_fu_547_p2 <= (slt2_fu_542_p2 xor ap_const_lv1_1);
    rev3_fu_558_p2 <= (slt3_fu_553_p2 xor ap_const_lv1_1);
    rev4_fu_652_p2 <= (slt4_reg_886 xor ap_const_lv1_1);
    rev5_fu_657_p2 <= (slt5_reg_891 xor ap_const_lv1_1);
    rev6_fu_662_p2 <= (slt6_reg_896 xor ap_const_lv1_1);
    rev7_fu_667_p2 <= (slt7_reg_901 xor ap_const_lv1_1);
    rev8_fu_672_p2 <= (slt8_reg_906 xor ap_const_lv1_1);
    rev_fu_525_p2 <= (slt_fu_520_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_701_p2 <= (tmp30_fu_695_p2 and tmp26_reg_911);
    sel_tmp6_demorgan_fu_508_p2 <= (tmp_34_i_fu_471_p2 or or_cond6_i_fu_461_p2);
    sel_tmp6_fu_514_p2 <= (sel_tmp6_demorgan_fu_508_p2 xor ap_const_lv1_1);
    slt1_fu_531_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_36_i_fu_476_p1)) else "0";
    slt2_fu_542_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_38_i_fu_480_p1)) else "0";
    slt3_fu_553_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_40_i_fu_484_p1)) else "0";
    slt4_fu_564_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_42_i_fu_488_p1)) else "0";
    slt5_fu_569_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_44_i_fu_492_p1)) else "0";
    slt6_fu_574_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_46_i_fu_496_p1)) else "0";
    slt7_fu_579_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_48_i_fu_500_p1)) else "0";
    slt8_fu_584_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_50_i_fu_504_p1)) else "0";
    slt_fu_520_p2 <= "1" when (signed(threshold_high_read_reg_794) < signed(tmp_33_i_fu_467_p1)) else "0";

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_cond_i_reg_852)
    begin
        if (((or_cond_i_reg_852 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond_i_reg_852, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond_i_reg_852 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    threshold_high_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, threshold_high_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_high_blk_n <= threshold_high_empty_n;
        else 
            threshold_high_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_high_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, threshold_low_empty_n, threshold_high_empty_n)
    begin
        if ((not(((threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_high_read <= ap_const_logic_1;
        else 
            threshold_high_read <= ap_const_logic_0;
        end if; 
    end process;


    threshold_low_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, threshold_low_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_low_blk_n <= threshold_low_empty_n;
        else 
            threshold_low_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    threshold_low_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, threshold_low_empty_n, threshold_high_empty_n)
    begin
        if ((not(((threshold_high_empty_n = ap_const_logic_0) or (threshold_low_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            threshold_low_read <= ap_const_logic_1;
        else 
            threshold_low_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp21_fu_451_p2 <= (tmp_24_i_reg_831 or icmp2_fu_439_p2);
    tmp22_fu_456_p2 <= (tmp_32_i_fu_445_p2 or icmp_reg_821);
    tmp23_fu_589_p2 <= (sel_tmp6_fu_514_p2 and rev_fu_525_p2);
    tmp24_fu_595_p2 <= (rev3_fu_558_p2 and rev2_fu_547_p2);
    tmp25_fu_601_p2 <= (tmp24_fu_595_p2 and rev1_fu_536_p2);
    tmp26_fu_607_p2 <= (tmp25_fu_601_p2 and tmp23_fu_589_p2);
    tmp27_fu_677_p2 <= (rev5_fu_657_p2 and rev4_fu_652_p2);
    tmp28_fu_683_p2 <= (rev8_fu_672_p2 and rev7_fu_667_p2);
    tmp29_fu_689_p2 <= (tmp28_fu_683_p2 and rev6_fu_662_p2);
    tmp30_fu_695_p2 <= (tmp29_fu_689_p2 and tmp27_fu_677_p2);
    tmp31_fu_706_p2 <= (sel_tmp4_fu_701_p2 or or_cond6_i_reg_876);
    tmp_21_i_fu_283_p2 <= "1" when (unsigned(t_V_reg_248) < unsigned(ap_const_lv10_2D0)) else "0";
    tmp_22_demorgan_fu_711_p2 <= (tmp_34_i_reg_881 or tmp31_fu_706_p2);
    tmp_23_i_fu_305_p2 <= "1" when (t_V_reg_248 = ap_const_lv10_0) else "0";
    tmp_24_i_fu_311_p2 <= "1" when (unsigned(t_V_reg_248) > unsigned(ap_const_lv10_2CF)) else "0";
    tmp_26_i_fu_329_p2 <= "1" when (unsigned(ap_phi_mux_t_V_2_phi_fu_263_p4) < unsigned(ap_const_lv11_500)) else "0";
    tmp_29_i_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_2_phi_fu_263_p4),64));
    tmp_30_i_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_259_pp0_iter1_reg),64));
    tmp_32_i_fu_445_p2 <= "1" when (unsigned(t_V_2_reg_259_pp0_iter1_reg) > unsigned(ap_const_lv11_4FF)) else "0";
    tmp_33_i_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_fu_160),32));
    tmp_34_i_fu_471_p2 <= "1" when (signed(tmp_33_i_fu_467_p1) < signed(threshold_low_read_reg_789)) else "0";
    tmp_36_fu_429_p4 <= t_V_2_reg_259_pp0_iter1_reg(10 downto 1);
    tmp_36_i_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_0_0_win_va_fu_422_p3),32));
    tmp_37_fu_716_p2 <= (tmp_22_demorgan_fu_711_p2 xor ap_const_lv1_1);
    tmp_38_i_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_fu_152),32));
    tmp_40_i_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_2_fu_156),32));
    tmp_42_i_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_0_0_win_va_fu_415_p3),32));
    tmp_44_i_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_2_fu_164),32));
    tmp_46_i_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_0_0_win_va_fu_408_p3),32));
    tmp_48_i_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_fu_168),32));
    tmp_50_i_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_2_fu_172),32));
    tmp_53_i_fu_346_p2 <= "1" when (ap_phi_mux_t_V_2_phi_fu_263_p4 = ap_const_lv11_0) else "0";
    tmp_fu_289_p4 <= t_V_reg_248(9 downto 1);
    win_val_0_0_0_win_va_fu_422_p3 <= 
        element_gd_i_fu_148 when (tmp_26_i_reg_845_pp0_iter1_reg(0) = '1') else 
        win_val_0_1_fu_152;
    win_val_1_0_0_win_va_fu_415_p3 <= 
        tmp0_i_fu_144 when (tmp_26_i_reg_845_pp0_iter1_reg(0) = '1') else 
        win_val_1_1_fu_160;
    win_val_2_0_0_win_va_fu_408_p3 <= 
        tmp1_i_fu_140 when (tmp_26_i_reg_845_pp0_iter1_reg(0) = '1') else 
        win_val_2_1_fu_168;
end behav;
