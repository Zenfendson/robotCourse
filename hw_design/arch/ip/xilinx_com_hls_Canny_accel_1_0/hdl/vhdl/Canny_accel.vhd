-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Canny_accel is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    in_strm_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_strm_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_strm_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_strm_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_strm_TVALID : IN STD_LOGIC;
    in_strm_TREADY : OUT STD_LOGIC;
    out_strm_TVALID : OUT STD_LOGIC;
    out_strm_TREADY : IN STD_LOGIC );
end;


architecture behav of Canny_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Canny_accel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=939231,HLS_SYN_TPT=939231,HLS_SYN_MEM=18,HLS_SYN_DSP=1,HLS_SYN_FF=3155,HLS_SYN_LUT=5835,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal low_threshold : STD_LOGIC_VECTOR (7 downto 0);
    signal high_threshold : STD_LOGIC_VECTOR (7 downto 0);
    signal pre_process211_U0_ap_start : STD_LOGIC;
    signal pre_process211_U0_ap_done : STD_LOGIC;
    signal pre_process211_U0_ap_continue : STD_LOGIC;
    signal pre_process211_U0_ap_idle : STD_LOGIC;
    signal pre_process211_U0_ap_ready : STD_LOGIC;
    signal pre_process211_U0_start_out : STD_LOGIC;
    signal pre_process211_U0_start_write : STD_LOGIC;
    signal pre_process211_U0_in_strm_TREADY : STD_LOGIC;
    signal pre_process211_U0_out_strm_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal pre_process211_U0_out_strm_V_V_write : STD_LOGIC;
    signal pre_process211_U0_low_threshold_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal pre_process211_U0_low_threshold_out_write : STD_LOGIC;
    signal pre_process211_U0_high_threshold_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal pre_process211_U0_high_threshold_out_write : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_ap_start : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_ap_done : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_ap_continue : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_ap_idle : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_ap_ready : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_start_out : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_start_write : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_p_src_mat_V_V_read : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_out_strm_V_V_din : STD_LOGIC_VECTOR (1 downto 0);
    signal xFCannyEdgeDetector_U0_out_strm_V_V_write : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_p_lowthreshold_read : STD_LOGIC;
    signal xFCannyEdgeDetector_U0_p_highthreshold_read : STD_LOGIC;
    signal post_process_U0_ap_start : STD_LOGIC;
    signal post_process_U0_ap_done : STD_LOGIC;
    signal post_process_U0_ap_continue : STD_LOGIC;
    signal post_process_U0_ap_idle : STD_LOGIC;
    signal post_process_U0_ap_ready : STD_LOGIC;
    signal post_process_U0_in_strm_V_V_read : STD_LOGIC;
    signal post_process_U0_out_strm_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal post_process_U0_out_strm_TVALID : STD_LOGIC;
    signal post_process_U0_out_strm_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal post_process_U0_out_strm_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal post_process_U0_out_strm_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal post_process_U0_out_strm_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal post_process_U0_out_strm_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal post_process_U0_out_strm_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal strm_src_V_V_full_n : STD_LOGIC;
    signal strm_src_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal strm_src_V_V_empty_n : STD_LOGIC;
    signal low_threshold_c_full_n : STD_LOGIC;
    signal low_threshold_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal low_threshold_c_empty_n : STD_LOGIC;
    signal high_threshold_c_full_n : STD_LOGIC;
    signal high_threshold_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal high_threshold_c_empty_n : STD_LOGIC;
    signal strm_dst_V_V_full_n : STD_LOGIC;
    signal strm_dst_V_V_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal strm_dst_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_xFCannyEdgeDetector_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFCannyEdgeDetector_U0_full_n : STD_LOGIC;
    signal start_for_xFCannyEdgeDetector_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xFCannyEdgeDetector_U0_empty_n : STD_LOGIC;
    signal start_for_post_process_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_post_process_U0_full_n : STD_LOGIC;
    signal start_for_post_process_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_post_process_U0_empty_n : STD_LOGIC;
    signal post_process_U0_start_full_n : STD_LOGIC;
    signal post_process_U0_start_write : STD_LOGIC;

    component pre_process211 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_strm_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        in_strm_TVALID : IN STD_LOGIC;
        in_strm_TREADY : OUT STD_LOGIC;
        in_strm_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        in_strm_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        in_strm_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_strm_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_strm_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_strm_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        out_strm_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_strm_V_V_full_n : IN STD_LOGIC;
        out_strm_V_V_write : OUT STD_LOGIC;
        low_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
        high_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
        low_threshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        low_threshold_out_full_n : IN STD_LOGIC;
        low_threshold_out_write : OUT STD_LOGIC;
        high_threshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        high_threshold_out_full_n : IN STD_LOGIC;
        high_threshold_out_write : OUT STD_LOGIC );
    end component;


    component xFCannyEdgeDetector IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_mat_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_mat_V_V_empty_n : IN STD_LOGIC;
        p_src_mat_V_V_read : OUT STD_LOGIC;
        out_strm_V_V_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        out_strm_V_V_full_n : IN STD_LOGIC;
        out_strm_V_V_write : OUT STD_LOGIC;
        p_lowthreshold_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_lowthreshold_empty_n : IN STD_LOGIC;
        p_lowthreshold_read : OUT STD_LOGIC;
        p_highthreshold_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_highthreshold_empty_n : IN STD_LOGIC;
        p_highthreshold_read : OUT STD_LOGIC );
    end component;


    component post_process IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_strm_V_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        in_strm_V_V_empty_n : IN STD_LOGIC;
        in_strm_V_V_read : OUT STD_LOGIC;
        out_strm_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_strm_TVALID : OUT STD_LOGIC;
        out_strm_TREADY : IN STD_LOGIC;
        out_strm_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_strm_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_strm_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_strm_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_strm_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_strm_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xFCannysc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_post_prtde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Canny_accel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        low_threshold : OUT STD_LOGIC_VECTOR (7 downto 0);
        high_threshold : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Canny_accel_AXILiteS_s_axi_U : component Canny_accel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        low_threshold => low_threshold,
        high_threshold => high_threshold);

    pre_process211_U0 : component pre_process211
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pre_process211_U0_ap_start,
        start_full_n => start_for_xFCannyEdgeDetector_U0_full_n,
        ap_done => pre_process211_U0_ap_done,
        ap_continue => pre_process211_U0_ap_continue,
        ap_idle => pre_process211_U0_ap_idle,
        ap_ready => pre_process211_U0_ap_ready,
        start_out => pre_process211_U0_start_out,
        start_write => pre_process211_U0_start_write,
        in_strm_TDATA => in_strm_TDATA,
        in_strm_TVALID => in_strm_TVALID,
        in_strm_TREADY => pre_process211_U0_in_strm_TREADY,
        in_strm_TKEEP => in_strm_TKEEP,
        in_strm_TSTRB => in_strm_TSTRB,
        in_strm_TUSER => in_strm_TUSER,
        in_strm_TLAST => in_strm_TLAST,
        in_strm_TID => in_strm_TID,
        in_strm_TDEST => in_strm_TDEST,
        out_strm_V_V_din => pre_process211_U0_out_strm_V_V_din,
        out_strm_V_V_full_n => strm_src_V_V_full_n,
        out_strm_V_V_write => pre_process211_U0_out_strm_V_V_write,
        low_threshold => low_threshold,
        high_threshold => high_threshold,
        low_threshold_out_din => pre_process211_U0_low_threshold_out_din,
        low_threshold_out_full_n => low_threshold_c_full_n,
        low_threshold_out_write => pre_process211_U0_low_threshold_out_write,
        high_threshold_out_din => pre_process211_U0_high_threshold_out_din,
        high_threshold_out_full_n => high_threshold_c_full_n,
        high_threshold_out_write => pre_process211_U0_high_threshold_out_write);

    xFCannyEdgeDetector_U0 : component xFCannyEdgeDetector
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xFCannyEdgeDetector_U0_ap_start,
        start_full_n => start_for_post_process_U0_full_n,
        ap_done => xFCannyEdgeDetector_U0_ap_done,
        ap_continue => xFCannyEdgeDetector_U0_ap_continue,
        ap_idle => xFCannyEdgeDetector_U0_ap_idle,
        ap_ready => xFCannyEdgeDetector_U0_ap_ready,
        start_out => xFCannyEdgeDetector_U0_start_out,
        start_write => xFCannyEdgeDetector_U0_start_write,
        p_src_mat_V_V_dout => strm_src_V_V_dout,
        p_src_mat_V_V_empty_n => strm_src_V_V_empty_n,
        p_src_mat_V_V_read => xFCannyEdgeDetector_U0_p_src_mat_V_V_read,
        out_strm_V_V_din => xFCannyEdgeDetector_U0_out_strm_V_V_din,
        out_strm_V_V_full_n => strm_dst_V_V_full_n,
        out_strm_V_V_write => xFCannyEdgeDetector_U0_out_strm_V_V_write,
        p_lowthreshold_dout => low_threshold_c_dout,
        p_lowthreshold_empty_n => low_threshold_c_empty_n,
        p_lowthreshold_read => xFCannyEdgeDetector_U0_p_lowthreshold_read,
        p_highthreshold_dout => high_threshold_c_dout,
        p_highthreshold_empty_n => high_threshold_c_empty_n,
        p_highthreshold_read => xFCannyEdgeDetector_U0_p_highthreshold_read);

    post_process_U0 : component post_process
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => post_process_U0_ap_start,
        ap_done => post_process_U0_ap_done,
        ap_continue => post_process_U0_ap_continue,
        ap_idle => post_process_U0_ap_idle,
        ap_ready => post_process_U0_ap_ready,
        in_strm_V_V_dout => strm_dst_V_V_dout,
        in_strm_V_V_empty_n => strm_dst_V_V_empty_n,
        in_strm_V_V_read => post_process_U0_in_strm_V_V_read,
        out_strm_TDATA => post_process_U0_out_strm_TDATA,
        out_strm_TVALID => post_process_U0_out_strm_TVALID,
        out_strm_TREADY => out_strm_TREADY,
        out_strm_TKEEP => post_process_U0_out_strm_TKEEP,
        out_strm_TSTRB => post_process_U0_out_strm_TSTRB,
        out_strm_TUSER => post_process_U0_out_strm_TUSER,
        out_strm_TLAST => post_process_U0_out_strm_TLAST,
        out_strm_TID => post_process_U0_out_strm_TID,
        out_strm_TDEST => post_process_U0_out_strm_TDEST);

    strm_src_V_V_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pre_process211_U0_out_strm_V_V_din,
        if_full_n => strm_src_V_V_full_n,
        if_write => pre_process211_U0_out_strm_V_V_write,
        if_dout => strm_src_V_V_dout,
        if_empty_n => strm_src_V_V_empty_n,
        if_read => xFCannyEdgeDetector_U0_p_src_mat_V_V_read);

    low_threshold_c_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pre_process211_U0_low_threshold_out_din,
        if_full_n => low_threshold_c_full_n,
        if_write => pre_process211_U0_low_threshold_out_write,
        if_dout => low_threshold_c_dout,
        if_empty_n => low_threshold_c_empty_n,
        if_read => xFCannyEdgeDetector_U0_p_lowthreshold_read);

    high_threshold_c_U : component fifo_w8_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pre_process211_U0_high_threshold_out_din,
        if_full_n => high_threshold_c_full_n,
        if_write => pre_process211_U0_high_threshold_out_write,
        if_dout => high_threshold_c_dout,
        if_empty_n => high_threshold_c_empty_n,
        if_read => xFCannyEdgeDetector_U0_p_highthreshold_read);

    strm_dst_V_V_U : component fifo_w2_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xFCannyEdgeDetector_U0_out_strm_V_V_din,
        if_full_n => strm_dst_V_V_full_n,
        if_write => xFCannyEdgeDetector_U0_out_strm_V_V_write,
        if_dout => strm_dst_V_V_dout,
        if_empty_n => strm_dst_V_V_empty_n,
        if_read => post_process_U0_in_strm_V_V_read);

    start_for_xFCannysc4_U : component start_for_xFCannysc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xFCannyEdgeDetector_U0_din,
        if_full_n => start_for_xFCannyEdgeDetector_U0_full_n,
        if_write => pre_process211_U0_start_write,
        if_dout => start_for_xFCannyEdgeDetector_U0_dout,
        if_empty_n => start_for_xFCannyEdgeDetector_U0_empty_n,
        if_read => xFCannyEdgeDetector_U0_ap_ready);

    start_for_post_prtde_U : component start_for_post_prtde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_post_process_U0_din,
        if_full_n => start_for_post_process_U0_full_n,
        if_write => xFCannyEdgeDetector_U0_start_write,
        if_dout => start_for_post_process_U0_dout,
        if_empty_n => start_for_post_process_U0_empty_n,
        if_read => post_process_U0_ap_ready);




    ap_done <= post_process_U0_ap_done;
    ap_idle <= (xFCannyEdgeDetector_U0_ap_idle and pre_process211_U0_ap_idle and post_process_U0_ap_idle);
    ap_ready <= pre_process211_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= post_process_U0_ap_done;
    ap_sync_ready <= pre_process211_U0_ap_ready;
    in_strm_TREADY <= pre_process211_U0_in_strm_TREADY;
    out_strm_TDATA <= post_process_U0_out_strm_TDATA;
    out_strm_TDEST <= post_process_U0_out_strm_TDEST;
    out_strm_TID <= post_process_U0_out_strm_TID;
    out_strm_TKEEP <= post_process_U0_out_strm_TKEEP;
    out_strm_TLAST <= post_process_U0_out_strm_TLAST;
    out_strm_TSTRB <= post_process_U0_out_strm_TSTRB;
    out_strm_TUSER <= post_process_U0_out_strm_TUSER;
    out_strm_TVALID <= post_process_U0_out_strm_TVALID;
    post_process_U0_ap_continue <= ap_const_logic_1;
    post_process_U0_ap_start <= start_for_post_process_U0_empty_n;
    post_process_U0_start_full_n <= ap_const_logic_1;
    post_process_U0_start_write <= ap_const_logic_0;
    pre_process211_U0_ap_continue <= ap_const_logic_1;
    pre_process211_U0_ap_start <= ap_start;
    start_for_post_process_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xFCannyEdgeDetector_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xFCannyEdgeDetector_U0_ap_continue <= ap_const_logic_1;
    xFCannyEdgeDetector_U0_ap_start <= start_for_xFCannyEdgeDetector_U0_empty_n;
end behav;
