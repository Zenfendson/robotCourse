-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFMagnitudeKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src1_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_src1_V_V_empty_n : IN STD_LOGIC;
    p_src1_V_V_read : OUT STD_LOGIC;
    p_src2_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_src2_V_V_empty_n : IN STD_LOGIC;
    p_src2_V_V_read : OUT STD_LOGIC;
    p_dst_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_dst_V_V_full_n : IN STD_LOGIC;
    p_dst_V_V_write : OUT STD_LOGIC );
end;


architecture behav of xFMagnitudeKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src1_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src2_V_V_blk_n : STD_LOGIC;
    signal p_dst_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_217_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_128 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_145_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_1_fu_157_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_12_reg_226 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_13_reg_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_163_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_169_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_243 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_reg_117 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_30_fu_175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_188_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_195_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_182_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((exitcond1_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_117 <= i_1_reg_212;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_117 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_128 <= j_1_fu_157_p2;
            elsif (((exitcond1_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_128 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_217 <= exitcond_fu_151_p2;
                exitcond_reg_217_pp0_iter1_reg <= exitcond_reg_217;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_212 <= i_1_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_217 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_22_reg_238 <= tmp_22_fu_163_p2;
                tmp_V_12_reg_226 <= p_src1_V_V_dout;
                tmp_V_13_reg_232 <= p_src2_V_V_dout;
                tmp_s_reg_243 <= tmp_s_fu_169_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond1_fu_139_p2, ap_CS_fsm_state2, exitcond_fu_151_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_151_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_fu_151_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, p_dst_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_217, ap_enable_reg_pp0_iter2, exitcond_reg_217_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_reg_217_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_217 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_217 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, p_dst_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_217, ap_enable_reg_pp0_iter2, exitcond_reg_217_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_reg_217_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_217 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_217 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, p_dst_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_217, ap_enable_reg_pp0_iter2, exitcond_reg_217_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_reg_217_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_217 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_217 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, exitcond_reg_217)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_reg_217 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_217 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(p_dst_V_V_full_n, exitcond_reg_217_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((exitcond_reg_217_pp0_iter1_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_151_p2)
    begin
        if ((exitcond_fu_151_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_139_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond1_fu_139_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_139_p2 <= "1" when (i_reg_117 = ap_const_lv10_2D0) else "0";
    exitcond_fu_151_p2 <= "1" when (j_reg_128 = ap_const_lv11_500) else "0";
    i_1_fu_145_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv10_1));
    j_1_fu_157_p2 <= std_logic_vector(unsigned(j_reg_128) + unsigned(ap_const_lv11_1));

    p_dst_V_V_blk_n_assign_proc : process(p_dst_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_reg_217_pp0_iter1_reg)
    begin
        if (((exitcond_reg_217_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_V_V_blk_n <= p_dst_V_V_full_n;
        else 
            p_dst_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_V_V_din <= std_logic_vector(unsigned(tmp_24_fu_195_p3) + unsigned(tmp_23_fu_182_p3));

    p_dst_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_reg_217_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_217_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_V_V_write <= ap_const_logic_1;
        else 
            p_dst_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src1_V_V_blk_n_assign_proc : process(p_src1_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_217)
    begin
        if (((exitcond_reg_217 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src1_V_V_blk_n <= p_src1_V_V_empty_n;
        else 
            p_src1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src1_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_217, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_217 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src1_V_V_read <= ap_const_logic_1;
        else 
            p_src1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src2_V_V_blk_n_assign_proc : process(p_src2_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_217)
    begin
        if (((exitcond_reg_217 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src2_V_V_blk_n <= p_src2_V_V_empty_n;
        else 
            p_src2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src2_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_217, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_217 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src2_V_V_read <= ap_const_logic_1;
        else 
            p_src2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_22_fu_163_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_src1_V_V_dout));
    tmp_23_fu_182_p3 <= 
        tmp_22_reg_238 when (tmp_30_fu_175_p3(0) = '1') else 
        tmp_V_12_reg_226;
    tmp_24_fu_195_p3 <= 
        tmp_s_reg_243 when (tmp_31_fu_188_p3(0) = '1') else 
        tmp_V_13_reg_232;
    tmp_30_fu_175_p3 <= tmp_V_12_reg_226(15 downto 15);
    tmp_31_fu_188_p3 <= tmp_V_13_reg_232(15 downto 15);
    tmp_s_fu_169_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_src2_V_V_dout));
end behav;
