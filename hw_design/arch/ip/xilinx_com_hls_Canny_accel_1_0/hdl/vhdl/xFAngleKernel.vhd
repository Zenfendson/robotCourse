-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFAngleKernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src1_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_src1_V_V_empty_n : IN STD_LOGIC;
    p_src1_V_V_read : OUT STD_LOGIC;
    p_src2_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_src2_V_V_empty_n : IN STD_LOGIC;
    p_src2_V_V_read : OUT STD_LOGIC;
    p_dst_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_V_V_full_n : IN STD_LOGIC;
    p_dst_V_V_write : OUT STD_LOGIC );
end;


architecture behav of xFAngleKernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv31_3505 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000011010100000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src1_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src2_V_V_blk_n : STD_LOGIC;
    signal p_dst_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal exitcond_reg_348_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_10_reg_158 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_175_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_343 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_348_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_348_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_348_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_348_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_348_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_348_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_187_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_18_reg_357 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_reg_357_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_reg_357_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_reg_357_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_reg_357_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_reg_357_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_18_reg_357_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_364 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_364_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_364_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_364_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_364_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_364_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_19_reg_364_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_376_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_376_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_376_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_376_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_214_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_381 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_381_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_381_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_381_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tg22x_1_reg_392 : STD_LOGIC_VECTOR (30 downto 0);
    signal tg22x_1_reg_392_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_232_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_398 : STD_LOGIC_VECTOR (15 downto 0);
    signal tg67x_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tg67x_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal t_V_reg_147 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_27_fu_209_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_227_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tg22x_1_cast1_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ya_fu_254_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ya_cast_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_cast_cast_fu_299_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel4_fu_310_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_327_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_327_p00 : STD_LOGIC_VECTOR (30 downto 0);

    component Canny_accel_mul_mg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    Canny_accel_mul_mg8j_U47 : component Canny_accel_mul_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_327_p0,
        din1 => grp_fu_327_p1,
        ce => grp_fu_327_ce,
        dout => grp_fu_327_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((exitcond1_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_10_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                t_V_10_reg_158 <= j_V_fu_187_p2;
            elsif (((exitcond1_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_10_reg_158 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                t_V_reg_147 <= i_V_reg_343;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_147 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_348 <= exitcond_fu_181_p2;
                exitcond_reg_348_pp0_iter1_reg <= exitcond_reg_348;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_reg_348_pp0_iter2_reg <= exitcond_reg_348_pp0_iter1_reg;
                exitcond_reg_348_pp0_iter3_reg <= exitcond_reg_348_pp0_iter2_reg;
                exitcond_reg_348_pp0_iter4_reg <= exitcond_reg_348_pp0_iter3_reg;
                exitcond_reg_348_pp0_iter5_reg <= exitcond_reg_348_pp0_iter4_reg;
                exitcond_reg_348_pp0_iter6_reg <= exitcond_reg_348_pp0_iter5_reg;
                exitcond_reg_348_pp0_iter7_reg <= exitcond_reg_348_pp0_iter6_reg;
                p_Val2_3_reg_381_pp0_iter3_reg <= p_Val2_3_reg_381;
                p_Val2_3_reg_381_pp0_iter4_reg <= p_Val2_3_reg_381_pp0_iter3_reg;
                p_Val2_3_reg_381_pp0_iter5_reg <= p_Val2_3_reg_381_pp0_iter4_reg;
                tg22x_1_reg_392_pp0_iter6_reg <= tg22x_1_reg_392;
                tmp_36_reg_376_pp0_iter2_reg <= tmp_36_reg_376;
                tmp_36_reg_376_pp0_iter3_reg <= tmp_36_reg_376_pp0_iter2_reg;
                tmp_36_reg_376_pp0_iter4_reg <= tmp_36_reg_376_pp0_iter3_reg;
                tmp_36_reg_376_pp0_iter5_reg <= tmp_36_reg_376_pp0_iter4_reg;
                tmp_V_18_reg_357_pp0_iter2_reg <= tmp_V_18_reg_357;
                tmp_V_18_reg_357_pp0_iter3_reg <= tmp_V_18_reg_357_pp0_iter2_reg;
                tmp_V_18_reg_357_pp0_iter4_reg <= tmp_V_18_reg_357_pp0_iter3_reg;
                tmp_V_18_reg_357_pp0_iter5_reg <= tmp_V_18_reg_357_pp0_iter4_reg;
                tmp_V_18_reg_357_pp0_iter6_reg <= tmp_V_18_reg_357_pp0_iter5_reg;
                tmp_V_18_reg_357_pp0_iter7_reg <= tmp_V_18_reg_357_pp0_iter6_reg;
                tmp_V_19_reg_364_pp0_iter2_reg <= tmp_V_19_reg_364;
                tmp_V_19_reg_364_pp0_iter3_reg <= tmp_V_19_reg_364_pp0_iter2_reg;
                tmp_V_19_reg_364_pp0_iter4_reg <= tmp_V_19_reg_364_pp0_iter3_reg;
                tmp_V_19_reg_364_pp0_iter5_reg <= tmp_V_19_reg_364_pp0_iter4_reg;
                tmp_V_19_reg_364_pp0_iter6_reg <= tmp_V_19_reg_364_pp0_iter5_reg;
                tmp_V_19_reg_364_pp0_iter7_reg <= tmp_V_19_reg_364_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_343 <= i_V_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348_pp0_iter1_reg = ap_const_lv1_0))) then
                p_Val2_3_reg_381 <= p_Val2_3_fu_214_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348_pp0_iter6_reg = ap_const_lv1_0))) then
                sel_tmp2_reg_413 <= sel_tmp2_fu_281_p2;
                tmp_29_reg_408 <= tmp_29_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348_pp0_iter4_reg = ap_const_lv1_0))) then
                tg22x_1_reg_392 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348_pp0_iter5_reg = ap_const_lv1_0))) then
                tg67x_reg_403 <= tg67x_fu_248_p2;
                tmp_5_reg_398 <= tmp_5_fu_232_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_36_reg_376 <= p_src2_V_V_dout(15 downto 15);
                tmp_V_18_reg_357 <= p_src1_V_V_dout;
                tmp_V_19_reg_364 <= p_src2_V_V_dout;
                tmp_reg_371 <= p_src1_V_V_dout(15 downto 15);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, exitcond1_fu_169_p2, ap_CS_fsm_state2, exitcond_fu_181_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_181_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_181_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, p_dst_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_348, ap_enable_reg_pp0_iter8, exitcond_reg_348_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_reg_348_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_348 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_348 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, p_dst_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_348, ap_enable_reg_pp0_iter8, exitcond_reg_348_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_reg_348_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_348 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_348 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, p_dst_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_348, ap_enable_reg_pp0_iter8, exitcond_reg_348_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_reg_348_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_reg_348 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_348 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter8_assign_proc : process(p_dst_V_V_full_n, exitcond_reg_348_pp0_iter7_reg)
    begin
                ap_block_state11_pp0_stage0_iter8 <= ((exitcond_reg_348_pp0_iter7_reg = ap_const_lv1_0) and (p_dst_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src1_V_V_empty_n, p_src2_V_V_empty_n, exitcond_reg_348)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_reg_348 = ap_const_lv1_0) and (p_src2_V_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_348 = ap_const_lv1_0) and (p_src1_V_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_181_p2)
    begin
        if ((exitcond_fu_181_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_169_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond1_fu_169_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_169_p2 <= "1" when (t_V_reg_147 = ap_const_lv10_2D0) else "0";
    exitcond_fu_181_p2 <= "1" when (t_V_10_reg_158 = ap_const_lv11_500) else "0";

    grp_fu_327_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_327_ce <= ap_const_logic_1;
        else 
            grp_fu_327_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_327_p0 <= grp_fu_327_p00(16 - 1 downto 0);
    grp_fu_327_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_reg_381),31));
    grp_fu_327_p1 <= ap_const_lv31_3505(15 - 1 downto 0);
    i_V_fu_175_p2 <= std_logic_vector(unsigned(t_V_reg_147) + unsigned(ap_const_lv10_1));
    j_V_fu_187_p2 <= std_logic_vector(unsigned(t_V_10_reg_158) + unsigned(ap_const_lv11_1));
    newSel4_fu_310_p3 <= 
        ap_const_lv8_2D when (tmp_37_fu_291_p3(0) = '1') else 
        ap_const_lv8_87;
    newSel_cast_cast_fu_299_p3 <= 
        ap_const_lv8_5A when (sel_tmp2_reg_413(0) = '1') else 
        ap_const_lv8_0;
    or_cond_fu_306_p2 <= (tmp_29_reg_408 or sel_tmp2_reg_413);
    p_Val2_3_fu_214_p3 <= 
        tmp_27_fu_209_p2 when (tmp_reg_371(0) = '1') else 
        tmp_V_18_reg_357;

    p_dst_V_V_blk_n_assign_proc : process(p_dst_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, exitcond_reg_348_pp0_iter7_reg)
    begin
        if (((exitcond_reg_348_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_dst_V_V_blk_n <= p_dst_V_V_full_n;
        else 
            p_dst_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_V_V_din <= 
        newSel_cast_cast_fu_299_p3 when (or_cond_fu_306_p2(0) = '1') else 
        newSel4_fu_310_p3;

    p_dst_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter8, exitcond_reg_348_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_dst_V_V_write <= ap_const_logic_1;
        else 
            p_dst_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src1_V_V_blk_n_assign_proc : process(p_src1_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_348)
    begin
        if (((exitcond_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src1_V_V_blk_n <= p_src1_V_V_empty_n;
        else 
            p_src1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src1_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_348, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src1_V_V_read <= ap_const_logic_1;
        else 
            p_src1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src2_V_V_blk_n_assign_proc : process(p_src2_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_348)
    begin
        if (((exitcond_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src2_V_V_blk_n <= p_src2_V_V_empty_n;
        else 
            p_src2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src2_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_348, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_348 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src2_V_V_read <= ap_const_logic_1;
        else 
            p_src2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_275_p2 <= (tmp_29_fu_265_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_281_p2 <= (tmp_31_fu_270_p2 and sel_tmp1_fu_275_p2);
    tg22x_1_cast1_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tg22x_1_reg_392),32));
    tg67x_fu_248_p2 <= std_logic_vector(unsigned(tmp_30_fu_241_p3) + unsigned(tg22x_1_cast1_fu_238_p1));
    tmp_27_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_18_reg_357));
    tmp_28_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_19_reg_364_pp0_iter5_reg));
    tmp_29_fu_265_p2 <= "1" when (unsigned(ya_fu_254_p3) < unsigned(tg22x_1_reg_392_pp0_iter6_reg)) else "0";
    tmp_30_fu_241_p3 <= (p_Val2_3_reg_381_pp0_iter5_reg & ap_const_lv16_0);
    tmp_31_fu_270_p2 <= "1" when (signed(ya_cast_fu_261_p1) > signed(tg67x_reg_403)) else "0";
    tmp_32_fu_287_p2 <= (tmp_V_19_reg_364_pp0_iter7_reg xor tmp_V_18_reg_357_pp0_iter7_reg);
    tmp_37_fu_291_p3 <= tmp_32_fu_287_p2(15 downto 15);
    tmp_5_fu_232_p3 <= 
        tmp_28_fu_227_p2 when (tmp_36_reg_376_pp0_iter5_reg(0) = '1') else 
        tmp_V_19_reg_364_pp0_iter5_reg;
    ya_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ya_fu_254_p3),32));
    ya_fu_254_p3 <= (tmp_5_reg_398 & ap_const_lv15_0);
end behav;
